'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var mitt = _interopDefault(require('@livechat/mitt'));
var es5 = require('@livechat/postmessage/es5');

var withAmplitude = function withAmplitude(widget) {
  return Object.assign({}, widget, {
    trackEvent: function trackEvent(name, properties) {
      if (typeof name !== 'string' || typeof properties !== 'object') {
        throw new Error('You have to specify the event name and its properties');
      }

      return widget.sendMessage('track', {
        event_name: name,
        event_properties: properties
      });
    }
  });
};

var withCustomerProfile = function withCustomerProfile(widget) {
  var customerProfile = null;

  function onCustomerProfile(profile) {
    customerProfile = profile;
  }

  widget.on('customer_profile', onCustomerProfile);
  return Object.assign({}, widget, {
    getCustomerProfile: function getCustomerProfile() {
      return customerProfile;
    }
  });
};

var withRichMessages = function withRichMessages(widget) {
  return Object.assign({}, widget, {
    sendQuickReplies: function sendQuickReplies(title, buttons) {
      return widget.sendMessage('send_quick_replies', {
        title: title,
        buttons: buttons
      });
    },
    sendCards: function sendCards(cards) {
      return widget.sendMessage('send_cards', Array.isArray(cards) ? cards : [cards]);
    }
  });
};

function createWidget(connection, api) {
  return Object.assign({}, api, {
    on: connection.emitter.on,
    off: connection.emitter.off,
    sendMessage: function sendMessage(name, data) {
      if (data === void 0) {
        data = null;
      }

      return connection.sendMessage(name, data);
    }
  });
}

/**
 * Domain allowed to communicate via iframe with Agent App SDK.
 */
var ALLOWED_DOMAINS = ['livechatinc.com', 'livechat.com', 'my.lc:3000', 'legacy.lc:3001'];
/**
 * Returns `true`, if origin is allowed to communicate with Agent App SDK.
 * @param {string} origin Origin of `message` event targetting Agent App SDK.
 * @
 */

function getIsEventOriginAllowed(origin) {
  if (!origin) {
    return false;
  }

  try {
    var originURL = new URL(origin);
    var originDomain = originURL.hostname;
    var splitted = originDomain.split('.');
    var domainOnly = splitted.slice(splitted.length - 2).join('.'); // As .lc domain is registerable we restrict our development environment
    // based on port usage.

    var toBeVerified = originURL.port ? domainOnly + ":" + originURL.port : domainOnly;
    return ALLOWED_DOMAINS.includes(toBeVerified);
  } catch (_a) {
    return false;
  }
}

function Plain() {
  var currentListener = function currentListener(_) {};

  function handleEvent(event) {
    var isEventOrignAllowed = getIsEventOriginAllowed(event.origin);

    if (isEventOrignAllowed) {
      currentListener(event.data);
    }
  }

  window.addEventListener('message', handleEvent);
  return {
    listen: function listen(listener) {
      currentListener = listener;
    },
    send: function send(message) {
      parent.postMessage(message, '*');
      return Promise.resolve();
    }
  };
}
function Trusted() {
  var currentListener = function currentListener(_) {};

  function handleMessage(message) {
    currentListener(message);
  }

  return es5.connectToParent({
    handle: handleMessage
  }).promise.then(function (child) {
    return {
      listen: function listen(listener) {
        currentListener = listener;
      },
      send: function send(message) {
        return child.call('handle', message).then(function () {});
      }
    };
  });
}

function getQueryParams() {
  return location.search.replace(/^\?/, '').split('&').map(function (pair) {
    return pair.split('=').map(decodeURIComponent);
  }).reduce(function (params, _ref) {
    var param = _ref[0],
        value = _ref[1];
    params[param] = value;
    return params;
  }, {});
}
function getQueryParam(name) {
  var queryParams = getQueryParams();
  return queryParams[name] !== undefined ? queryParams[name] : null;
}

var PLUGIN_ID_PARAM = 'plugin_id';
var CONNECTION_PARAM = 'connection';
var MESSAGE_PREFIX = 'livechat:';

function Connection(driver, pluginId) {
  var emitter = mitt();

  function handleMessage(message) {
    if (!message || !message.event_name) {
      return;
    }

    var messageName = message.event_name.toString();
    var messageData = message.event_data;

    if (messageName.startsWith(MESSAGE_PREFIX)) {
      emitter.emit(messageName.replace(MESSAGE_PREFIX, ''), messageData);
    }
  }

  driver.listen(handleMessage);
  return {
    emitter: emitter,
    sendMessage: function sendMessage(name, data) {
      if (data === void 0) {
        data = null;
      }

      return driver.send({
        plugin_id: pluginId,
        message: name,
        data: data
      });
    }
  };
}

function createConnection() {
  var pluginId = getQueryParam(PLUGIN_ID_PARAM);
  var usePlainConnection = getQueryParam(CONNECTION_PARAM) === 'plain';
  var driverPromise = usePlainConnection ? Promise.resolve(Plain()) : Trusted();
  return driverPromise.then(function (driver) {
    return Connection(driver, pluginId);
  });
}

(function (SectionComponentType) {
  SectionComponentType["Button"] = "button";
  SectionComponentType["LabelValue"] = "label_value";
  SectionComponentType["Title"] = "title";
  SectionComponentType["Link"] = "link";
  SectionComponentType["Line"] = "line";
  SectionComponentType["Customer"] = "customer";
  SectionComponentType["Tags"] = "tags";
})(exports.SectionComponentType || (exports.SectionComponentType = {}));

var _componentValidators;
var AVAILABLE_COMPONENT_TYPES = Object.keys(exports.SectionComponentType).map(function (name) {
  return exports.SectionComponentType[name];
});
var componentValidators = (_componentValidators = {}, _componentValidators[exports.SectionComponentType.Button] = function (_ref) {
  var data = _ref.data;

  if (!data || !data.label) {
    throw new Error("The button component must have a 'label' property");
  }

  if (!data.id) {
    throw new Error("The button component must have a 'id' property");
  }
}, _componentValidators[exports.SectionComponentType.Link] = function (_ref2) {
  var data = _ref2.data;

  if (!data || !data.url) {
    throw new Error("The link component must have a 'url' property");
  }
}, _componentValidators[exports.SectionComponentType.Title] = function (_ref3) {
  var data = _ref3.data;

  if (!data || !data.title) {
    throw new Error("The title component must have a 'title' property");
  }

  if (typeof data.imgSize !== 'undefined') {
    if (!['big', 'small'].includes(data.imgSize)) {
      throw new Error("The title component must have a valid 'imgSize' property, allowed values are 'small' and 'big'");
    }
  }
}, _componentValidators);

function assertComponent(component) {
  if (typeof component !== 'object') {
    throw new Error("The component definition must be an object");
  }

  var type = component.type;

  if (typeof type !== 'string' || !AVAILABLE_COMPONENT_TYPES.includes(type)) {
    throw new Error("Invalid component type given: '" + type + "'");
  }

  var validator = componentValidators[type];

  if (validator) {
    validator(component);
  }
}

function assertSection(section) {
  if (!section) {
    throw new Error('You need to provide a section defintion');
  }

  var title = section.title,
      components = section.components;

  if (typeof title !== 'string' || !title) {
    throw new Error("You need to provide a title for the new section using the 'title' property");
  }

  if (!Array.isArray(components) || !components.length) {
    throw new Error("You need to provide an array of component definitions for your section using the 'components' property");
  }

  components.forEach(assertComponent);
}

function DetailsWidget(connection) {
  var base = createWidget(connection, {
    putMessage: function putMessage(text) {
      return connection.sendMessage('put_message', text);
    },
    watchMessages: function watchMessages() {
      return connection.sendMessage('watch_messages');
    },
    refreshSession: function refreshSession() {
      return connection.sendMessage('plugin_loaded');
    },
    modifySection: function modifySection(section) {
      assertSection(section);
      return connection.sendMessage('customer_details_section', section);
    }
  });
  var widget = withAmplitude(withRichMessages(withCustomerProfile(base)));
  return widget;
}

function createDetailsWidget() {
  var widget;
  return createConnection().then(function (connection) {
    widget = DetailsWidget(connection);
    return connection.sendMessage('plugin_inited');
  }).then(function () {
    return widget;
  });
}

function MessageBoxWidget(connection) {
  var base = createWidget(connection, {
    putMessage: function putMessage(msg) {
      var data;

      if (typeof msg === 'string') {
        data = {
          type: 'text',
          value: msg
        };
      } else {
        data = {
          type: 'rich_message',
          payload: msg
        };
      }

      return connection.sendMessage('put_messagebox_message', data);
    }
  });
  var widget = withAmplitude(withRichMessages(withCustomerProfile(base)));
  return widget;
}

function createMessageBoxWidget() {
  return createConnection().then(function (connection) {
    return MessageBoxWidget(connection);
  });
}

function FullscreenWidget(connection) {
  var base = createWidget(connection, {
    setNotificationBadge: function setNotificationBadge(count) {
      return connection.sendMessage('set_fullscreen_widget_notification_badge', count);
    }
  });
  return withAmplitude(base);
}

function createFullscreenWidget() {
  return createConnection().then(function (connection) {
    return FullscreenWidget(connection);
  });
}

exports.createDetailsWidget = createDetailsWidget;
exports.createFullscreenWidget = createFullscreenWidget;
exports.createMessageBoxWidget = createMessageBoxWidget;
exports.withCustomerProfile = withCustomerProfile;
