(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react-dom'), require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react-dom', 'react'], factory) :
  (factory((global.DesignSystem = {}),global.ReactDOM,global.React));
}(this, (function (exports,ReactDOM,React) { 'use strict';

  var ReactDOM__default = 'default' in ReactDOM ? ReactDOM['default'] : ReactDOM;
  var React__default = 'default' in React ? React['default'] : React;

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var reactIs_production_min = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports,"__esModule",{value:!0});
  var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.suspense_list"):
  60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.fundamental"):60117,w=b?Symbol.for("react.responder"):60118,x=b?Symbol.for("react.scope"):60119;function y(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function z(a){return y(a)===m}
  exports.typeOf=y;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;
  exports.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===v||a.$$typeof===w||a.$$typeof===x)};exports.isAsyncMode=function(a){return z(a)||y(a)===l};exports.isConcurrentMode=z;exports.isContextConsumer=function(a){return y(a)===k};exports.isContextProvider=function(a){return y(a)===h};
  exports.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return y(a)===n};exports.isFragment=function(a){return y(a)===e};exports.isLazy=function(a){return y(a)===t};exports.isMemo=function(a){return y(a)===r};exports.isPortal=function(a){return y(a)===d};exports.isProfiler=function(a){return y(a)===g};exports.isStrictMode=function(a){return y(a)===f};exports.isSuspense=function(a){return y(a)===p};
  });

  unwrapExports(reactIs_production_min);
  var reactIs_production_min_1 = reactIs_production_min.typeOf;
  var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
  var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
  var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
  var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
  var reactIs_production_min_6 = reactIs_production_min.Element;
  var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
  var reactIs_production_min_8 = reactIs_production_min.Fragment;
  var reactIs_production_min_9 = reactIs_production_min.Lazy;
  var reactIs_production_min_10 = reactIs_production_min.Memo;
  var reactIs_production_min_11 = reactIs_production_min.Portal;
  var reactIs_production_min_12 = reactIs_production_min.Profiler;
  var reactIs_production_min_13 = reactIs_production_min.StrictMode;
  var reactIs_production_min_14 = reactIs_production_min.Suspense;
  var reactIs_production_min_15 = reactIs_production_min.isValidElementType;
  var reactIs_production_min_16 = reactIs_production_min.isAsyncMode;
  var reactIs_production_min_17 = reactIs_production_min.isConcurrentMode;
  var reactIs_production_min_18 = reactIs_production_min.isContextConsumer;
  var reactIs_production_min_19 = reactIs_production_min.isContextProvider;
  var reactIs_production_min_20 = reactIs_production_min.isElement;
  var reactIs_production_min_21 = reactIs_production_min.isForwardRef;
  var reactIs_production_min_22 = reactIs_production_min.isFragment;
  var reactIs_production_min_23 = reactIs_production_min.isLazy;
  var reactIs_production_min_24 = reactIs_production_min.isMemo;
  var reactIs_production_min_25 = reactIs_production_min.isPortal;
  var reactIs_production_min_26 = reactIs_production_min.isProfiler;
  var reactIs_production_min_27 = reactIs_production_min.isStrictMode;
  var reactIs_production_min_28 = reactIs_production_min.isSuspense;

  var reactIs_development = createCommonjsModule(function (module, exports) {



  {
    (function() {

  Object.defineProperty(exports, '__esModule', { value: true });

  // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  var hasSymbol = typeof Symbol === 'function' && Symbol.for;
  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
  var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
  var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
  var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
  var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
  var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
  // (unstable) APIs that have been removed. Can we remove the symbols?

  var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
  var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
  var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
  var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
  var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
  var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
  var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
  var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
  var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
  var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

  function isValidElementType(type) {
    return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
    type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);
  }

  /**
   * Forked from fbjs/warning:
   * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
   *
   * Only change is we use console.warn instead of console.error,
   * and do nothing when 'console' is not supported.
   * This really simplifies the code.
   * ---
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */
  var lowPriorityWarningWithoutStack = function () {};

  {
    var printWarning = function (format) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });

      if (typeof console !== 'undefined') {
        console.warn(message);
      }

      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    lowPriorityWarningWithoutStack = function (condition, format) {
      if (format === undefined) {
        throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(void 0, [format].concat(args));
      }
    };
  }

  var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

  function typeOf(object) {
    if (typeof object === 'object' && object !== null) {
      var $$typeof = object.$$typeof;

      switch ($$typeof) {
        case REACT_ELEMENT_TYPE:
          var type = object.type;

          switch (type) {
            case REACT_ASYNC_MODE_TYPE:
            case REACT_CONCURRENT_MODE_TYPE:
            case REACT_FRAGMENT_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_SUSPENSE_TYPE:
              return type;

            default:
              var $$typeofType = type && type.$$typeof;

              switch ($$typeofType) {
                case REACT_CONTEXT_TYPE:
                case REACT_FORWARD_REF_TYPE:
                case REACT_LAZY_TYPE:
                case REACT_MEMO_TYPE:
                case REACT_PROVIDER_TYPE:
                  return $$typeofType;

                default:
                  return $$typeof;
              }

          }

        case REACT_PORTAL_TYPE:
          return $$typeof;
      }
    }

    return undefined;
  } // AsyncMode is deprecated along with isAsyncMode

  var AsyncMode = REACT_ASYNC_MODE_TYPE;
  var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
  var ContextConsumer = REACT_CONTEXT_TYPE;
  var ContextProvider = REACT_PROVIDER_TYPE;
  var Element = REACT_ELEMENT_TYPE;
  var ForwardRef = REACT_FORWARD_REF_TYPE;
  var Fragment = REACT_FRAGMENT_TYPE;
  var Lazy = REACT_LAZY_TYPE;
  var Memo = REACT_MEMO_TYPE;
  var Portal = REACT_PORTAL_TYPE;
  var Profiler = REACT_PROFILER_TYPE;
  var StrictMode = REACT_STRICT_MODE_TYPE;
  var Suspense = REACT_SUSPENSE_TYPE;
  var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

  function isAsyncMode(object) {
    {
      if (!hasWarnedAboutDeprecatedIsAsyncMode) {
        hasWarnedAboutDeprecatedIsAsyncMode = true;
        lowPriorityWarningWithoutStack$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
      }
    }

    return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
  }
  function isConcurrentMode(object) {
    return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
  }
  function isContextConsumer(object) {
    return typeOf(object) === REACT_CONTEXT_TYPE;
  }
  function isContextProvider(object) {
    return typeOf(object) === REACT_PROVIDER_TYPE;
  }
  function isElement(object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
  function isForwardRef(object) {
    return typeOf(object) === REACT_FORWARD_REF_TYPE;
  }
  function isFragment(object) {
    return typeOf(object) === REACT_FRAGMENT_TYPE;
  }
  function isLazy(object) {
    return typeOf(object) === REACT_LAZY_TYPE;
  }
  function isMemo(object) {
    return typeOf(object) === REACT_MEMO_TYPE;
  }
  function isPortal(object) {
    return typeOf(object) === REACT_PORTAL_TYPE;
  }
  function isProfiler(object) {
    return typeOf(object) === REACT_PROFILER_TYPE;
  }
  function isStrictMode(object) {
    return typeOf(object) === REACT_STRICT_MODE_TYPE;
  }
  function isSuspense(object) {
    return typeOf(object) === REACT_SUSPENSE_TYPE;
  }

  exports.typeOf = typeOf;
  exports.AsyncMode = AsyncMode;
  exports.ConcurrentMode = ConcurrentMode;
  exports.ContextConsumer = ContextConsumer;
  exports.ContextProvider = ContextProvider;
  exports.Element = Element;
  exports.ForwardRef = ForwardRef;
  exports.Fragment = Fragment;
  exports.Lazy = Lazy;
  exports.Memo = Memo;
  exports.Portal = Portal;
  exports.Profiler = Profiler;
  exports.StrictMode = StrictMode;
  exports.Suspense = Suspense;
  exports.isValidElementType = isValidElementType;
  exports.isAsyncMode = isAsyncMode;
  exports.isConcurrentMode = isConcurrentMode;
  exports.isContextConsumer = isContextConsumer;
  exports.isContextProvider = isContextProvider;
  exports.isElement = isElement;
  exports.isForwardRef = isForwardRef;
  exports.isFragment = isFragment;
  exports.isLazy = isLazy;
  exports.isMemo = isMemo;
  exports.isPortal = isPortal;
  exports.isProfiler = isProfiler;
  exports.isStrictMode = isStrictMode;
  exports.isSuspense = isSuspense;
    })();
  }
  });

  var reactIs_development$1 = unwrapExports(reactIs_development);
  var reactIs_development_1 = reactIs_development.typeOf;
  var reactIs_development_2 = reactIs_development.AsyncMode;
  var reactIs_development_3 = reactIs_development.ConcurrentMode;
  var reactIs_development_4 = reactIs_development.ContextConsumer;
  var reactIs_development_5 = reactIs_development.ContextProvider;
  var reactIs_development_6 = reactIs_development.Element;
  var reactIs_development_7 = reactIs_development.ForwardRef;
  var reactIs_development_8 = reactIs_development.Fragment;
  var reactIs_development_9 = reactIs_development.Lazy;
  var reactIs_development_10 = reactIs_development.Memo;
  var reactIs_development_11 = reactIs_development.Portal;
  var reactIs_development_12 = reactIs_development.Profiler;
  var reactIs_development_13 = reactIs_development.StrictMode;
  var reactIs_development_14 = reactIs_development.Suspense;
  var reactIs_development_15 = reactIs_development.isValidElementType;
  var reactIs_development_16 = reactIs_development.isAsyncMode;
  var reactIs_development_17 = reactIs_development.isConcurrentMode;
  var reactIs_development_18 = reactIs_development.isContextConsumer;
  var reactIs_development_19 = reactIs_development.isContextProvider;
  var reactIs_development_20 = reactIs_development.isElement;
  var reactIs_development_21 = reactIs_development.isForwardRef;
  var reactIs_development_22 = reactIs_development.isFragment;
  var reactIs_development_23 = reactIs_development.isLazy;
  var reactIs_development_24 = reactIs_development.isMemo;
  var reactIs_development_25 = reactIs_development.isPortal;
  var reactIs_development_26 = reactIs_development.isProfiler;
  var reactIs_development_27 = reactIs_development.isStrictMode;
  var reactIs_development_28 = reactIs_development.isSuspense;

  var reactIs_development$2 = /*#__PURE__*/Object.freeze({
    default: reactIs_development$1,
    __moduleExports: reactIs_development,
    typeOf: reactIs_development_1,
    AsyncMode: reactIs_development_2,
    ConcurrentMode: reactIs_development_3,
    ContextConsumer: reactIs_development_4,
    ContextProvider: reactIs_development_5,
    Element: reactIs_development_6,
    ForwardRef: reactIs_development_7,
    Fragment: reactIs_development_8,
    Lazy: reactIs_development_9,
    Memo: reactIs_development_10,
    Portal: reactIs_development_11,
    Profiler: reactIs_development_12,
    StrictMode: reactIs_development_13,
    Suspense: reactIs_development_14,
    isValidElementType: reactIs_development_15,
    isAsyncMode: reactIs_development_16,
    isConcurrentMode: reactIs_development_17,
    isContextConsumer: reactIs_development_18,
    isContextProvider: reactIs_development_19,
    isElement: reactIs_development_20,
    isForwardRef: reactIs_development_21,
    isFragment: reactIs_development_22,
    isLazy: reactIs_development_23,
    isMemo: reactIs_development_24,
    isPortal: reactIs_development_25,
    isProfiler: reactIs_development_26,
    isStrictMode: reactIs_development_27,
    isSuspense: reactIs_development_28
  });

  var require$$1 = ( reactIs_development$2 && reactIs_development$1 ) || reactIs_development$2;

  var reactIs = createCommonjsModule(function (module) {

  {
    module.exports = require$$1;
  }
  });

  var reactIs$1 = /*#__PURE__*/Object.freeze({
    default: reactIs,
    __moduleExports: reactIs
  });

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
  	if (val === null || val === undefined) {
  		throw new TypeError('Object.assign cannot be called with null or undefined');
  	}

  	return Object(val);
  }

  function shouldUseNative() {
  	try {
  		if (!Object.assign) {
  			return false;
  		}

  		// Detect buggy property enumeration order in older V8 versions.

  		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
  		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
  		test1[5] = 'de';
  		if (Object.getOwnPropertyNames(test1)[0] === '5') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test2 = {};
  		for (var i = 0; i < 10; i++) {
  			test2['_' + String.fromCharCode(i)] = i;
  		}
  		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
  			return test2[n];
  		});
  		if (order2.join('') !== '0123456789') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test3 = {};
  		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
  			test3[letter] = letter;
  		});
  		if (Object.keys(Object.assign({}, test3)).join('') !==
  				'abcdefghijklmnopqrst') {
  			return false;
  		}

  		return true;
  	} catch (err) {
  		// We don't expect any of the above to throw, but better to be safe.
  		return false;
  	}
  }

  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  	var from;
  	var to = toObject(target);
  	var symbols;

  	for (var s = 1; s < arguments.length; s++) {
  		from = Object(arguments[s]);

  		for (var key in from) {
  			if (hasOwnProperty.call(from, key)) {
  				to[key] = from[key];
  			}
  		}

  		if (getOwnPropertySymbols) {
  			symbols = getOwnPropertySymbols(from);
  			for (var i = 0; i < symbols.length; i++) {
  				if (propIsEnumerable.call(from, symbols[i])) {
  					to[symbols[i]] = from[symbols[i]];
  				}
  			}
  		}
  	}

  	return to;
  };

  var objectAssign$1 = /*#__PURE__*/Object.freeze({
    default: objectAssign,
    __moduleExports: objectAssign
  });

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var ReactPropTypesSecret_1 = ReactPropTypesSecret;

  var ReactPropTypesSecret$1 = /*#__PURE__*/Object.freeze({
    default: ReactPropTypesSecret_1,
    __moduleExports: ReactPropTypesSecret_1
  });

  var require$$0$1 = ( ReactPropTypesSecret$1 && ReactPropTypesSecret_1 ) || ReactPropTypesSecret$1;

  var printWarning = function() {};

  {
    var ReactPropTypesSecret$2 = require$$0$1;
    var loggedTypeFailures = {};
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    printWarning = function(text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }

  /**
   * Assert that the values match with the type specs.
   * Error messages are memorized and will only be shown once.
   *
   * @param {object} typeSpecs Map of name to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @param {string} componentName Name of the component for error messages.
   * @param {?Function} getStack Returns the component stack.
   * @private
   */
  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    {
      for (var typeSpecName in typeSpecs) {
        if (has(typeSpecs, typeSpecName)) {
          var error;
          // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error(
                (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
              );
              err.name = 'Invariant Violation';
              throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$2);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning(
              (componentName || 'React class') + ': type specification of ' +
              location + ' `' + typeSpecName + '` is invalid; the type checker ' +
              'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
              'You may have forgotten to pass an argument to the type checker ' +
              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
              'shape all require an argument).'
            );
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;

            var stack = getStack ? getStack() : '';

            printWarning(
              'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
            );
          }
        }
      }
    }
  }

  /**
   * Resets warning cache when testing.
   *
   * @private
   */
  checkPropTypes.resetWarningCache = function() {
    {
      loggedTypeFailures = {};
    }
  };

  var checkPropTypes_1 = checkPropTypes;

  var checkPropTypes$1 = /*#__PURE__*/Object.freeze({
    default: checkPropTypes_1,
    __moduleExports: checkPropTypes_1
  });

  var ReactIs = ( reactIs$1 && reactIs ) || reactIs$1;

  var assign = ( objectAssign$1 && objectAssign ) || objectAssign$1;

  var checkPropTypes$2 = ( checkPropTypes$1 && checkPropTypes_1 ) || checkPropTypes$1;

  var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
  var printWarning$1 = function() {};

  {
    printWarning$1 = function(text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }

  function emptyFunctionThatReturnsNull() {
    return null;
  }

  var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */

    var ANONYMOUS = '<<anonymous>>';

    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),

      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker,
    };

    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    /*eslint-disable no-self-compare*/
    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
    }
    /*eslint-enable no-self-compare*/

    /**
     * We use an Error-like object for backward compatibility as people may call
     * PropTypes directly and inspect their output. However, we don't use real
     * Errors anymore. We don't inspect their stack anyway, and creating them
     * is prohibitively expensive if they are created too often, such as what
     * happens in oneOfType() for any type before the one that matched.
     */
    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== require$$0$1) {
          if (throwOnDirectAccess) {
            // New behavior only for users of `prop-types` package
            var err = new Error(
              'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
              'Use `PropTypes.checkPropTypes()` to call them. ' +
              'Read more at http://fb.me/use-check-prop-types'
            );
            err.name = 'Invariant Violation';
            throw err;
          } else if (typeof console !== 'undefined') {
            // Old behavior for people using React.PropTypes
            var cacheKey = componentName + ':' + propName;
            if (
              !manualPropTypeCallCache[cacheKey] &&
              // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3
            ) {
              printWarning$1(
                'You are manually calling a React.PropTypes validation ' +
                'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
                'and will throw in the standalone `prop-types` package. ' +
                'You may be seeing this warning due to a third-party PropTypes ' +
                'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
              );
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);

      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue);

          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', require$$0$1);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!ReactIs.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        {
          if (arguments.length > 1) {
            printWarning$1(
              'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
              'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
            );
          } else {
            printWarning$1('Invalid argument supplied to oneOf, expected an array.');
          }
        }
        return emptyFunctionThatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type = getPreciseType(value);
          if (type === 'symbol') {
            return String(value);
          }
          return value;
        });
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }
      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }
        for (var key in propValue) {
          if (has$1(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, require$$0$1);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.');
        return emptyFunctionThatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== 'function') {
          printWarning$1(
            'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
            'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
          );
          return emptyFunctionThatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (checker(props, propName, componentName, location, propFullName, require$$0$1) == null) {
            return null;
          }
        }

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }
      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (!checker) {
            continue;
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, require$$0$1);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        // We need to check all keys in case some are required but missing from
        // props.
        var allKeys = assign({}, props[propName], shapeTypes);
        for (var key in allKeys) {
          var checker = shapeTypes[key];
          if (!checker) {
            return new PropTypeError(
              'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
              '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
              '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
            );
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, require$$0$1);
          if (error) {
            return error;
          }
        }
        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;
        case 'boolean':
          return !propValue;
        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              // Iterator will provide entry [k,v] tuples rather than values.
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;
        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      // Native Symbol.
      if (propType === 'symbol') {
        return true;
      }

      // falsy value can't be a Symbol
      if (!propValue) {
        return false;
      }

      // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      // Fallback for non-spec compliant Symbols which are polyfilled.
      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return 'array';
      }
      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
      }
      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }
      return propType;
    }

    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }
      return propType;
    }

    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);
      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;
        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;
        default:
          return type;
      }
    }

    // Returns class name of the object, if any.
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes$2;
    ReactPropTypes.resetWarningCache = checkPropTypes$2.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;

    return ReactPropTypes;
  };

  var factoryWithTypeCheckers$1 = /*#__PURE__*/Object.freeze({
    default: factoryWithTypeCheckers,
    __moduleExports: factoryWithTypeCheckers
  });

  var require$$1$1 = ( factoryWithTypeCheckers$1 && factoryWithTypeCheckers ) || factoryWithTypeCheckers$1;

  var propTypes = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    var ReactIs$$1 = ReactIs;

    // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod
    var throwOnDirectAccess = true;
    module.exports = require$$1$1(ReactIs$$1.isElement, throwOnDirectAccess);
  }
  });
  var propTypes_1 = propTypes.array;
  var propTypes_2 = propTypes.bool;
  var propTypes_3 = propTypes.func;
  var propTypes_4 = propTypes.number;
  var propTypes_5 = propTypes.object;
  var propTypes_6 = propTypes.string;
  var propTypes_7 = propTypes.symbol;
  var propTypes_8 = propTypes.any;
  var propTypes_9 = propTypes.arrayOf;
  var propTypes_10 = propTypes.element;
  var propTypes_11 = propTypes.elementType;
  var propTypes_12 = propTypes.instanceOf;
  var propTypes_13 = propTypes.node;
  var propTypes_14 = propTypes.objectOf;
  var propTypes_15 = propTypes.oneOf;
  var propTypes_16 = propTypes.oneOfType;
  var propTypes_17 = propTypes.shape;
  var propTypes_18 = propTypes.exact;
  var propTypes_19 = propTypes.checkPropTypes;
  var propTypes_20 = propTypes.resetWarningCache;
  var propTypes_21 = propTypes.PropTypes;

  var bind = createCommonjsModule(function (module) {
  /*!
    Copyright (c) 2017 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */
  /* global define */

  (function () {

  	var hasOwn = {}.hasOwnProperty;

  	function classNames () {
  		var classes = [];

  		for (var i = 0; i < arguments.length; i++) {
  			var arg = arguments[i];
  			if (!arg) continue;

  			var argType = typeof arg;

  			if (argType === 'string' || argType === 'number') {
  				classes.push(this && this[arg] || arg);
  			} else if (Array.isArray(arg)) {
  				classes.push(classNames.apply(this, arg));
  			} else if (argType === 'object') {
  				for (var key in arg) {
  					if (hasOwn.call(arg, key) && arg[key]) {
  						classes.push(this && this[key] || key);
  					}
  				}
  			}
  		}

  		return classes.join(' ');
  	}

  	if (module.exports) {
  		classNames.default = classNames;
  		module.exports = classNames;
  	} else {
  		window.classNames = classNames;
  	}
  }());
  });

  var styles = { "btn": "lc-btn", "btn--loading": "lc-btn--loading", "btn--disabled": "lc-btn--disabled", "btn--full-width": "lc-btn--full-width", "btn--primary": "lc-btn--primary", "btn--secondary": "lc-btn--secondary", "btn--destructive": "lc-btn--destructive", "btn--text": "lc-btn--text", "btn--large": "lc-btn--large", "btn--compact": "lc-btn--compact", "icon": "lc-icon", "btn__loader": "lc-btn__loader", "btn__loader-label": "lc-btn__loader-label", "btn__icon": "lc-btn__icon", "btn__icon-left": "lc-btn__icon-left", "btn__icon-right": "lc-btn__icon-right" };

  var getMergedClassNames = function getMergedClassNames(classNames, classNameProperty) {
    if (classNameProperty) {
      return classNames + " " + classNameProperty;
    }
    return classNames;
  };

  var styles$1 = { "loader-spinner": "lc-loader-spinner", "rotate": "lc-rotate", "loader-spinner--thin": "lc-loader-spinner--thin", "loader-spinner--medium": "lc-loader-spinner--medium", "loader-spinner--thick": "lc-loader-spinner--thick", "loader-spinner-wrapper": "lc-loader-spinner-wrapper", "loader-spinner-wrapper--small": "lc-loader-spinner-wrapper--small", "loader-spinner-wrapper--medium": "lc-loader-spinner-wrapper--medium", "loader-spinner-wrapper--large": "lc-loader-spinner-wrapper--large", "loader-spinner-wrapper--hidden": "lc-loader-spinner-wrapper--hidden", "loader-label": "lc-loader-label", "loader-wrapper": "lc-loader-wrapper", "loader-wrapper--hidden": "lc-loader-wrapper--hidden" };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var cx = bind.bind(styles$1);

  var baseClass = 'loader-wrapper';

  var LoaderWrapper = function LoaderWrapper(props) {
    var _cx;

    var className = props.className,
        isLoading = props.isLoading,
        children = props.children,
        restProps = objectWithoutProperties(props, ['className', 'isLoading', 'children']);


    var mergedClassNames = getMergedClassNames(cx((_cx = {}, _cx[baseClass] = true, _cx[baseClass + '--hidden'] = isLoading !== undefined && !isLoading, _cx)), className);

    return React.createElement(
      'div',
      _extends({}, restProps, { className: mergedClassNames }),
      children
    );
  };
  LoaderWrapper.propTypes = {
    children: propTypes_16([propTypes_13, propTypes_9(propTypes_13)]),
    className: propTypes_6,
    isLoading: propTypes_2
  };

  var _THICKNESS_FROM_SIZE;

  var THICKNESS = {
    thin: 'thin',
    medium: 'medium',
    thick: 'thick'
  };

  var SIZE = {
    small: 'small',
    medium: 'medium',
    large: 'large'
  };

  var THICKNESS_FROM_SIZE = (_THICKNESS_FROM_SIZE = {}, _THICKNESS_FROM_SIZE[SIZE.small] = THICKNESS.thin, _THICKNESS_FROM_SIZE[SIZE.medium] = THICKNESS.medium, _THICKNESS_FROM_SIZE[SIZE.large] = THICKNESS.thick, _THICKNESS_FROM_SIZE);

  var cx$1 = bind.bind(styles$1);

  var baseClass$1 = 'loader-spinner';

  var LoaderSpinner = function LoaderSpinner(props) {
    var _cx, _cx2;

    var className = props.className,
        isLoading = props.isLoading,
        size = props.size,
        primaryColor = props.primaryColor,
        secondaryColor = props.secondaryColor,
        spinnerClassName = props.spinnerClassName,
        restProps = objectWithoutProperties(props, ['className', 'isLoading', 'size', 'primaryColor', 'secondaryColor', 'spinnerClassName']);


    var mergedWrapperClassNames = getMergedClassNames(cx$1((_cx = {}, _cx[baseClass$1 + '-wrapper'] = true, _cx[baseClass$1 + '-wrapper--' + size] = size, _cx[baseClass$1 + '-wrapper--hidden'] = isLoading !== undefined && !isLoading, _cx)), className);

    var mergedSpinnerClassNames = getMergedClassNames(cx$1((_cx2 = {}, _cx2[baseClass$1] = true, _cx2[baseClass$1 + '--' + THICKNESS_FROM_SIZE[size]] = size && THICKNESS_FROM_SIZE[size], _cx2)), spinnerClassName);

    return React.createElement(
      'div',
      _extends({ className: mergedWrapperClassNames }, restProps),
      React.createElement('div', {
        className: mergedSpinnerClassNames,
        style: (primaryColor || secondaryColor) && {
          borderColor: secondaryColor,
          borderTopColor: primaryColor
        }
      })
    );
  };
  LoaderSpinner.propTypes = {
    className: propTypes_6,
    spinnerClassName: propTypes_6,
    isLoading: propTypes_2,
    primaryColor: propTypes_6,
    secondaryColor: propTypes_6,
    size: propTypes_15(['small', 'medium', 'large'])
  };

  var cx$2 = bind.bind(styles$1);

  var baseClass$2 = 'loader-label';

  var LoaderLabel = function LoaderLabel(props) {
    var className = props.className,
        children = props.children,
        restProps = objectWithoutProperties(props, ['className', 'children']);


    var mergedClassNames = getMergedClassNames(cx$2(baseClass$2), className);

    return React.createElement(
      'div',
      _extends({ className: mergedClassNames }, restProps),
      children
    );
  };
  LoaderLabel.propTypes = {
    children: propTypes_13,
    className: propTypes_6
  };

  var Loader = function Loader(props) {
    var className = props.className,
        isLoading = props.isLoading,
        label = props.label,
        spinnerClassName = props.spinnerClassName,
        spinnerWrapperClassName = props.spinnerWrapperClassName,
        labelClassName = props.labelClassName,
        primaryColor = props.primaryColor,
        secondaryColor = props.secondaryColor,
        size = props.size,
        restProps = objectWithoutProperties(props, ['className', 'isLoading', 'label', 'spinnerClassName', 'spinnerWrapperClassName', 'labelClassName', 'primaryColor', 'secondaryColor', 'size']);


    return React.createElement(
      LoaderWrapper,
      _extends({}, restProps, { isLoading: isLoading, className: className }),
      React.createElement(LoaderSpinner, {
        className: spinnerWrapperClassName,
        spinnerClassName: spinnerClassName,
        primaryColor: primaryColor,
        secondaryColor: secondaryColor,
        size: size
      }),
      label && React.createElement(
        LoaderLabel,
        { className: labelClassName },
        label
      )
    );
  };
  Loader.propTypes = {
    /**
     * Classname for the wrapper of the loader atoms (label and spinner).
     */
    className: propTypes_6,
    /**
     * A brief description of the process.
     */
    label: propTypes_6,
    /**
     * Label element classname.
     */
    labelClassName: propTypes_6,
    /**
     * Spinner element classname.
     */
    spinnerClassName: propTypes_6,
    /**
     * Spinner wrapper classname.
     */
    spinnerWrapperClassName: propTypes_6,
    /**
     * You can unmount Loader when it's not necessary or use `isLoading` prop to control its visibility without unmounting.
     */
    isLoading: propTypes_2,
    /**
     * Changing primary color of spinner.
     */
    primaryColor: propTypes_6,
    /**
     * Changing secondary color of spinner.
     */
    secondaryColor: propTypes_6,
    /**
     * `Size` prop defines width and height of the wrapper and spinner thickness if it is not provided.
     * To define your custom size use css and `spinnerWrapperClassName` property (however, we recommend using defined size).
     */
    size: propTypes_15(['small', 'medium', 'large'])
  };

  var noticeAboutDeprecation = function noticeAboutDeprecation(message) {
      console.error('[Design System] ' + message);
  };

  var cx$3 = bind.bind(styles);

  var ButtonIcon = function ButtonIcon(_ref) {
    var _cx;

    var position = _ref.position,
        children = _ref.children;

    var baseClass = 'btn__icon';
    var classes = getMergedClassNames(cx$3((_cx = {}, _cx['' + baseClass] = true, _cx[baseClass + '-left'] = position === 'left', _cx[baseClass + '-right'] = position === 'right', _cx)));
    return React.createElement(
      'i',
      { className: classes },
      children
    );
  };

  ButtonIcon.propTypes = {
    position: propTypes_15(['left', 'right']).isRequired,
    children: propTypes_13.isRequired
  };

  var cx$4 = bind.bind(styles);
  var acceptedSizes = ['large', 'compact'];
  var acceptedKinds = ['primary', 'secondary', 'destructive', 'text'];

  var getDeprecatedKind = function getDeprecatedKind(primary, destructive, secondary) {
    if (primary) {
      return 'primary';
    }

    if (destructive) {
      return 'destructive';
    }

    if (secondary) {
      return 'secondary';
    }

    return null;
  };

  var Button = React.forwardRef(function (props, ref) {
    var _cx;

    var children = props.children,
        primary = props.primary,
        destructive = props.destructive,
        disabled = props.disabled,
        loading = props.loading,
        loaderLabel = props.loaderLabel,
        icon = props.icon,
        size = props.size,
        fullWidth = props.fullWidth,
        submit = props.submit,
        secondary = props.secondary,
        accessibilityLabel = props.accessibilityLabel,
        ariaControls = props.ariaControls,
        ariaExpanded = props.ariaExpanded,
        className = props.className,
        htmlType = props.type,
        kind = props.kind,
        iconPosition = props.iconPosition,
        buttonProps = objectWithoutProperties(props, ['children', 'primary', 'destructive', 'disabled', 'loading', 'loaderLabel', 'icon', 'size', 'fullWidth', 'submit', 'secondary', 'accessibilityLabel', 'ariaControls', 'ariaExpanded', 'className', 'type', 'kind', 'iconPosition']);


    var isDisabled = disabled || loading;
    var type = submit ? 'submit' : htmlType || 'button';
    var isValidKind = kind && acceptedKinds.includes(kind);
    var deprecatedKind = getDeprecatedKind(primary, destructive, secondary);
    var buttonKind = isValidKind && kind || deprecatedKind || null;

    if (deprecatedKind) {
      noticeAboutDeprecation('deprecated prop \'' + deprecatedKind + '\' in Button component - please use \'kind\' prop instead');
    }

    var baseClass = 'btn';
    var mergedClassNames = getMergedClassNames(cx$4((_cx = {}, _cx[baseClass] = true, _cx[baseClass + '--disabled'] = disabled, _cx[baseClass + '--loading'] = loading, _cx[baseClass + '--full-width'] = fullWidth, _cx[baseClass + '--' + buttonKind] = !!buttonKind, _cx[baseClass + '--' + size] = acceptedSizes.some(function (s) {
      return s === size;
    }), _cx)), className);

    return React.createElement(
      'button',
      _extends({}, buttonProps, {
        ref: ref,
        className: mergedClassNames,
        type: type,
        disabled: isDisabled,
        role: loading ? 'alert' : undefined,
        'aria-busy': loading ? true : undefined,
        'aria-label': accessibilityLabel,
        'aria-controls': ariaControls,
        'aria-expanded': ariaExpanded
      }),
      loading && React.createElement(Loader, {
        size: 'small',
        label: loaderLabel,
        className: styles[baseClass + '__loader'],
        labelClassName: styles[baseClass + '__loader-label']
      }),
      icon && React.createElement(
        ButtonIcon,
        { position: iconPosition },
        icon
      ),
      children && React.createElement(
        'div',
        null,
        children
      )
    );
  });

  Button.defaultProps = {
    iconPosition: 'left'
  };

  Button.propTypes = {
    accessibilityLabel: propTypes_6,
    ariaControls: propTypes_6,
    ariaExpanded: propTypes_6,
    children: propTypes_13.isRequired,
    className: propTypes_6,
    id: propTypes_6,
    disabled: propTypes_2,
    /**
     * Sets button width to max-width=320px
     */
    fullWidth: propTypes_2,
    icon: propTypes_13,
    loading: propTypes_2,
    loaderLabel: propTypes_13,
    onClick: propTypes_3,
    onFocus: propTypes_3,
    onBlur: propTypes_3,
    /**
     * Size of button
     */
    size: propTypes_15(['compact', 'large']),
    submit: propTypes_2,
    type: propTypes_6,
    /**
     * Type of button
     */
    kind: propTypes_15(['primary', 'secondary', 'destructive', 'text']),
    /**
     * Position of provided icon
     */
    iconPosition: propTypes_15(['left', 'right']),
    /**
     * DEPRECATED - use 'kind' instead
     */
    primary: propTypes_2,
    /**
     * DEPRECATED - use 'kind' instead
     */
    destructive: propTypes_2,
    /**
     * DEPRECATED - use 'kind' instead
     */
    secondary: propTypes_2
  };

  var classnames = createCommonjsModule(function (module) {
  /*!
    Copyright (c) 2017 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */
  /* global define */

  (function () {

  	var hasOwn = {}.hasOwnProperty;

  	function classNames () {
  		var classes = [];

  		for (var i = 0; i < arguments.length; i++) {
  			var arg = arguments[i];
  			if (!arg) continue;

  			var argType = typeof arg;

  			if (argType === 'string' || argType === 'number') {
  				classes.push(arg);
  			} else if (Array.isArray(arg) && arg.length) {
  				var inner = classNames.apply(null, arg);
  				if (inner) {
  					classes.push(inner);
  				}
  			} else if (argType === 'object') {
  				for (var key in arg) {
  					if (hasOwn.call(arg, key) && arg[key]) {
  						classes.push(key);
  					}
  				}
  			}
  		}

  		return classes.join(' ');
  	}

  	if (module.exports) {
  		classNames.default = classNames;
  		module.exports = classNames;
  	} else {
  		window.classNames = classNames;
  	}
  }());
  });

  var styles$2 = { "btn-group": "lc-btn-group", "btn": "lc-btn", "active": "lc-active" };

  var defaultIndex = -1;
  var baseClass$3 = 'btn-group';

  var ButtonGroup = function (_React$Component) {
    inherits(ButtonGroup, _React$Component);

    function ButtonGroup() {
      var _temp, _this, _ret;

      classCallCheck(this, ButtonGroup);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
        index: defaultIndex
      }, _this.handleClick = function (index, event) {
        if (_this.props.onIndexChange) {
          _this.props.onIndexChange(index, event);
        }
        _this.setState({ currentIndex: index });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    ButtonGroup.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      return {
        index: typeof props.currentIndex === 'number' ? props.currentIndex : state.currentIndex
      };
    };

    ButtonGroup.prototype.render = function render() {
      var _this2 = this;

      var index = this.state.index;
      var _props = this.props,
          size = _props.size,
          fullWidth = _props.fullWidth,
          children = _props.children,
          className = _props.className,
          onIndexChange = _props.onIndexChange,
          currentIndex = _props.currentIndex,
          restProps = objectWithoutProperties(_props, ['size', 'fullWidth', 'children', 'className', 'onIndexChange', 'currentIndex']);


      var mappedChildren = React.Children.map(children, function (child, i) {
        var _cx;

        return React.cloneElement(child, {
          size: size,
          fullWidth: fullWidth,
          kind: 'secondary',
          type: 'button',
          onClick: function onClick(event) {
            _this2.handleClick(i, event);
            if (child.props.onClick) {
              child.props.onClick(event);
            }
          },
          className: classnames((_cx = {}, _cx[className] = !!className, _cx[styles$2.active] = i === index, _cx))
        });
      });

      return React.createElement(
        'div',
        _extends({ role: 'group', className: styles$2[baseClass$3] }, restProps),
        mappedChildren
      );
    };

    return ButtonGroup;
  }(React.Component);

  ButtonGroup.propTypes = {
    /**
     * If `true`, the buttons in group will take up the full width of its container
     */
    fullWidth: propTypes_2,

    /**
     * Additionall class name for buttons components
     */
    className: propTypes_6,

    /**
     * Callback fired when the value of `currentIndex` changes
     */
    onIndexChange: propTypes_3,

    /**
     * The index of button in group which is currently active
     */
    currentIndex: propTypes_4,

    /**
     * Size of buttons in group
     */
    size: propTypes_6,

    /**
     * One or more `Button` components
     */
    children: propTypes_16([propTypes_13, propTypes_9(propTypes_13)])
  };

  var CloseIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var CloseIcon = function CloseIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-close-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z" })
    );
  };

  exports.default = CloseIcon;
  });

  var CloseIcon = unwrapExports(CloseIcon_1);

  var styles$3 = { "banner": "lc-banner", "banner--small": "lc-banner--small", "banner__content": "lc-banner__content", "banner__content-text": "lc-banner__content-text", "banner--medium": "lc-banner--medium", "banner--large": "lc-banner--large", "banner__close-icon": "lc-banner__close-icon", "banner--info": "lc-banner--info", "banner--warning": "lc-banner--warning", "banner--success": "lc-banner--success", "banner--error": "lc-banner--error", "banner__icon": "lc-banner__icon" };

  var AlertIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var AlertIcon = function AlertIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-alert-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M13 14h-2v-4h2m0 8h-2v-2h2M1 21h22L12 2 1 21z" })
    );
  };

  exports.default = AlertIcon;
  });

  var AlertIcon = unwrapExports(AlertIcon_1);

  var InformationOutlineIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var InformationOutlineIcon = function InformationOutlineIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-information-outline-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M11 9h2V7h-2m1 13c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8m0-18C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m-1 15h2v-6h-2v6z" })
    );
  };

  exports.default = InformationOutlineIcon;
  });

  var InformationOutlineIcon = unwrapExports(InformationOutlineIcon_1);

  var BlockHelperIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var BlockHelperIcon = function BlockHelperIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-block-helper-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M12 0c6.63 0 12 5.37 12 12s-5.37 12-12 12S0 18.63 0 12 5.37 0 12 0m0 2C6.48 2 2 6.48 2 12c0 2.4.85 4.6 2.26 6.33L18.33 4.26A9.984 9.984 0 0 0 12 2m0 20c5.52 0 10-4.48 10-10 0-2.4-.85-4.6-2.26-6.33L5.67 19.74A9.984 9.984 0 0 0 12 22z" })
    );
  };

  exports.default = BlockHelperIcon;
  });

  var BlockHelperIcon = unwrapExports(BlockHelperIcon_1);

  var CheckCircleIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var CheckCircleIcon = function CheckCircleIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-check-circle-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M12 2c5.52 0 10 4.48 10 10s-4.48 10-10 10S2 17.52 2 12 6.48 2 12 2m-1 14.5l7-7-1.41-1.41L11 13.67l-3.09-3.08L6.5 12l4.5 4.5z" })
    );
  };

  exports.default = CheckCircleIcon;
  });

  var CheckCircleIcon = unwrapExports(CheckCircleIcon_1);

  var baseClass$4 = 'banner__icon';

  var BannerIcon = function BannerIcon(props) {
      var type = props.type;


      switch (type) {
          case 'info':
              return React.createElement(InformationOutlineIcon, { fill: '#4384f5', width: '20px', height: '20px', className: styles$3[baseClass$4] });
          case 'warning':
              return React.createElement(AlertIcon, { fill: '#fb9d01', width: '20px', height: '20px', className: styles$3[baseClass$4] });
          case 'success':
              return React.createElement(CheckCircleIcon, { fill: '#38c776', width: '20px', height: '20px', className: styles$3[baseClass$4] });
          case 'error':
              return React.createElement(BlockHelperIcon, { fill: '#d64646', width: '20px', height: '20px', className: styles$3[baseClass$4] });
      }
  };

  BannerIcon.propTypes = {
      type: propTypes_15(['info', 'warning', 'success', 'error']).isRequired
  };

  var cx$5 = bind.bind(styles$3);

  var baseClass$5 = 'banner';

  var Banner = function Banner(props) {
    var _cx;

    var children = props.children,
        className = props.className,
        onClose = props.onClose,
        size = props.size,
        type = props.type,
        restProps = objectWithoutProperties(props, ['children', 'className', 'onClose', 'size', 'type']);


    var mergedWrapperClassNames = getMergedClassNames(cx$5((_cx = {}, _cx[baseClass$5 + '--' + type] = type, _cx[baseClass$5 + '--' + size] = size, _cx['' + baseClass$5] = true, _cx)), className);

    return React.createElement(
      'div',
      _extends({ className: mergedWrapperClassNames }, restProps),
      React.createElement(
        'div',
        { className: styles$3[baseClass$5 + '__content'] },
        React.createElement(BannerIcon, { type: type }),
        React.createElement(
          'div',
          { className: styles$3[baseClass$5 + '__content-text'] },
          children
        )
      ),
      onClose && React.createElement(
        'button',
        { type: 'button', onClick: onClose, className: styles$3[baseClass$5 + '__close-icon'] },
        React.createElement(CloseIcon, { fill: '#424d57' })
      )
    );
  };
  Banner.propTypes = {
    children: propTypes_13.isRequired,
    onClose: propTypes_3,
    size: propTypes_15(['small', 'medium', 'large']),
    type: propTypes_15(['info', 'warning', 'success', 'error']).isRequired
  };

  Banner.defaultProps = {
    size: 'small',
    type: 'info'
  };

  var styles$4 = { "card": "lc-card", "card__title": "lc-card__title", "card__text": "lc-card__text", "card__img": "lc-card__img" };

  var baseClass$6 = 'card';

  var Card = function Card(props) {
    var img = props.img,
        title = props.title,
        children = props.children,
        restProps = objectWithoutProperties(props, ['img', 'title', 'children']);

    var mergedClassNames = getMergedClassNames(styles$4[baseClass$6]);

    return React.createElement(
      'div',
      _extends({}, restProps, { className: mergedClassNames }),
      (img || title) && React.createElement(
        'div',
        { className: styles$4[baseClass$6 + '__title'] },
        img && React.createElement('img', { src: img, className: styles$4[baseClass$6 + '__img'] }),
        title && React.createElement(
          'div',
          { className: styles$4[baseClass$6 + '__text'] },
          title
        )
      ),
      children
    );
  };

  Card.propTypes = {
    title: propTypes_16([propTypes_6, propTypes_10]),
    children: propTypes_13.isRequired,
    img: propTypes_6
  };

  var styles$5 = { "tab": "lc-tab", "tab__description": "lc-tab__description", "tab--selected": "lc-tab--selected", "tabs": "lc-tabs", "tabs__list": "lc-tabs__list" };

  var TabsWrapper = function TabsWrapper(_ref) {
    var _cx;

    var children = _ref.children,
        className = _ref.className,
        restProps = objectWithoutProperties(_ref, ['children', 'className']);
    return React.createElement(
      'div',
      _extends({}, restProps, { className: classnames(styles$5.tabs, (_cx = {}, _cx[className] = className, _cx)) }),
      children
    );
  };

  TabsWrapper.propTypes = {
    children: propTypes_13.isRequired,
    className: propTypes_6
  };

  var TabsList = function TabsList(_ref) {
    var _cx;

    var children = _ref.children,
        className = _ref.className,
        restProps = objectWithoutProperties(_ref, ['children', 'className']);
    return React.createElement(
      'div',
      _extends({}, restProps, {
        className: classnames(styles$5.tabs__list, (_cx = {}, _cx[className] = className, _cx))
      }),
      children
    );
  };

  TabsList.propTypes = {
    children: propTypes_13.isRequired,
    className: propTypes_6
  };

  var cx$6 = bind.bind(styles$5);

  var Tab = function Tab(_ref) {
    var children = _ref.children,
        className = _ref.className,
        description = _ref.description,
        href = _ref.href,
        isSelected = _ref.isSelected,
        restProps = objectWithoutProperties(_ref, ['children', 'className', 'description', 'href', 'isSelected']);

    var Component = function Component(props) {
      return href ? React.createElement('a', props) : React.createElement('button', props);
    };

    var mergedClassNames = getMergedClassNames(cx$6({
      tab: true,
      'tab--selected': isSelected
    }), className);

    var isDescriptionProvided = description !== null;

    return React.createElement(
      Component,
      _extends({}, restProps, { href: href, className: mergedClassNames }),
      children,
      isDescriptionProvided && React.createElement(
        'span',
        { className: styles$5.tab__description },
        '(',
        description,
        ')'
      )
    );
  };

  Tab.propTypes = {
    children: propTypes_13.isRequired,
    className: propTypes_6,
    description: propTypes_16([propTypes_6, propTypes_4, propTypes_13]),
    href: propTypes_6,
    isSelected: propTypes_2
  };

  Tab.defaultProps = {
    description: null,
    href: null,
    isSelected: false
  };

  var DIRECTION = {
    Top: 'top',
    Bottom: 'bottom',
    Left: 'left',
    Right: 'right'
  };

  var ALIGMENT = {
    Top: 'top',
    Center: 'center',
    Bottom: 'bottom',
    Left: 'left',
    Right: 'right'
  };

  var ARROW_POSITION = {
    Top: 'top',
    Bottom: 'bottom',
    Left: 'left',
    Right: 'right'
  };

  var TOOLTIP_MARGIN = 4;

  var getTooltipPosition = function getTooltipPosition(opts) {
    var direction = opts.direction,
        align = opts.align,
        offset = opts.offset,
        tooltipRefRect = opts.tooltipRefRect,
        tooltipBoxRefRect = opts.tooltipBoxRefRect;


    var tooltipXPosition = void 0;
    var tooltipYPosition = void 0;

    switch (direction) {
      case DIRECTION.Top:
        tooltipYPosition = tooltipRefRect.top - tooltipBoxRefRect.height - offset;
        switch (align) {
          case ALIGMENT.Center:
          default:
            tooltipXPosition = tooltipRefRect.left + (tooltipRefRect.width / 2 - tooltipBoxRefRect.width / 2);
            break;
          case ALIGMENT.Left:
            tooltipXPosition = tooltipRefRect.left - TOOLTIP_MARGIN;
            break;
          case ALIGMENT.Right:
            tooltipXPosition = tooltipRefRect.left + tooltipRefRect.width - tooltipBoxRefRect.width + TOOLTIP_MARGIN;
            break;
        }
        break;

      case DIRECTION.Bottom:
        tooltipYPosition = tooltipRefRect.top + tooltipRefRect.height + offset;
        switch (align) {
          case ALIGMENT.Center:
          default:
            tooltipXPosition = tooltipRefRect.left + (tooltipRefRect.width / 2 - tooltipBoxRefRect.width / 2);
            break;
          case ALIGMENT.Left:
            tooltipXPosition = tooltipRefRect.left - TOOLTIP_MARGIN;
            break;
          case ALIGMENT.Right:
            tooltipXPosition = tooltipRefRect.left + tooltipRefRect.width - tooltipBoxRefRect.width + TOOLTIP_MARGIN;
            break;
        }
        break;

      case DIRECTION.Right:
        tooltipXPosition = tooltipRefRect.left + tooltipRefRect.width + offset;
        switch (align) {
          case ALIGMENT.Center:
          default:
            tooltipYPosition = tooltipRefRect.top + tooltipRefRect.height / 2 - tooltipBoxRefRect.height / 2;
            break;
          case ALIGMENT.Top:
            tooltipYPosition = tooltipRefRect.top - TOOLTIP_MARGIN;
            break;
          case ALIGMENT.Bottom:
            tooltipYPosition = tooltipRefRect.top + tooltipRefRect.height - tooltipBoxRefRect.height + TOOLTIP_MARGIN;
            break;
        }
        break;

      case DIRECTION.Left:
        tooltipXPosition = tooltipRefRect.left - tooltipBoxRefRect.width - offset;
        switch (align) {
          case ALIGMENT.Center:
          default:
            tooltipYPosition = tooltipRefRect.top + tooltipRefRect.height / 2 - tooltipBoxRefRect.height / 2;
            break;
          case ALIGMENT.Top:
            tooltipYPosition = tooltipRefRect.top - TOOLTIP_MARGIN;
            break;
          case ALIGMENT.Bottom:
            tooltipYPosition = tooltipRefRect.top + tooltipRefRect.height - tooltipBoxRefRect.height + TOOLTIP_MARGIN;
            break;
        }
        break;

      default:
        tooltipXPosition = 0;
        tooltipYPosition = 0;
        break;
    }

    return {
      tooltipXPosition: tooltipXPosition,
      tooltipYPosition: tooltipYPosition
    };
  };

  var getArrowOffsetStyle = function getArrowOffsetStyle(arrowOffset, arrowPosition, arrowAlign) {
    if (!arrowOffset) {
      return {};
    }

    switch (arrowPosition) {
      case ARROW_POSITION.Left:
      case ARROW_POSITION.Right:
        if (arrowAlign === ALIGMENT.Bottom) {
          return { bottom: arrowOffset + 'px', top: 'auto' };
        }
        return { top: arrowOffset + 'px', bottom: 'auto' };
      case ARROW_POSITION.Top:
      case ARROW_POSITION.Bottom:
        if (arrowAlign === ALIGMENT.Right) {
          return { right: arrowOffset + 'px', left: 'auto' };
        }
        return { left: arrowOffset + 'px', right: 'auto' };
      default:
        return {};
    }
  };

  var styles$6 = { "tooltip": "lc-tooltip", "tooltip--inline": "lc-tooltip--inline", "tooltip__content": "lc-tooltip__content", "tooltip__arrow": "lc-tooltip__arrow", "tooltip__arrow--left": "lc-tooltip__arrow--left", "tooltip__arrow--right": "lc-tooltip__arrow--right", "tooltip__arrow--top": "lc-tooltip__arrow--top", "tooltip__arrow--bottom": "lc-tooltip__arrow--bottom", "tooltip__box": "lc-tooltip__box", "tooltip__box--visible": "lc-tooltip__box--visible", "tooltip__box-content": "lc-tooltip__box-content" };

  var cx$7 = bind.bind(styles$6);

  var TooltipContent = function TooltipContent(_ref) {
    var _cx;

    var backgroundColor = _ref.backgroundColor,
        className = _ref.className,
        fontColor = _ref.fontColor,
        arrowPosition = _ref.arrowPosition,
        children = _ref.children,
        arrowOffset = _ref.arrowOffset,
        arrowAlign = _ref.arrowAlign;

    var mergedClassNames = getMergedClassNames(cx$7({
      tooltip__content: true
    }), className);

    noticeAboutDeprecation('deprecated component - Tooltip, please use CSSTooltip or PopperTooltip instead');

    return React.createElement(
      'div',
      {
        className: mergedClassNames,
        style: {
          backgroundColor: backgroundColor,
          color: fontColor,
          borderColor: backgroundColor
        }
      },
      React.createElement('div', {
        className: cx$7((_cx = {
          tooltip__arrow: true
        }, _cx['tooltip__arrow--' + arrowPosition] = true, _cx)),
        style: getArrowOffsetStyle(arrowOffset, arrowPosition, arrowAlign)
      }),
      children
    );
  };

  TooltipContent.propTypes = {
    backgroundColor: propTypes_6,
    className: propTypes_6,
    fontColor: propTypes_6,
    children: propTypes_13.isRequired,
    arrowPosition: propTypes_15([ARROW_POSITION.Left, ARROW_POSITION.Right, ARROW_POSITION.Top, ARROW_POSITION.Bottom]),
    arrowAlign: propTypes_15([ALIGMENT.Top, ALIGMENT.Bottom, ALIGMENT.Left, ALIGMENT.Right, ALIGMENT.Center]),
    arrowOffset: propTypes_4
  };

  TooltipContent.defaultProps = {
    arrowPosition: ARROW_POSITION.Left,
    className: ''
  };

  var _ref = {},
      hasOwnProperty$1 = _ref.hasOwnProperty;
  function hasOwn(prop, obj) {
    return hasOwnProperty$1.call(obj, prop);
  }

  function generateRandomId() {
    return Math.random().toString(36).substring(2);
  }

  function generateUniqueId(map) {
    var id = generateRandomId();
    return hasOwn(id, map) ? generateUniqueId(map) : id;
  }

  function throttle(ms, fn) {
    var lastCall = Date.now() - 2 * ms;
    var trailingId;

    var invoke = function invoke() {
      lastCall = Date.now();
      fn.apply(void 0, arguments);
    };

    return function () {
      var now = Date.now();

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (now - lastCall >= ms) {
        invoke.apply(void 0, args);
        return;
      }

      clearTimeout(trailingId);
      trailingId = setTimeout.apply(void 0, [invoke, lastCall - now + ms].concat(args));
    };
  }

  var noop$1 = function noop() {};
  var cx$8 = bind.bind(styles$6);

  var TooltipBox = function TooltipBox(_ref) {
    var isVisible = _ref.isVisible,
        xPosition = _ref.xPosition,
        yPosition = _ref.yPosition,
        contentRef = _ref.contentRef,
        onContentMouseEnter = _ref.onContentMouseEnter,
        onContentMouseLeave = _ref.onContentMouseLeave,
        children = _ref.children;

    noticeAboutDeprecation('deprecated component - Tooltip, please use CSSTooltip or PopperTooltip instead');

    return React.createElement(
      'div',
      {
        className: cx$8({
          tooltip__box: true,
          'tooltip__box--visible': isVisible
        }),
        style: { top: yPosition + 'px', left: xPosition + 'px' },
        onMouseEnter: onContentMouseEnter,
        onMouseLeave: onContentMouseLeave,
        ref: contentRef
      },
      React.createElement(
        'div',
        { className: styles$6['tooltip__box-content'] },
        children
      )
    );
  };

  TooltipBox.propTypes = {
    children: propTypes_13.isRequired,
    isVisible: propTypes_2.isRequired,
    xPosition: propTypes_4.isRequired,
    yPosition: propTypes_4.isRequired,
    onContentMouseEnter: propTypes_3,
    onContentMouseLeave: propTypes_3,
    contentRef: propTypes_16([propTypes_5, propTypes_3, propTypes_6]).isRequired
  };

  TooltipBox.defaultProps = {
    onContentMouseEnter: noop$1,
    onContentMouseLeave: noop$1
  };

  var Tooltip = function (_React$Component) {
    inherits(Tooltip, _React$Component);

    function Tooltip(props) {
      classCallCheck(this, Tooltip);

      noticeAboutDeprecation('deprecated component - Tooltip, please use CSSTooltip or PopperTooltip instead');

      var _this = possibleConstructorReturn(this, _React$Component.call(this, props));

      _this.onViewportChange = function () {
        if (_this.state.isVisible) {
          _this.setState({ isVisible: false });
        }
      };

      _this.onMouseEnter = function () {
        if (_this.props.trigger === 'hover') {
          _this.setState({ isVisible: true });
        }
      };

      _this.onMouseLeave = function () {
        if (_this.props.trigger === 'hover') {
          _this.setState({ isVisible: false });
        }
      };

      _this.onContentMouseEnter = function () {
        if (_this.props.trigger === 'hover') {
          _this.setState({
            isVisible: _this.props.keepContentVisibleOnHover || false
          });
        }
      };

      _this.onContentMouseLeave = function () {
        if (_this.props.trigger === 'hover') {
          _this.setState({ isVisible: false });
        }
      };

      _this.calculatePosition = function (direction) {
        if (!_this.tooltipRef.current) {
          return true;
        }
        var tooltipRefRect = _this.tooltipRef.current.getBoundingClientRect();
        var tooltipBoxRefRect = _this.tooltipBoxRef.current.getBoundingClientRect();

        _this.lastTooltipRefTop = tooltipRefRect.top;
        _this.lastTooltipRefLeft = tooltipRefRect.left;
        var align = _this.getAlignment(direction);
        var offset = _this.state.offset;

        var _getTooltipPosition = getTooltipPosition({
          direction: direction,
          align: align,
          offset: offset,
          tooltipRefRect: tooltipRefRect,
          tooltipBoxRefRect: tooltipBoxRefRect
        }),
            tooltipXPosition = _getTooltipPosition.tooltipXPosition,
            tooltipYPosition = _getTooltipPosition.tooltipYPosition;

        _this.setState({ xPosition: tooltipXPosition, yPosition: tooltipYPosition });

        return true;
      };

      _this.tooltipRef = React.createRef();
      _this.tooltipBoxRef = React.createRef();


      _this.state = {
        isVisible: false,
        offset: props.offset ? props.offset : 0,
        xPosition: 0,
        yPosition: 0
      };

      _this.viewportListener = throttle(50, _this.onViewportChange);
      return _this;
    }

    Tooltip.getDerivedStateFromProps = function getDerivedStateFromProps(props) {
      if (props.trigger === 'custom') {
        return { isVisible: props.isTooltipVisible };
      }
      return null;
    };

    Tooltip.prototype.componentDidUpdate = function componentDidUpdate(_prevProps, prevState) {
      if (this.state.isVisible && !prevState.isVisible) {
        this.addEventHandlers();
      }

      if (!this.state.isVisible && prevState.isVisible) {
        this.removeEventHandlers();
      }

      if (this.state.isVisible && this.tooltipRef.current) {
        var tooltipRefRect = this.tooltipRef.current.getBoundingClientRect();

        if (tooltipRefRect.top !== this.lastTooltipRefTop || tooltipRefRect.left !== this.lastTooltipRefLeft) {
          this.recalculatePosition();
        }
      }
    };

    Tooltip.prototype.componentWillUnmount = function componentWillUnmount() {
      this.removeEventHandlers();
    };

    Tooltip.prototype.getAlignment = function getAlignment(direction) {
      var _supportedAlignments;

      var supportedAlignments = (_supportedAlignments = {}, _supportedAlignments[DIRECTION.Left] = [ALIGMENT.Center, ALIGMENT.Top, ALIGMENT.Bottom], _supportedAlignments[DIRECTION.Right] = [ALIGMENT.Center, ALIGMENT.Top, ALIGMENT.Bottom], _supportedAlignments[DIRECTION.Top] = [ALIGMENT.Center, ALIGMENT.Left, ALIGMENT.Right], _supportedAlignments[DIRECTION.Bottom] = [ALIGMENT.Center, ALIGMENT.Left, ALIGMENT.Right], _supportedAlignments);

      if (supportedAlignments[direction].indexOf(this.props.align) > -1) {
        return this.props.align;
      }

      return ALIGMENT.Center;
    };

    Tooltip.prototype.addEventHandlers = function addEventHandlers() {
      window.addEventListener('scroll', this.viewportListener);
      window.addEventListener('resize', this.viewportListener);
    };

    Tooltip.prototype.removeEventHandlers = function removeEventHandlers() {
      window.removeEventListener('scroll', this.viewportListener);
      window.removeEventListener('resize', this.viewportListener);
    };

    Tooltip.prototype.recalculatePosition = function recalculatePosition() {
      var directionsChecked = [];
      var tooltipDirection = this.tooltipDirection(directionsChecked);

      while (!this.calculatePosition(tooltipDirection)) {
        directionsChecked.push(tooltipDirection);
        tooltipDirection = this.tooltipDirection(directionsChecked);
      }
    };

    Tooltip.prototype.tooltipDirection = function tooltipDirection(directionsChecked) {
      var defaultQueue = [DIRECTION.Top, DIRECTION.Bottom, DIRECTION.Left, DIRECTION.Right];
      var propsQueue = this.props.directions;

      var _propsQueue$filter = propsQueue.filter(function (direction) {
        return directionsChecked.indexOf(direction) === -1;
      }),
          propsDirection = _propsQueue$filter[0];

      var _defaultQueue$filter = defaultQueue.filter(function (direction) {
        return directionsChecked.indexOf(direction) === -1;
      }),
          defaultDirection = _defaultQueue$filter[0];

      if (propsDirection) {
        return propsDirection;
      } else if (defaultDirection) {
        return defaultDirection;
      }
      return DIRECTION.Top;
    };

    Tooltip.prototype.tooltipClassNames = function tooltipClassNames() {
      var _classNames;

      return classnames(styles$6.tooltip, (_classNames = {}, _classNames[styles$6.tooltip + '--inline'] = this.props.inline, _classNames), this.props.className);
    };

    Tooltip.prototype.render = function render() {
      return React.createElement(
        'div',
        {
          className: this.tooltipClassNames(),
          ref: this.tooltipRef,
          onMouseEnter: this.onMouseEnter,
          onMouseLeave: this.onMouseLeave
        },
        this.props.children,
        React.createElement(
          TooltipBox,
          {
            contentRef: this.tooltipBoxRef,
            isVisible: this.props.trigger === 'custom' && this.props.isTooltipVisible || this.state.isVisible,
            xPosition: this.state.xPosition,
            yPosition: this.state.yPosition,
            onContentMouseEnter: this.onContentMouseEnter,
            onContentMouseLeave: this.onContentMouseLeave
          },
          this.props.content
        )
      );
    };

    return Tooltip;
  }(React.Component);

  Tooltip.propTypes = {
    children: propTypes_13.isRequired,
    content: propTypes_13.isRequired,
    className: propTypes_6,
    keepContentVisibleOnHover: propTypes_2,
    isTooltipVisible: propTypes_2,
    offset: propTypes_4,
    trigger: propTypes_15(['hover', 'click', 'custom']),
    align: propTypes_15(['top', 'center', 'bottom', 'left', 'right']),
    inline: propTypes_2,
    directions: function directions(props, propName, componentName) {
      var values$$1 = function values$$1(obj) {
        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      };

      var validationError = new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`.\n      Prop should be equal to array with some of values ' + values$$1(DIRECTION).join(', ') + '. Validation failed.');

      if (!Array.isArray(props[propName])) {
        return validationError;
      }

      var check = props[propName].filter(function (v) {
        return values$$1(DIRECTION).some(function (value) {
          return value === v;
        });
      });
      if (check.length !== props[propName].length) {
        return validationError;
      }

      return null;
    }
  };

  Tooltip.defaultProps = {
    className: null,
    keepContentVisibleOnHover: false,
    isTooltipVisible: false,
    offset: 0,
    trigger: 'hover',
    align: 'top',
    inline: false,
    directions: ['bottom']
  };

  function _extends$2() {
    _extends$2 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends$2.apply(this, arguments);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function hasClass(element, className) {
    if (element.classList) return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
  }

  function addClass(element, className) {
    if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
  }

  function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
  }

  function removeClass(element, className) {
    if (element.classList) {
      element.classList.remove(className);
    } else if (typeof element.className === 'string') {
      element.className = replaceClassName(element.className, className);
    } else {
      element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
    }
  }

  var config = {
    disabled: false
  };

  var timeoutsShape = propTypes.oneOfType([propTypes.number, propTypes.shape({
    enter: propTypes.number,
    exit: propTypes.number,
    appear: propTypes.number
  }).isRequired]);
  var classNamesShape = propTypes.oneOfType([propTypes.string, propTypes.shape({
    enter: propTypes.string,
    exit: propTypes.string,
    active: propTypes.string
  }), propTypes.shape({
    enter: propTypes.string,
    enterDone: propTypes.string,
    enterActive: propTypes.string,
    exit: propTypes.string,
    exitDone: propTypes.string,
    exitActive: propTypes.string
  })]);

  var TransitionGroupContext = React__default.createContext(null);

  var UNMOUNTED = 'unmounted';
  var EXITED = 'exited';
  var ENTERING = 'entering';
  var ENTERED = 'entered';
  var EXITING = 'exiting';
  /**
   * The Transition component lets you describe a transition from one component
   * state to another _over time_ with a simple declarative API. Most commonly
   * it's used to animate the mounting and unmounting of a component, but can also
   * be used to describe in-place transition states as well.
   *
   * ---
   *
   * **Note**: `Transition` is a platform-agnostic base component. If you're using
   * transitions in CSS, you'll probably want to use
   * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
   * instead. It inherits all the features of `Transition`, but contains
   * additional features necessary to play nice with CSS transitions (hence the
   * name of the component).
   *
   * ---
   *
   * By default the `Transition` component does not alter the behavior of the
   * component it renders, it only tracks "enter" and "exit" states for the
   * components. It's up to you to give meaning and effect to those states. For
   * example we can add styles to a component when it enters or exits:
   *
   * ```jsx
   * import { Transition } from 'react-transition-group';
   *
   * const duration = 300;
   *
   * const defaultStyle = {
   *   transition: `opacity ${duration}ms ease-in-out`,
   *   opacity: 0,
   * }
   *
   * const transitionStyles = {
   *   entering: { opacity: 1 },
   *   entered:  { opacity: 1 },
   *   exiting:  { opacity: 0 },
   *   exited:  { opacity: 0 },
   * };
   *
   * const Fade = ({ in: inProp }) => (
   *   <Transition in={inProp} timeout={duration}>
   *     {state => (
   *       <div style={{
   *         ...defaultStyle,
   *         ...transitionStyles[state]
   *       }}>
   *         I'm a fade Transition!
   *       </div>
   *     )}
   *   </Transition>
   * );
   * ```
   *
   * There are 4 main states a Transition can be in:
   *  - `'entering'`
   *  - `'entered'`
   *  - `'exiting'`
   *  - `'exited'`
   *
   * Transition state is toggled via the `in` prop. When `true` the component
   * begins the "Enter" stage. During this stage, the component will shift from
   * its current transition state, to `'entering'` for the duration of the
   * transition and then to the `'entered'` stage once it's complete. Let's take
   * the following example (we'll use the
   * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
   *
   * ```jsx
   * function App() {
   *   const [inProp, setInProp] = useState(false);
   *   return (
   *     <div>
   *       <Transition in={inProp} timeout={500}>
   *         {state => (
   *           // ...
   *         )}
   *       </Transition>
   *       <button onClick={() => setInProp(true)}>
   *         Click to Enter
   *       </button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the button is clicked the component will shift to the `'entering'` state
   * and stay there for 500ms (the value of `timeout`) before it finally switches
   * to `'entered'`.
   *
   * When `in` is `false` the same thing happens except the state moves from
   * `'exiting'` to `'exited'`.
   */

  var Transition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Transition, _React$Component);

    function Transition(props, context) {
      var _this;

      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;

      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }

      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }

    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;

      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }

      return null;
    } // getSnapshotBeforeUpdate(prevProps) {
    //   let nextStatus = null
    //   if (prevProps !== this.props) {
    //     const { status } = this.state
    //     if (this.props.in) {
    //       if (status !== ENTERING && status !== ENTERED) {
    //         nextStatus = ENTERING
    //       }
    //     } else {
    //       if (status === ENTERING || status === ENTERED) {
    //         nextStatus = EXITING
    //       }
    //     }
    //   }
    //   return { nextStatus }
    // }
    ;

    var _proto = Transition.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;

      if (prevProps !== this.props) {
        var status = this.state.status;

        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }

      this.updateStatus(false, nextStatus);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };

    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;

      if (timeout != null && typeof timeout !== 'number') {
        exit = timeout.exit;
        enter = timeout.enter; // TODO: remove fallback for next major

        appear = timeout.appear !== undefined ? timeout.appear : enter;
      }

      return {
        exit: exit,
        enter: enter,
        appear: appear
      };
    };

    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }

      if (nextStatus !== null) {
        // nextStatus will always be ENTERING or EXITING.
        this.cancelNextCallback();

        if (nextStatus === ENTERING) {
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };

    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;

      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;

      var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM__default.findDOMNode(this), appearing],
          maybeNode = _ref2[0],
          maybeAppearing = _ref2[1];

      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
      // if we are mounting and running this it means appear _must_ be set

      if (!mounting && !enter || config.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }

      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function () {
        _this2.props.onEntering(maybeNode, maybeAppearing);

        _this2.onTransitionEnd(enterTimeout, function () {
          _this2.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };

    _proto.performExit = function performExit() {
      var _this3 = this;

      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? undefined : ReactDOM__default.findDOMNode(this); // no exit animation skip right to EXITED

      if (!exit || config.disabled) {
        this.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(maybeNode);
        });
        return;
      }

      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function () {
        _this3.props.onExiting(maybeNode);

        _this3.onTransitionEnd(timeouts.exit, function () {
          _this3.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };

    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };

    _proto.safeSetState = function safeSetState(nextState, callback) {
      // This shouldn't be necessary, but there are weird race conditions with
      // setState callbacks and unmounting in testing, so always make sure that
      // we can cancel any pending setState callbacks after we unmount.
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };

    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;

      var active = true;

      this.nextCallback = function (event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };

      this.nextCallback.cancel = function () {
        active = false;
      };

      return this.nextCallback;
    };

    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }

      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
            maybeNode = _ref3[0],
            maybeNextCallback = _ref3[1];

        this.props.addEndListener(maybeNode, maybeNextCallback);
      }

      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };

    _proto.render = function render() {
      var status = this.state.status;

      if (status === UNMOUNTED) {
        return null;
      }

      var _this$props = this.props,
          children = _this$props.children,
          _in = _this$props.in,
          _mountOnEnter = _this$props.mountOnEnter,
          _unmountOnExit = _this$props.unmountOnExit,
          _appear = _this$props.appear,
          _enter = _this$props.enter,
          _exit = _this$props.exit,
          _timeout = _this$props.timeout,
          _addEndListener = _this$props.addEndListener,
          _onEnter = _this$props.onEnter,
          _onEntering = _this$props.onEntering,
          _onEntered = _this$props.onEntered,
          _onExit = _this$props.onExit,
          _onExiting = _this$props.onExiting,
          _onExited = _this$props.onExited,
          _nodeRef = _this$props.nodeRef,
          childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

      return (
        /*#__PURE__*/
        // allows for nested Transitions
        React__default.createElement(TransitionGroupContext.Provider, {
          value: null
        }, typeof children === 'function' ? children(status, childProps) : React__default.cloneElement(React__default.Children.only(children), childProps))
      );
    };

    return Transition;
  }(React__default.Component);

  Transition.contextType = TransitionGroupContext;
  Transition.propTypes = {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: propTypes.shape({
      current: typeof Element === 'undefined' ? propTypes.any : propTypes.instanceOf(Element)
    }),

    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: propTypes.oneOfType([propTypes.func.isRequired, propTypes.element.isRequired]).isRequired,

    /**
     * Show the component; triggers the enter or exit states
     */
    in: propTypes.bool,

    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: propTypes.bool,

    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: propTypes.bool,

    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: propTypes.bool,

    /**
     * Enable or disable enter transitions.
     */
    enter: propTypes.bool,

    /**
     * Enable or disable exit transitions.
     */
    exit: propTypes.bool,

    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener) pt = pt.isRequired;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return pt.apply(void 0, [props].concat(args));
    },

    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: propTypes.func,

    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: propTypes.func,

    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: propTypes.func,

    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: propTypes.func,

    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: propTypes.func,

    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: propTypes.func,

    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: propTypes.func
  }; // Name the function so it is clearer in the documentation

  function noop$2() {}

  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop$2,
    onEntering: noop$2,
    onEntered: noop$2,
    onExit: noop$2,
    onExiting: noop$2,
    onExited: noop$2
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;

  var _addClass = function addClass$$1(node, classes) {
    return node && classes && classes.split(' ').forEach(function (c) {
      return addClass(node, c);
    });
  };

  var removeClass$1 = function removeClass$$1(node, classes) {
    return node && classes && classes.split(' ').forEach(function (c) {
      return removeClass(node, c);
    });
  };
  /**
   * A transition component inspired by the excellent
   * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
   * use it if you're using CSS transitions or animations. It's built upon the
   * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
   * component, so it inherits all of its props.
   *
   * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
   * and `exit` states of the transition. The first class is applied and then a
   * second `*-active` class in order to activate the CSS transition. After the
   * transition, matching `*-done` class names are applied to persist the
   * transition state.
   *
   * ```jsx
   * function App() {
   *   const [inProp, setInProp] = useState(false);
   *   return (
   *     <div>
   *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
   *         <div>
   *           {"I'll receive my-node-* classes"}
   *         </div>
   *       </CSSTransition>
   *       <button type="button" onClick={() => setInProp(true)}>
   *         Click to Enter
   *       </button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the `in` prop is set to `true`, the child component will first receive
   * the class `example-enter`, then the `example-enter-active` will be added in
   * the next tick. `CSSTransition` [forces a
   * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
   * between before adding the `example-enter-active`. This is an important trick
   * because it allows us to transition between `example-enter` and
   * `example-enter-active` even though they were added immediately one after
   * another. Most notably, this is what makes it possible for us to animate
   * _appearance_.
   *
   * ```css
   * .my-node-enter {
   *   opacity: 0;
   * }
   * .my-node-enter-active {
   *   opacity: 1;
   *   transition: opacity 200ms;
   * }
   * .my-node-exit {
   *   opacity: 1;
   * }
   * .my-node-exit-active {
   *   opacity: 0;
   *   transition: opacity 200ms;
   * }
   * ```
   *
   * `*-active` classes represent which styles you want to animate **to**, so it's
   * important to add `transition` declaration only to them, otherwise transitions
   * might not behave as intended! This might not be obvious when the transitions
   * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
   * the example above (minus `transition`), but it becomes apparent in more
   * complex transitions.
   *
   * **Note**: If you're using the
   * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
   * prop, make sure to define styles for `.appear-*` classes as well.
   */


  var CSSTransition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(CSSTransition, _React$Component);

    function CSSTransition() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.appliedClasses = {
        appear: {},
        enter: {},
        exit: {}
      };

      _this.onEnter = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
            node = _this$resolveArgument[0],
            appearing = _this$resolveArgument[1];

        _this.removeClasses(node, 'exit');

        _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

        if (_this.props.onEnter) {
          _this.props.onEnter(maybeNode, maybeAppearing);
        }
      };

      _this.onEntering = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
            node = _this$resolveArgument2[0],
            appearing = _this$resolveArgument2[1];

        var type = appearing ? 'appear' : 'enter';

        _this.addClass(node, type, 'active');

        if (_this.props.onEntering) {
          _this.props.onEntering(maybeNode, maybeAppearing);
        }
      };

      _this.onEntered = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
            node = _this$resolveArgument3[0],
            appearing = _this$resolveArgument3[1];

        var type = appearing ? 'appear' : 'enter';

        _this.removeClasses(node, type);

        _this.addClass(node, type, 'done');

        if (_this.props.onEntered) {
          _this.props.onEntered(maybeNode, maybeAppearing);
        }
      };

      _this.onExit = function (maybeNode) {
        var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
            node = _this$resolveArgument4[0];

        _this.removeClasses(node, 'appear');

        _this.removeClasses(node, 'enter');

        _this.addClass(node, 'exit', 'base');

        if (_this.props.onExit) {
          _this.props.onExit(maybeNode);
        }
      };

      _this.onExiting = function (maybeNode) {
        var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
            node = _this$resolveArgument5[0];

        _this.addClass(node, 'exit', 'active');

        if (_this.props.onExiting) {
          _this.props.onExiting(maybeNode);
        }
      };

      _this.onExited = function (maybeNode) {
        var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
            node = _this$resolveArgument6[0];

        _this.removeClasses(node, 'exit');

        _this.addClass(node, 'exit', 'done');

        if (_this.props.onExited) {
          _this.props.onExited(maybeNode);
        }
      };

      _this.resolveArguments = function (maybeNode, maybeAppearing) {
        return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
        : [maybeNode, maybeAppearing];
      };

      _this.getClassNames = function (type) {
        var classNames = _this.props.classNames;
        var isStringClassNames = typeof classNames === 'string';
        var prefix = isStringClassNames && classNames ? classNames + "-" : '';
        var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
        var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
        var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
        return {
          baseClassName: baseClassName,
          activeClassName: activeClassName,
          doneClassName: doneClassName
        };
      };

      return _this;
    }

    var _proto = CSSTransition.prototype;

    _proto.addClass = function addClass$$1(node, type, phase) {
      var className = this.getClassNames(type)[phase + "ClassName"];

      var _this$getClassNames = this.getClassNames('enter'),
          doneClassName = _this$getClassNames.doneClassName;

      if (type === 'appear' && phase === 'done' && doneClassName) {
        className += " " + doneClassName;
      } // This is for to force a repaint,
      // which is necessary in order to transition styles when adding a class name.


      if (phase === 'active') {
        /* eslint-disable no-unused-expressions */
        node && node.scrollTop;
      }

      if (className) {
        this.appliedClasses[type][phase] = className;

        _addClass(node, className);
      }
    };

    _proto.removeClasses = function removeClasses(node, type) {
      var _this$appliedClasses$ = this.appliedClasses[type],
          baseClassName = _this$appliedClasses$.base,
          activeClassName = _this$appliedClasses$.active,
          doneClassName = _this$appliedClasses$.done;
      this.appliedClasses[type] = {};

      if (baseClassName) {
        removeClass$1(node, baseClassName);
      }

      if (activeClassName) {
        removeClass$1(node, activeClassName);
      }

      if (doneClassName) {
        removeClass$1(node, doneClassName);
      }
    };

    _proto.render = function render() {
      var _this$props = this.props,
          _ = _this$props.classNames,
          props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);

      return /*#__PURE__*/React__default.createElement(Transition, _extends$2({}, props, {
        onEnter: this.onEnter,
        onEntered: this.onEntered,
        onEntering: this.onEntering,
        onExit: this.onExit,
        onExiting: this.onExiting,
        onExited: this.onExited
      }));
    };

    return CSSTransition;
  }(React__default.Component);

  CSSTransition.defaultProps = {
    classNames: ''
  };
  CSSTransition.propTypes = _extends$2({}, Transition.propTypes, {
    /**
     * The animation classNames applied to the component as it appears, enters,
     * exits or has finished the transition. A single name can be provided, which
     * will be suffixed for each stage, e.g. `classNames="fade"` applies:
     *
     * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
     * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
     * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
     *
     * A few details to note about how these classes are applied:
     *
     * 1. They are _joined_ with the ones that are already defined on the child
     *    component, so if you want to add some base styles, you can use
     *    `className` without worrying that it will be overridden.
     *
     * 2. If the transition component mounts with `in={false}`, no classes are
     *    applied yet. You might be expecting `*-exit-done`, but if you think
     *    about it, a component cannot finish exiting if it hasn't entered yet.
     *
     * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
     *    allows you to define different behavior for when appearing is done and
     *    when regular entering is done, using selectors like
     *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
     *    an epic entrance animation when element first appears in the DOM using
     *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
     *    simply use `fade-enter-done` for defining both cases.
     *
     * Each individual classNames can also be specified independently like:
     *
     * ```js
     * classNames={{
     *  appear: 'my-appear',
     *  appearActive: 'my-active-appear',
     *  appearDone: 'my-done-appear',
     *  enter: 'my-enter',
     *  enterActive: 'my-active-enter',
     *  enterDone: 'my-done-enter',
     *  exit: 'my-exit',
     *  exitActive: 'my-active-exit',
     *  exitDone: 'my-done-exit',
     * }}
     * ```
     *
     * If you want to set these classes using CSS Modules:
     *
     * ```js
     * import styles from './styles.css';
     * ```
     *
     * you might want to use camelCase in your CSS file, that way could simply
     * spread them instead of listing them one by one:
     *
     * ```js
     * classNames={{ ...styles }}
     * ```
     *
     * @type {string | {
     *  appear?: string,
     *  appearActive?: string,
     *  appearDone?: string,
     *  enter?: string,
     *  enterActive?: string,
     *  enterDone?: string,
     *  exit?: string,
     *  exitActive?: string,
     *  exitDone?: string,
     * }}
     */
    classNames: classNamesShape,

    /**
     * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEnter: propTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'enter-active' or
     * 'appear-active' class is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: propTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'enter' or
     * 'appear' classes are **removed** and the `done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntered: propTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'exit' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExit: propTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExiting: propTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'exit' classes
     * are **removed** and the `exit-done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExited: propTypes.func
  });

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  /**
   * Given `this.props.children`, return an object mapping key to child.
   *
   * @param {*} children `this.props.children`
   * @return {object} Mapping of key to child
   */

  function getChildMapping(children, mapFn) {
    var mapper = function mapper(child) {
      return mapFn && React.isValidElement(child) ? mapFn(child) : child;
    };

    var result = Object.create(null);
    if (children) React.Children.map(children, function (c) {
      return c;
    }).forEach(function (child) {
      // run the map function here instead so that the key is the computed one
      result[child.key] = mapper(child);
    });
    return result;
  }
  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */

  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
      return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list


    var nextKeysPending = Object.create(null);
    var pendingKeys = [];

    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }

    var i;
    var childMapping = {};

    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }

      childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`


    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }

    return childMapping;
  }

  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }

  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function (child) {
      return React.cloneElement(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, 'appear', props),
        enter: getProp(child, 'enter', props),
        exit: getProp(child, 'exit', props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function (key) {
      var child = children[key];
      if (!React.isValidElement(child)) return;
      var hasPrev = (key in prevChildMapping);
      var hasNext = (key in nextChildMapping);
      var prevChild = prevChildMapping[key];
      var isLeaving = React.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

      if (hasNext && (!hasPrev || isLeaving)) {
        // console.log('entering', key)
        children[key] = React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        // item is old (exiting)
        // console.log('leaving', key)
        children[key] = React.cloneElement(child, {
          in: false
        });
      } else if (hasNext && hasPrev && React.isValidElement(prevChild)) {
        // item hasn't changed transition states
        // copy over the last transition props;
        // console.log('unchanged', key)
        children[key] = React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      }
    });
    return children;
  }

  var values$1 = Object.values || function (obj) {
    return Object.keys(obj).map(function (k) {
      return obj[k];
    });
  };

  var defaultProps = {
    component: 'div',
    childFactory: function childFactory(child) {
      return child;
    }
  };
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

  var TransitionGroup = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(TransitionGroup, _React$Component);

    function TransitionGroup(props, context) {
      var _this;

      _this = _React$Component.call(this, props, context) || this;

      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited: handleExited,
        firstRender: true
      };
      return _this;
    }

    var _proto = TransitionGroup.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };

    TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children,
          handleExited = _ref.handleExited,
          firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    } // node is `undefined` when user provided `nodeRef` prop
    ;

    _proto.handleExited = function handleExited(child, node) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping) return;

      if (child.props.onExited) {
        child.props.onExited(node);
      }

      if (this.mounted) {
        this.setState(function (state) {
          var children = _extends$2({}, state.children);

          delete children[child.key];
          return {
            children: children
          };
        });
      }
    };

    _proto.render = function render() {
      var _this$props = this.props,
          Component = _this$props.component,
          childFactory = _this$props.childFactory,
          props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

      var contextValue = this.state.contextValue;
      var children = values$1(this.state.children).map(childFactory);
      delete props.appear;
      delete props.enter;
      delete props.exit;

      if (Component === null) {
        return /*#__PURE__*/React__default.createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, children);
      }

      return /*#__PURE__*/React__default.createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, /*#__PURE__*/React__default.createElement(Component, props, children));
    };

    return TransitionGroup;
  }(React__default.Component);

  TransitionGroup.propTypes = {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: propTypes.any,

    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: propTypes.node,

    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: propTypes.bool,

    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: propTypes.bool,

    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: propTypes.bool,

    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: propTypes.func
  };
  TransitionGroup.defaultProps = defaultProps;

  /**
   * The `<ReplaceTransition>` component is a specialized `Transition` component
   * that animates between two children.
   *
   * ```jsx
   * <ReplaceTransition in>
   *   <Fade><div>I appear first</div></Fade>
   *   <Fade><div>I replace the above</div></Fade>
   * </ReplaceTransition>
   * ```
   */

  var ReplaceTransition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(ReplaceTransition, _React$Component);

    function ReplaceTransition() {
      var _this;

      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

      _this.handleEnter = function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return _this.handleLifecycle('onEnter', 0, args);
      };

      _this.handleEntering = function () {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return _this.handleLifecycle('onEntering', 0, args);
      };

      _this.handleEntered = function () {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        return _this.handleLifecycle('onEntered', 0, args);
      };

      _this.handleExit = function () {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        return _this.handleLifecycle('onExit', 1, args);
      };

      _this.handleExiting = function () {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        return _this.handleLifecycle('onExiting', 1, args);
      };

      _this.handleExited = function () {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        return _this.handleLifecycle('onExited', 1, args);
      };

      return _this;
    }

    var _proto = ReplaceTransition.prototype;

    _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
      var _child$props;

      var children = this.props.children;
      var child = React__default.Children.toArray(children)[idx];
      if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);

      if (this.props[handler]) {
        var maybeNode = child.props.nodeRef ? undefined : ReactDOM__default.findDOMNode(this);
        this.props[handler](maybeNode);
      }
    };

    _proto.render = function render() {
      var _this$props = this.props,
          children = _this$props.children,
          inProp = _this$props.in,
          props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

      var _React$Children$toArr = React__default.Children.toArray(children),
          first = _React$Children$toArr[0],
          second = _React$Children$toArr[1];

      delete props.onEnter;
      delete props.onEntering;
      delete props.onEntered;
      delete props.onExit;
      delete props.onExiting;
      delete props.onExited;
      return /*#__PURE__*/React__default.createElement(TransitionGroup, props, inProp ? React__default.cloneElement(first, {
        key: 'first',
        onEnter: this.handleEnter,
        onEntering: this.handleEntering,
        onEntered: this.handleEntered
      }) : React__default.cloneElement(second, {
        key: 'second',
        onEnter: this.handleExit,
        onEntering: this.handleExiting,
        onEntered: this.handleExited
      }));
    };

    return ReplaceTransition;
  }(React__default.Component);

  ReplaceTransition.propTypes = {
    in: propTypes.bool.isRequired,
    children: function children(props, propName) {
      if (React__default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
      return null;
    }
  };

  var _leaveRenders, _enterRenders;

  function areChildrenDifferent(oldChildren, newChildren) {
    if (oldChildren === newChildren) return false;

    if (React__default.isValidElement(oldChildren) && React__default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
      return false;
    }

    return true;
  }
  /**
   * Enum of modes for SwitchTransition component
   * @enum { string }
   */


  var modes = {
    out: 'out-in',
    in: 'in-out'
  };

  var callHook = function callHook(element, name, cb) {
    return function () {
      var _element$props;

      element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
      cb();
    };
  };

  var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function (_ref) {
    var current = _ref.current,
        changeState = _ref.changeState;
    return React__default.cloneElement(current, {
      in: false,
      onExited: callHook(current, 'onExited', function () {
        changeState(ENTERING, null);
      })
    });
  }, _leaveRenders[modes.in] = function (_ref2) {
    var current = _ref2.current,
        changeState = _ref2.changeState,
        children = _ref2.children;
    return [current, React__default.cloneElement(children, {
      in: true,
      onEntered: callHook(children, 'onEntered', function () {
        changeState(ENTERING);
      })
    })];
  }, _leaveRenders);
  var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function (_ref3) {
    var children = _ref3.children,
        changeState = _ref3.changeState;
    return React__default.cloneElement(children, {
      in: true,
      onEntered: callHook(children, 'onEntered', function () {
        changeState(ENTERED, React__default.cloneElement(children, {
          in: true
        }));
      })
    });
  }, _enterRenders[modes.in] = function (_ref4) {
    var current = _ref4.current,
        children = _ref4.children,
        changeState = _ref4.changeState;
    return [React__default.cloneElement(current, {
      in: false,
      onExited: callHook(current, 'onExited', function () {
        changeState(ENTERED, React__default.cloneElement(children, {
          in: true
        }));
      })
    }), React__default.cloneElement(children, {
      in: true
    })];
  }, _enterRenders);
  /**
   * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).
   * You can use it when you want to control the render between state transitions.
   * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.
   *
   * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.
   * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child.
   *
   * **Note**: If you want the animation to happen simultaneously
   * (that is, to have the old child removed and a new child inserted **at the same time**),
   * you should use
   * [`TransitionGroup`](https://reactcommunity.org/react-transition-group/transition-group)
   * instead.
   *
   * ```jsx
   * function App() {
   *  const [state, setState] = useState(false);
   *  return (
   *    <SwitchTransition>
   *      <CSSTransition
   *        key={state ? "Goodbye, world!" : "Hello, world!"}
   *        addEndListener={(node, done) => node.addEventListener("transitionend", done, false)}
   *        classNames='fade'
   *      >
   *        <button onClick={() => setState(state => !state)}>
   *          {state ? "Goodbye, world!" : "Hello, world!"}
   *        </button>
   *      </CSSTransition>
   *    </SwitchTransition>
   *  );
   * }
   * ```
   *
   * ```css
   * .fade-enter{
   *    opacity: 0;
   * }
   * .fade-exit{
   *    opacity: 1;
   * }
   * .fade-enter-active{
   *    opacity: 1;
   * }
   * .fade-exit-active{
   *    opacity: 0;
   * }
   * .fade-enter-active,
   * .fade-exit-active{
   *    transition: opacity 500ms;
   * }
   * ```
   */

  var SwitchTransition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(SwitchTransition, _React$Component);

    function SwitchTransition() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.state = {
        status: ENTERED,
        current: null
      };
      _this.appeared = false;

      _this.changeState = function (status, current) {
        if (current === void 0) {
          current = _this.state.current;
        }

        _this.setState({
          status: status,
          current: current
        });
      };

      return _this;
    }

    var _proto = SwitchTransition.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.appeared = true;
    };

    SwitchTransition.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      if (props.children == null) {
        return {
          current: null
        };
      }

      if (state.status === ENTERING && props.mode === modes.in) {
        return {
          status: ENTERING
        };
      }

      if (state.current && areChildrenDifferent(state.current, props.children)) {
        return {
          status: EXITING
        };
      }

      return {
        current: React__default.cloneElement(props.children, {
          in: true
        })
      };
    };

    _proto.render = function render() {
      var _this$props = this.props,
          children = _this$props.children,
          mode = _this$props.mode,
          _this$state = this.state,
          status = _this$state.status,
          current = _this$state.current;
      var data = {
        children: children,
        current: current,
        changeState: this.changeState,
        status: status
      };
      var component;

      switch (status) {
        case ENTERING:
          component = enterRenders[mode](data);
          break;

        case EXITING:
          component = leaveRenders[mode](data);
          break;

        case ENTERED:
          component = current;
      }

      return /*#__PURE__*/React__default.createElement(TransitionGroupContext.Provider, {
        value: {
          isMounting: !this.appeared
        }
      }, component);
    };

    return SwitchTransition;
  }(React__default.Component);

  SwitchTransition.propTypes = {
    /**
     * Transition modes.
     * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
     * `in-out`: New element transitions in first, then when complete, the current element transitions out.
     *
     * @type {'out-in'|'in-out'}
     */
    mode: propTypes.oneOf([modes.in, modes.out]),

    /**
     * Any `Transition` or `CSSTransition` component.
     */
    children: propTypes.oneOfType([propTypes.element.isRequired])
  };
  SwitchTransition.defaultProps = {
    mode: modes.out
  };

  var HORIZONTAL_POSITION = ['left', 'center', 'right'];

  var VERTICAL_POSITION = ['top', 'bottom'];

  var ANIMATION_TIME = 200;

  var INFO = 'info';
  var SUCCESS = 'success';
  var WARNING = 'warning';
  var ERROR = 'error';
  var NOTIFICATION = 'notification';

  var VARIANTS = [SUCCESS, WARNING, ERROR, INFO, NOTIFICATION];

  var styles$7 = { "toast": "lc-toast", "toast__content": "lc-toast__content", "toast__close": "lc-toast__close", "toast__icon": "lc-toast__icon", "toast__actions": "lc-toast__actions", "toast__actions-close": "lc-toast__actions-close", "toast__actions-custom": "lc-toast__actions-custom", "toast--success": "lc-toast--success", "toast--warning": "lc-toast--warning", "toast--error": "lc-toast--error", "toast--info": "lc-toast--info", "toast-wrapper": "lc-toast-wrapper", "toast-wrapper--fixed": "lc-toast-wrapper--fixed", "toast-wrapper--block": "lc-toast-wrapper--block", "toast-wrapper--horizontal-center": "lc-toast-wrapper--horizontal-center", "toast-wrapper--horizontal-left": "lc-toast-wrapper--horizontal-left", "toast-wrapper--horizontal-right": "lc-toast-wrapper--horizontal-right", "toast-wrapper--vertical-top": "lc-toast-wrapper--vertical-top", "toast-appear--slide": "lc-toast-appear--slide", "toast-appear-active--slide": "lc-toast-appear-active--slide", "toast-exit--slide": "lc-toast-exit--slide", "toast-exit-active--slide": "lc-toast-exit-active--slide", "toast-wrapper--vertical-bottom": "lc-toast-wrapper--vertical-bottom", "toast-appear--fade": "lc-toast-appear--fade", "toast-appear-active--fade": "lc-toast-appear-active--fade", "toast-exit--fade": "lc-toast-exit--fade", "toast-exit-active--fade": "lc-toast-exit-active--fade" };

  var AlertCircleIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var AlertCircleIcon = function AlertCircleIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-alert-circle-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M13 13h-2V7h2m0 10h-2v-2h2M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z" })
    );
  };

  exports.default = AlertCircleIcon;
  });

  var AlertCircleIcon = unwrapExports(AlertCircleIcon_1);

  var InformationIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var InformationIcon = function InformationIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-information-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M13 9h-2V7h2m0 10h-2v-6h2m-1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z" })
    );
  };

  exports.default = InformationIcon;
  });

  var InformationIcon = unwrapExports(InformationIcon_1);

  var ToastIcon = function ToastIcon(_ref) {
    var variant = _ref.variant;

    switch (variant) {
      case SUCCESS:
        return React.createElement(CheckCircleIcon, null);
      case WARNING:
        return React.createElement(AlertIcon, null);
      case ERROR:
        return React.createElement(AlertCircleIcon, null);
      default:
        return React.createElement(InformationIcon, null);
    }
  };

  ToastIcon.propTypes = {
    variant: propTypes_6
  };

  var callAll = function callAll() {
    for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }

    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return fns.forEach(function (fn) {
        return fn && fn.apply(undefined, args);
      });
    };
  };

  var cx$9 = bind.bind(styles$7);

  var Toast = function Toast(props) {
    var _cx;

    var children = props.children,
        className = props.className,
        variant = props.variant,
        onClose = props.onClose,
        action = props.action,
        removable = props.removable,
        id = props.id,
        restProps = objectWithoutProperties(props, ['children', 'className', 'variant', 'onClose', 'action', 'removable', 'id']);


    var mergedClassNames = getMergedClassNames(cx$9((_cx = {
      toast: true
    }, _cx['toast--' + variant] = VARIANTS.some(function (option) {
      return option === variant;
    }), _cx)), className);

    var onActionClick = function onActionClick(actionProp) {
      if (actionProp && actionProp.closeOnClick && onClose) {
        return callAll(actionProp.handler, onClose);
      }
      return action.handler;
    };

    return React.createElement(
      'div',
      _extends({}, restProps, { className: mergedClassNames, id: id }),
      React.createElement(
        'div',
        { className: styles$7.toast__icon },
        React.createElement(ToastIcon, { variant: variant })
      ),
      React.createElement(
        'div',
        { className: styles$7.toast__content },
        children
      ),
      (action || removable) && React.createElement(
        'div',
        { className: styles$7.toast__actions },
        action && action.label && action.handler && React.createElement(
          'button',
          {
            className: styles$7['toast__actions-custom'],
            onClick: onActionClick(action)
          },
          action.label
        ),
        removable && React.createElement(
          'div',
          {
            className: styles$7['toast__actions-close'],
            'aria-label': 'Close toast',
            onClick: onClose
          },
          React.createElement(CloseIcon, null)
        )
      )
    );
  };

  Toast.propTypes = {
    children: propTypes_13.isRequired,
    variant: propTypes_15(VARIANTS),
    onClose: propTypes_3,
    removable: propTypes_2,
    action: propTypes_17({
      handler: propTypes_3.isRequired,
      label: propTypes_6.isRequired,
      closeOnClick: propTypes_2
    })
  };

  var cx$a = bind.bind(styles$7);

  var ToastWrapper = function ToastWrapper(props) {
    var verticalPosition = props.verticalPosition,
        horizontalPosition = props.horizontalPosition,
        fixed = props.fixed,
        block = props.block,
        toasts = props.toasts,
        animationType = props.animationType,
        className = props.className,
        restProps = objectWithoutProperties(props, ['verticalPosition', 'horizontalPosition', 'fixed', 'block', 'toasts', 'animationType', 'className']);


    var baseClass = 'toast-wrapper';

    var getWrapperClassNames = function getWrapperClassNames() {
      var _cx;

      var wrapperClassNames = cx$a((_cx = {}, _cx[baseClass] = true, _cx[baseClass + '--fixed'] = fixed, _cx[baseClass + '--block'] = !fixed && block, _cx[baseClass + '--horizontal-' + horizontalPosition] = HORIZONTAL_POSITION.some(function (s) {
        return s === horizontalPosition;
      }), _cx[baseClass + '--vertical-' + verticalPosition] = VERTICAL_POSITION.some(function (s) {
        return s === verticalPosition;
      }), _cx[className] = className, _cx));

      return wrapperClassNames;
    };

    return React.createElement(
      'div',
      _extends({}, restProps, { className: getWrapperClassNames() }),
      React.createElement(
        TransitionGroup,
        { component: null },
        toasts.map(function (_ref) {
          var id = _ref.id,
              variant = _ref.variant,
              content = _ref.content,
              onClose = _ref.onClose,
              removable = _ref.removable,
              action = _ref.action;
          return React.createElement(
            CSSTransition,
            {
              key: id,
              classNames: {
                enter: 'lc-toast-appear--' + animationType,
                enterActive: 'lc-toast-appear-active--' + animationType,
                exit: 'lc-toast-exit--' + animationType,
                exitActive: 'lc-toast-exit-active--' + animationType
              },
              timeout: ANIMATION_TIME
            },
            React.createElement(
              Toast,
              {
                variant: variant,
                onClose: onClose,
                removable: removable,
                action: action,
                className: styles$7.toast__single
              },
              content
            )
          );
        })
      )
    );
  };

  ToastWrapper.propTypes = {
    className: propTypes_6,
    toasts: propTypes_9(propTypes_17({
      id: propTypes_16([propTypes_4, propTypes_6]),
      content: propTypes_13,
      variant: propTypes_15(VARIANTS),
      autoHideDelayTime: propTypes_4,
      removable: propTypes_2
    })),
    fixed: propTypes_2,
    block: propTypes_2,
    animationType: propTypes_6,
    verticalPosition: propTypes_6,
    horizontalPosition: propTypes_6
  };

  ToastWrapper.defaultProps = {
    toasts: [],
    fixed: true,
    block: false,
    animationType: 'slide',
    verticalPosition: 'top',
    horizontalPosition: 'center'
  };

  var generateNotificationUniqueId = function generateNotificationUniqueId(notifications) {
    return generateUniqueId(notifications);
  };

  var NotificationContext = React.createContext({});

  var NotificationQueueManager = function () {
    function NotificationQueueManager(itemsLimit, queueLimit) {
      classCallCheck(this, NotificationQueueManager);

      this.queue = [];
      this.queueLimit = queueLimit;
      this.itemsLimit = itemsLimit;
    }

    NotificationQueueManager.prototype.shouldAddToQueue = function shouldAddToQueue(currentItems) {
      if (currentItems.length >= this.itemsLimit && this.queue.length <= this.queueLimit) {
        return true;
      }
      return false;
    };

    NotificationQueueManager.prototype.shouldPickFromQueue = function shouldPickFromQueue(currentItems) {
      return this.itemsLimit && this.queue.length > 0 && currentItems.length < this.itemsLimit;
    };

    NotificationQueueManager.prototype.addToQueue = function addToQueue(toast) {
      this.queue = [].concat(this.queue, [toast]);
      return toast.id;
    };

    NotificationQueueManager.prototype.pickFromQueue = function pickFromQueue() {
      var _queue = this.queue,
          picked = _queue[0],
          restQueued = _queue.slice(1);

      this.queue = restQueued;

      return picked;
    };

    NotificationQueueManager.prototype.clearQueue = function clearQueue() {
      this.queue = [];
    };

    return NotificationQueueManager;
  }();

  var initialState = {
    notifications: {}
  };

  var NotificationProvider = function (_React$Component) {
    inherits(NotificationProvider, _React$Component);

    function NotificationProvider(props) {
      classCallCheck(this, NotificationProvider);

      var _this = possibleConstructorReturn(this, _React$Component.call(this, props));

      _this.setRemoveDelay = function (notification) {
        if (notification.autoHideDelayTime) {
          _this.timeouts[notification.id] = setTimeout(function () {
            _this.remove(notification.id);
          }, notification.autoHideDelayTime);
        }
      };

      _this.add = function (opts) {
        var _babelHelpers$extends;

        var defaults$$1 = {
          type: 'toast',
          autoHideDelayTime: null,
          payload: {}
        };

        var notifications = _this.state.notifications;


        var notificationId = generateNotificationUniqueId(notifications);

        var notification = _extends({}, defaults$$1, opts, {
          id: notificationId
        });

        if (_this.queueManager && _this.queueManager.shouldAddToQueue(Object.keys(notifications))) {
          return _this.queueManager.addToQueue(notification);
        }

        if (Object.keys(notifications).length >= _this.props.itemsLimit) {
          return null;
        }

        _this.setState({
          notifications: _extends({}, notifications, (_babelHelpers$extends = {}, _babelHelpers$extends[notificationId] = _extends({}, notification), _babelHelpers$extends))
        }, function () {
          return _this.setRemoveDelay(notification);
        });
        return notificationId;
      };

      _this.remove = function (notificationId) {
        var _this$state$notificat = _this.state.notifications,
            removedNotification = _this$state$notificat[notificationId],
            restNotifications = objectWithoutProperties(_this$state$notificat, [notificationId]);


        var newState = { notifications: _extends({}, restNotifications) };
        var notificationFromQueue = void 0;

        if (_this.queueManager && _this.queueManager.shouldPickFromQueue(Object.keys(restNotifications))) {
          var _babelHelpers$extends2;

          notificationFromQueue = _this.queueManager.pickFromQueue();
          newState = {
            notifications: _extends({}, restNotifications, (_babelHelpers$extends2 = {}, _babelHelpers$extends2[notificationFromQueue.id] = notificationFromQueue, _babelHelpers$extends2))
          };
        }

        _this.clearDelayTimeout(notificationId);

        if (!notificationFromQueue) {
          _this.setState(newState);
          return null;
        }

        _this.setState(newState, function () {
          return _this.setRemoveDelay(notificationFromQueue);
        });
        return notificationFromQueue.id;
      };

      _this.removeAll = function () {
        var notificationsIds = Object.keys(_this.state.notifications);
        _this.setState(initialState);
        if (_this.queueManager) {
          _this.queueManager.clearQueue();
        }
        return notificationsIds;
      };

      _this.clearDelayTimeout = function (id) {
        var _this$timeouts = _this.timeouts,
            timeoutToClear = _this$timeouts[id],
            restTimeouts = objectWithoutProperties(_this$timeouts, [id]);

        clearTimeout(timeoutToClear);
        _this.timeouts = restTimeouts;
      };

      _this.state = initialState;
      _this.timeouts = {};
      if (props.queueLimit) {
        _this.queueManager = new NotificationQueueManager(props.itemsLimit, props.queueLimit);
      }
      return _this;
    }

    NotificationProvider.prototype.componentWillUnmount = function componentWillUnmount() {
      var _this2 = this;

      Object.keys(this.timeouts).forEach(function (t) {
        return clearTimeout(_this2.timeouts[t]);
      });
    };

    NotificationProvider.prototype.render = function render() {
      var notifications = this.state.notifications;


      return React.createElement(
        NotificationContext.Provider,
        {
          value: {
            add: this.add,
            remove: this.remove,
            removeAll: this.removeAll,
            notifications: Object.keys(notifications).map(function (id) {
              return _extends({}, notifications[id]);
            })
          }
        },
        this.props.children
      );
    };

    return NotificationProvider;
  }(React.Component);

  NotificationProvider.propTypes = {
    children: propTypes_13,
    itemsLimit: propTypes_4,
    queueLimit: propTypes_4
  };

  NotificationProvider.defaultProps = {
    itemsLimit: 1
  };

  var ToastConsumer = function (_React$Component) {
    inherits(ToastConsumer, _React$Component);

    function ToastConsumer() {
      var _temp, _this, _ret;

      classCallCheck(this, ToastConsumer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.validateToast = function (_ref) {
        var payload = _ref.payload;

        if (!VARIANTS.some(function (v) {
          return v === payload.variant;
        })) {
          return false;
        }

        if ((_this.props.name || payload.consumerName) && _this.props.name !== payload.consumerName) {
          return false;
        }

        if (_this.props.verticalPosition !== payload.verticalPosition || _this.props.horizontalPosition !== payload.horizontalPosition) {
          return false;
        }

        return true;
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    ToastConsumer.prototype.render = function render() {
      var _this2 = this;

      var _props = this.props,
          verticalPosition = _props.verticalPosition,
          horizontalPosition = _props.horizontalPosition,
          fixed = _props.fixed,
          name = _props.name,
          animationType = _props.animationType,
          restProps = objectWithoutProperties(_props, ['verticalPosition', 'horizontalPosition', 'fixed', 'name', 'animationType']);


      return React.createElement(
        NotificationContext.Consumer,
        null,
        function (notificationSystem) {
          return React.createElement(ToastWrapper, _extends({}, restProps, {
            fixed: fixed,
            verticalPosition: verticalPosition,
            horizontalPosition: horizontalPosition,
            animationType: animationType,
            toasts: notificationSystem.notifications.filter(_this2.validateToast).map(function (el) {
              return {
                content: el.payload.content,
                variant: el.payload.variant,
                id: el.id,
                removable: el.payload.removable,
                onClose: callAll(el.payload.onClose, function () {
                  return notificationSystem.remove(el.id);
                }),
                action: el.payload.action
              };
            })
          }));
        }
      );
    };

    return ToastConsumer;
  }(React.Component);

  ToastConsumer.propTypes = {
    /**
     * fixed position of toasts
     */
    name: propTypes_6,
    fixed: propTypes_2,
    animationType: propTypes_6,
    verticalPosition: propTypes_6.isRequired,
    horizontalPosition: propTypes_6.isRequired
  };

  ToastConsumer.defaultProps = {
    animationType: 'slide',
    fixed: true
  };

  var notificationConnect = function notificationConnect(Component) {
    return function ComponentWithNotifications(props) {
      return React.createElement(
        NotificationContext.Consumer,
        null,
        function (_ref) {
          var add = _ref.add,
              remove = _ref.remove,
              removeAll = _ref.removeAll;
          return React.createElement(Component, _extends({}, props, {
            notificationSystem: { add: add, remove: remove, removeAll: removeAll }
          }));
        }
      );
    };
  };

  var styles$8 = { "modal-base": "lc-modal-base", "modal-base__overlay": "lc-modal-base__overlay", "modal-base__close": "lc-modal-base__close", "modal-base__overlay--visible": "lc-modal-base__overlay--visible", "modal__header": "lc-modal__header", "modal__heading": "lc-modal__heading", "modal__body": "lc-modal__body", "modal__footer": "lc-modal__footer", "action-modal": "lc-action-modal", "action-modal__heading": "lc-action-modal__heading", "action-modal__content": "lc-action-modal__content", "action-modal__actions": "lc-action-modal__actions", "action-modal__icon": "lc-action-modal__icon" };

  var KeyCodes = {
    enter: 13,
    arrowUp: 38,
    arrowDown: 40,
    esc: 27,
    space: 32,
    backspace: 8
  };

  var KeyNames = {
    enter: 'Enter',
    arrowUp: 'ArrowUp',
    arrowDown: 'ArrowDown',
    esc: 'Escape',
    space: ' '
  };

  var baseClass$7 = 'modal-base__close';

  var ModalCloseButton = function ModalCloseButton(props) {
    return React.createElement(
      'button',
      {
        title: 'Close modal',
        className: styles$8['' + baseClass$7],
        onClick: props.onClick,
        type: 'button'
      },
      React.createElement(CloseIcon, { width: '24px', height: '24px', fill: '#424D57' })
    );
  };

  ModalCloseButton.propTypes = {
    onClick: propTypes_3
  };

  var baseClass$8 = 'modal-base';

  var cx$b = bind.bind(styles$8);

  var ModalBase = function (_React$Component) {
    inherits(ModalBase, _React$Component);

    function ModalBase() {
      var _temp, _this, _ret;

      classCallCheck(this, ModalBase);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onOverlayClick = function (event) {
        if (event.target === event.currentTarget) {
          _this.handleCloseModal();
        }
      }, _this.onCloseButtonClick = function (event) {
        event.preventDefault();
        event.stopPropagation();
        _this.handleCloseModal();
      }, _this.onKeyUp = function (event) {
        if (event.keyCode === KeyCodes.esc) {
          _this.handleCloseModal();
        }
      }, _this.addEventListeners = function () {
        if (_this.props.closeOnEscPress) {
          document.addEventListener('keyup', _this.onKeyUp, true);
        }
      }, _this.removeEventListeners = function () {
        document.removeEventListener('keyup', _this.onKeyUp, true);
      }, _this.handleCloseModal = function () {
        _this.props.onClose();
      }, _this.modalRef = React.createRef(), _temp), possibleConstructorReturn(_this, _ret);
    }

    ModalBase.prototype.componentDidMount = function componentDidMount() {
      this.addEventListeners();
    };

    ModalBase.prototype.componentWillUnmount = function componentWillUnmount() {
      this.removeEventListeners();
    };

    ModalBase.prototype.render = function render() {
      var _props = this.props,
          className = _props.className,
          children = _props.children,
          onClose = _props.onClose,
          closeOnEscPress = _props.closeOnEscPress,
          restProps = objectWithoutProperties(_props, ['className', 'children', 'onClose', 'closeOnEscPress']);


      var mergedClassNames = getMergedClassNames(styles$8['' + baseClass$8], className);

      return React.createElement(
        'div',
        {
          onMouseDown: this.onOverlayClick,
          className: cx$b(baseClass$8 + '__overlay', baseClass$8 + '__overlay--visible')
        },
        React.createElement(
          'div',
          _extends({ className: mergedClassNames }, restProps, { ref: this.modalRef }),
          React.createElement(ModalCloseButton, { onClick: this.onCloseButtonClick }),
          children
        )
      );
    };

    return ModalBase;
  }(React.Component);

  ModalBase.defaultProps = {
    closeOnEscPress: true
  };


  ModalBase.propTypes = {
    className: propTypes_6,
    children: propTypes_13,
    onClose: propTypes_3.isRequired,
    closeOnEscPress: propTypes_2
  };

  var ModalPortal = function (_React$Component) {
    inherits(ModalPortal, _React$Component);

    function ModalPortal(props) {
      classCallCheck(this, ModalPortal);

      var _this = possibleConstructorReturn(this, _React$Component.call(this, props));

      _this.modalContainer = document.createElement('div');
      if (props.className) {
        _this.modalContainer.className = props.className;
      }
      if (props.zIndex != null) {
        _this.modalContainer.style.zIndex = props.zIndex;
      }
      return _this;
    }

    ModalPortal.prototype.componentDidMount = function componentDidMount() {
      document.querySelector(this.props.parentElementName).appendChild(this.modalContainer);
    };

    ModalPortal.prototype.componentWillUnmount = function componentWillUnmount() {
      document.querySelector(this.props.parentElementName).removeChild(this.modalContainer);
    };

    ModalPortal.prototype.render = function render() {
      return ReactDOM.createPortal(this.props.children, this.modalContainer);
    };

    return ModalPortal;
  }(React.Component);

  ModalPortal.defaultProps = {
    parentElementName: 'body'
  };


  ModalPortal.propTypes = {
    className: propTypes_6,
    children: propTypes_13.isRequired,
    zIndex: propTypes_4,
    parentElementName: propTypes_6
  };

  var baseClass$9 = 'modal';

  var ModalHeader = function ModalHeader(props) {
    var mergedClassNames = getMergedClassNames(styles$8[baseClass$9 + '__header'], props.className);

    return React.createElement(
      'div',
      { className: mergedClassNames },
      React.createElement(
        'div',
        { className: styles$8[baseClass$9 + '__heading'] },
        props.children
      )
    );
  };

  ModalHeader.propTypes = {
    className: propTypes_6,
    children: propTypes_13
  };

  var baseClass$a = 'modal__body';

  var ModalBody = function ModalBody(props) {
    var className = props.className,
        children = props.children,
        restProps = objectWithoutProperties(props, ['className', 'children']);

    var mergedClassNames = getMergedClassNames(styles$8['' + baseClass$a], props.className);

    return React.createElement(
      'div',
      _extends({}, restProps, { className: mergedClassNames }),
      props.children
    );
  };

  ModalBody.propTypes = {
    className: propTypes_6,
    children: propTypes_13
  };

  var baseClass$b = 'modal__footer';

  var ModalFooter = function ModalFooter(props) {
    var mergedClassNames = getMergedClassNames(styles$8['' + baseClass$b], props.className);

    return React.createElement(
      'div',
      { className: mergedClassNames },
      props.children
    );
  };

  ModalFooter.propTypes = {
    className: propTypes_6,
    children: propTypes_13
  };

  var baseClass$c = 'modal';

  var Modal = function Modal(props) {
    var heading = props.heading,
        footer = props.footer,
        children = props.children,
        className = props.className,
        restProps = objectWithoutProperties(props, ['heading', 'footer', 'children', 'className']);


    var mergedClassNames = getMergedClassNames(styles$8['' + baseClass$c], className);

    return React.createElement(
      ModalBase,
      _extends({ className: mergedClassNames }, restProps),
      heading && React.createElement(
        ModalHeader,
        null,
        heading
      ),
      React.createElement(
        ModalBody,
        null,
        children
      ),
      footer && React.createElement(
        ModalFooter,
        null,
        footer
      )
    );
  };

  Modal.propTypes = _extends({}, ModalBase.propTypes, {
    heading: propTypes_13,
    footer: propTypes_13
  });

  var baseClass$d = 'action-modal__heading';

  var ActionModalHeading = function ActionModalHeading(props) {
    var className = props.className,
        children = props.children,
        restProps = objectWithoutProperties(props, ['className', 'children']);

    var mergedClassNames = getMergedClassNames(styles$8['' + baseClass$d], props.className);

    return React.createElement(
      'h2',
      _extends({}, restProps, { className: mergedClassNames }),
      props.children
    );
  };

  ActionModalHeading.propTypes = {
    className: propTypes_6,
    children: propTypes_13
  };

  var baseClass$e = 'action-modal__actions';

  var ActionModalActions = function ActionModalActions(props) {
    var className = props.className,
        children = props.children,
        restProps = objectWithoutProperties(props, ['className', 'children']);

    var mergedClassNames = getMergedClassNames(styles$8['' + baseClass$e], props.className);

    return React.createElement(
      'div',
      _extends({}, restProps, { className: mergedClassNames }),
      props.children
    );
  };

  ActionModalActions.propTypes = {
    className: propTypes_6,
    children: propTypes_13
  };

  var baseClass$f = 'action-modal__content';

  var ActionModalContent = function ActionModalContent(props) {
    var className = props.className,
        children = props.children,
        restProps = objectWithoutProperties(props, ['className', 'children']);

    var mergedClassNames = getMergedClassNames(styles$8['' + baseClass$f], props.className);

    return React.createElement(
      'div',
      _extends({}, restProps, { className: mergedClassNames }),
      props.children
    );
  };

  ActionModalContent.propTypes = {
    className: propTypes_6,
    children: propTypes_13
  };

  var baseClass$g = 'action-modal__icon';

  var ActionModalIcon = function ActionModalIcon(props) {
    var className = props.className,
        children = props.children,
        restProps = objectWithoutProperties(props, ['className', 'children']);

    var mergedClassNames = getMergedClassNames(styles$8['' + baseClass$g], props.className);

    return React.createElement(
      'div',
      _extends({}, restProps, { className: mergedClassNames }),
      props.children
    );
  };

  ActionModalIcon.propTypes = {
    className: propTypes_6,
    children: propTypes_13
  };

  var baseClass$h = 'action-modal';

  var ActionModal = function ActionModal(props) {
    var heading = props.heading,
        actions = props.actions,
        icon = props.icon,
        children = props.children,
        className = props.className,
        restProps = objectWithoutProperties(props, ['heading', 'actions', 'icon', 'children', 'className']);


    var mergedClassNames = getMergedClassNames(styles$8['' + baseClass$h], className);

    return React.createElement(
      ModalBase,
      _extends({ className: mergedClassNames }, restProps),
      icon && React.createElement(
        ActionModalIcon,
        null,
        icon
      ),
      heading && React.createElement(
        ActionModalHeading,
        null,
        heading
      ),
      React.createElement(
        ActionModalContent,
        null,
        children
      ),
      actions && React.createElement(
        ActionModalActions,
        null,
        actions
      )
    );
  };

  ActionModal.propTypes = _extends({}, ModalBase.propTypes, {
    icon: propTypes_13,
    heading: propTypes_13,
    actions: propTypes_13
  });

  var styles$9 = { "text-field": "lc-text-field", "text-field--inline": "lc-text-field--inline", "text-field__wrapper--inline": "lc-text-field__wrapper--inline", "text-field__label": "lc-text-field__label", "text-field__label--inline": "lc-text-field__label--inline", "text-field__label--no-text": "lc-text-field__label--no-text", "text-field__label-wrapper": "lc-text-field__label-wrapper", "text-field__label-adornment": "lc-text-field__label-adornment", "text-field__label-right-node": "lc-text-field__label-right-node", "text-field__label-right-node--inline": "lc-text-field__label-right-node--inline", "text-field__row-break": "lc-text-field__row-break", "text-field__content": "lc-text-field__content" };

  var styles$a = { "field-label": "lc-field-label" };

  var FieldLabel = function FieldLabel(_ref) {
    var className = _ref.className,
        restProps = objectWithoutProperties(_ref, ['className']);

    var mergedClassNames = getMergedClassNames(styles$a['field-label'], className);

    return React.createElement('label', _extends({ className: mergedClassNames }, restProps));
  };

  var styles$b = { "field-error": "lc-field-error" };

  var FieldError = function FieldError(_ref) {
    var children = _ref.children,
        className = _ref.className;

    var mergedClassNames = getMergedClassNames(styles$b['field-error'], className);

    return React.createElement(
      'span',
      { className: mergedClassNames },
      children
    );
  };

  FieldError.propTypes = {
    children: propTypes_13,
    className: propTypes_6
  };

  var styles$c = { "field-description": "lc-field-description" };

  var FieldDescription = function FieldDescription(_ref) {
    var children = _ref.children,
        className = _ref.className;

    var mergedClassNames = getMergedClassNames(styles$c['field-description'], className);

    return React.createElement(
      'span',
      { className: mergedClassNames },
      children
    );
  };

  FieldDescription.propTypes = {
    children: propTypes_13,
    className: propTypes_6
  };

  var cx$c = bind.bind(styles$9);

  var TextField = function TextField(props) {
    var _cx;

    var inline = props.inline,
        error = props.error,
        description = props.description,
        labelText = props.labelText,
        labelAdornment = props.labelAdornment,
        className = props.className,
        htmlFor = props.htmlFor,
        children = props.children,
        labelRightNode = props.labelRightNode;


    var baseClass = "text-field";
    var mergedClassNames = getMergedClassNames(cx$c((_cx = {}, _cx[baseClass] = true, _cx[baseClass + "--inline"] = inline, _cx)), className);

    return React.createElement(
      "div",
      { className: mergedClassNames },
      labelRightNode && inline && React.createElement(
        React.Fragment,
        null,
        React.createElement(
          "div",
          { className: cx$c([baseClass + "__label-right-node", baseClass + "__label-right-node--inline"]) },
          labelRightNode
        ),
        React.createElement("div", { className: cx$c(baseClass + "__row-break") })
      ),
      React.createElement(
        "div",
        { className: cx$c([baseClass + "__wrapper", inline && baseClass + "__wrapper--inline"]) },
        (labelText || labelRightNode) && React.createElement(
          "div",
          { className: cx$c([baseClass + "__label", inline && baseClass + "__label--inline", !labelText && baseClass + "__label--no-text"]) },
          labelText && React.createElement(
            "div",
            {
              className: cx$c(baseClass + "__label-wrapper")
            },
            React.createElement(
              FieldLabel,
              { htmlFor: htmlFor },
              labelText
            ),
            labelAdornment && React.createElement(
              "div",
              { className: cx$c(baseClass + "__label-adornment") },
              labelAdornment
            )
          ),
          labelRightNode && !inline && React.createElement(
            "div",
            { className: cx$c(baseClass + "__label-right-node") },
            labelRightNode
          )
        ),
        React.createElement(
          "div",
          { className: cx$c(baseClass + "__content") },
          children,
          error && React.createElement(
            FieldError,
            null,
            error
          ),
          description && React.createElement(
            FieldDescription,
            null,
            description
          )
        )
      )
    );
  };

  TextField.propTypes = {
    labelText: propTypes_6,
    /**  specifies additional decorative element rendered at the end of the label */
    labelAdornment: propTypes_13,
    htmlFor: propTypes_6.isRequired,
    className: propTypes_6,
    inline: propTypes_2,
    error: propTypes_6,
    description: propTypes_13,
    children: propTypes_13,
    labelRightNode: propTypes_13
  };

  var styles$d = { "input": "lc-input", "input--error": "lc-input--error" };

  var cx$d = bind.bind(styles$d);

  var Input = React.forwardRef(function (props, ref) {
    var error = props.error,
        className = props.className,
        width = props.width,
        style = props.style,
        restProps = objectWithoutProperties(props, ['error', 'className', 'width', 'style']);


    var mergedClassNames = getMergedClassNames(cx$d({
      input: true,
      'input--error': error
    }), className);

    var mergedStyle = style || width ? _extends({
      width: width
    }, style || {}) : void 0;

    return React.createElement('input', _extends({ ref: ref, className: mergedClassNames, style: mergedStyle }, restProps));
  });

  Input.propTypes = {
    error: propTypes_6,
    className: propTypes_6,
    type: propTypes_6,
    maxLength: propTypes_4,
    width: propTypes_6
  };

  Input.defaultProps = {
    type: 'text'
  };

  var InputField = React.forwardRef(function (props, ref) {
    var inline = props.inline,
        error = props.error,
        description = props.description,
        labelText = props.labelText,
        labelAdornment = props.labelAdornment,
        className = props.className,
        id = props.id,
        fieldClassName = props.fieldClassName,
        labelRightNode = props.labelRightNode,
        inputWidth = props.inputWidth,
        maxLength = props.maxLength,
        restProps = objectWithoutProperties(props, ['inline', 'error', 'description', 'labelText', 'labelAdornment', 'className', 'id', 'fieldClassName', 'labelRightNode', 'inputWidth', 'maxLength']);


    return React.createElement(
      TextField,
      {
        inline: inline,
        error: error,
        description: description,
        labelText: labelText,
        labelAdornment: labelAdornment,
        className: className,
        htmlFor: id,
        labelRightNode: labelRightNode
      },
      React.createElement(Input, _extends({}, restProps, {
        ref: ref,
        width: inputWidth,
        className: fieldClassName,
        id: id,
        error: error,
        maxLength: maxLength
      }))
    );
  });

  InputField.propTypes = {
    labelText: propTypes_6,
    /**  specifies additional decorative element rendered at the end of the label */
    labelAdornment: propTypes_13,
    id: propTypes_6.isRequired,
    onChange: propTypes_3.isRequired,
    className: propTypes_6,
    fieldClassName: propTypes_6,
    inline: propTypes_2,
    error: propTypes_6,
    description: propTypes_13,
    labelRightNode: propTypes_13,
    /** use to easily setup input width - by default the input takes 100% of its container width */
    inputWidth: propTypes_6,
    maxLength: propTypes_4
  };

  var styles$e = { "textarea": "lc-textarea", "textarea--error": "lc-textarea--error" };

  var cx$e = bind.bind(styles$e);

  var TextArea = React.forwardRef(function (props, ref) {
    var _cx;

    var error = props.error,
        className = props.className,
        width = props.width,
        style = props.style,
        restProps = objectWithoutProperties(props, ['error', 'className', 'width', 'style']);


    var baseClass = 'textarea';
    var mergedClassNames = getMergedClassNames(cx$e((_cx = {}, _cx[baseClass] = true, _cx[baseClass + '--error'] = error, _cx)), className);
    var mergedStyle = style || width ? _extends({
      width: width
    }, style || {}) : void 0;

    return React.createElement('textarea', _extends({ ref: ref, className: mergedClassNames, style: mergedStyle }, restProps));
  });

  TextArea.propTypes = {
    error: propTypes_6,
    className: propTypes_6
  };

  var TextAreaField = React.forwardRef(function (props, ref) {
    var inline = props.inline,
        error = props.error,
        description = props.description,
        labelText = props.labelText,
        labelAdornment = props.labelAdornment,
        className = props.className,
        textareaWidth = props.textareaWidth,
        id = props.id,
        fieldClassName = props.fieldClassName,
        labelRightNode = props.labelRightNode,
        restProps = objectWithoutProperties(props, ['inline', 'error', 'description', 'labelText', 'labelAdornment', 'className', 'textareaWidth', 'id', 'fieldClassName', 'labelRightNode']);


    return React.createElement(
      TextField,
      {
        inline: inline,
        error: error,
        description: description,
        labelText: labelText,
        labelAdornment: labelAdornment,
        className: className,
        htmlFor: id,
        labelRightNode: labelRightNode
      },
      React.createElement(TextArea, _extends({
        id: id,
        ref: ref,
        width: textareaWidth
      }, restProps, {
        className: fieldClassName,
        error: error
      }))
    );
  });

  TextAreaField.propTypes = {
    labelText: propTypes_6,
    /**  specifies additional decorative element rendered at the end of the label */
    labelAdornment: propTypes_13,
    id: propTypes_6.isRequired,
    className: propTypes_6,
    inline: propTypes_2,
    /** use to easily setup textarea width - by default the element takes 100% of its container width */
    textareaWidth: propTypes_6,
    error: propTypes_6,
    description: propTypes_13,
    fieldClassName: propTypes_6,
    labelRightNode: propTypes_13
  };

  var styles$f = { "radio": "lc-radio", "radio__label": "lc-radio__label", "radio__circle": "lc-radio__circle", "radio__inner-circle": "lc-radio__inner-circle", "radio--selected": "lc-radio--selected", "radio__text": "lc-radio__text", "radio__input": "lc-radio__input", "radio--disabled": "lc-radio--disabled", "radio__helper": "lc-radio__helper" };

  var cx$f = bind.bind(styles$f);

  var RadioButton = function RadioButton(props) {
    var _cx;

    var className = props.className,
        children = props.children,
        checked = props.checked,
        disabled = props.disabled,
        description = props.description,
        restProps = objectWithoutProperties(props, ['className', 'children', 'checked', 'disabled', 'description']);


    var baseClass = 'radio';
    var mergedClassNames = getMergedClassNames(cx$f((_cx = {}, _cx[baseClass] = true, _cx[baseClass + '--selected'] = checked, _cx[baseClass + '--disabled'] = disabled, _cx)), className);

    return React.createElement(
      'div',
      { className: mergedClassNames },
      React.createElement(
        'label',
        { className: styles$f[baseClass + '__label'] },
        React.createElement(
          'div',
          { className: styles$f[baseClass + '__circle'] },
          React.createElement('span', { className: styles$f[baseClass + '__inner-circle'] }),
          React.createElement('input', _extends({
            className: styles$f[baseClass + '__input']
          }, restProps, {
            type: 'radio',
            checked: checked,
            disabled: disabled
          }))
        ),
        React.createElement(
          'div',
          { className: styles$f[baseClass + '__text'] },
          children
        )
      ),
      description && React.createElement(
        FieldDescription,
        { className: styles$f[baseClass + '__helper'] },
        description
      )
    );
  };

  RadioButton.propTypes = {
    className: propTypes_6,
    onChange: propTypes_3,
    checked: propTypes_2,
    children: propTypes_13.isRequired,
    description: propTypes_6,
    disabled: propTypes_2
  };

  RadioButton.defaultProps = {
    onChange: function onChange() {}
  };

  var CheckIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var CheckIcon = function CheckIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-check-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M21 7L9 19l-5.5-5.5 1.41-1.41L9 16.17 19.59 5.59 21 7z" })
    );
  };

  exports.default = CheckIcon;
  });

  var CheckIcon = unwrapExports(CheckIcon_1);

  var styles$g = { "checkbox": "lc-checkbox", "checkbox__label": "lc-checkbox__label", "checkbox__square": "lc-checkbox__square", "checkbox__checkmark": "lc-checkbox__checkmark", "checkbox--selected": "lc-checkbox--selected", "checkbox__text": "lc-checkbox__text", "checkbox__input": "lc-checkbox__input", "checkbox--disabled": "lc-checkbox--disabled", "checkbox__helper": "lc-checkbox__helper" };

  var baseClass$i = 'checkbox';

  var Checkbox = function Checkbox(props) {
    var className = props.className,
        restProps = objectWithoutProperties(props, ['className']);

    var mergedClassNames = getMergedClassNames(styles$g[baseClass$i + '__square'], className);
    return React.createElement(
      'div',
      null,
      React.createElement('input', _extends({
        className: styles$g[baseClass$i + '__input']
      }, restProps, {
        type: 'checkbox'
      })),
      React.createElement(
        'div',
        { className: mergedClassNames },
        React.createElement(CheckIcon, { className: styles$g[baseClass$i + '__checkmark'] })
      )
    );
  };

  var cx$g = bind.bind(styles$g);

  var CheckboxField = function CheckboxField(props) {
    var _cx;

    var className = props.className,
        children = props.children,
        checked = props.checked,
        disabled = props.disabled,
        description = props.description,
        restProps = objectWithoutProperties(props, ['className', 'children', 'checked', 'disabled', 'description']);


    var baseClass = 'checkbox';
    var mergedClassNames = getMergedClassNames(cx$g((_cx = {}, _cx[baseClass] = true, _cx[baseClass + '--selected'] = checked, _cx[baseClass + '--disabled'] = disabled, _cx)), className);

    return React.createElement(
      'div',
      { className: mergedClassNames },
      React.createElement(
        'label',
        { className: styles$g[baseClass + '__label'] },
        React.createElement(Checkbox, _extends({}, restProps, { checked: checked, disabled: disabled })),
        React.createElement(
          'div',
          { className: styles$g[baseClass + '__text'] },
          children
        )
      ),
      description && React.createElement(
        FieldDescription,
        { className: styles$g[baseClass + '__helper'] },
        description
      )
    );
  };

  CheckboxField.propTypes = {
    className: propTypes_6,
    onClick: propTypes_3,
    onChange: propTypes_3,
    checked: propTypes_2.isRequired,
    children: propTypes_13.isRequired,
    description: propTypes_6,
    disabled: propTypes_2
  };

  CheckboxField.defaultProps = {
    onChange: function onChange() {}
  };

  var styles$h = { "form": "lc-form", "form__footer": "lc-form__footer", "form__header": "lc-form__header", "form__label": "lc-form__label", "form__helper": "lc-form__helper" };

  var Form = function Form(_ref) {
    var className = _ref.className,
        children = _ref.children,
        labelText = _ref.labelText,
        helperText = _ref.helperText,
        formFooter = _ref.formFooter,
        restProps = objectWithoutProperties(_ref, ['className', 'children', 'labelText', 'helperText', 'formFooter']);
    return React.createElement(
      'form',
      _extends({ className: classnames(styles$h.form, className) }, restProps),
      (labelText || helperText) && React.createElement(
        'div',
        { className: styles$h.form__header },
        labelText && React.createElement(
          'h3',
          { className: styles$h.form__label },
          labelText
        ),
        helperText && React.createElement(
          'p',
          { className: styles$h.form__helper },
          helperText
        )
      ),
      children,
      formFooter && React.createElement(
        'div',
        { className: styles$h.form__footer },
        formFooter
      )
    );
  };

  Form.propTypes = {
    /**
     * Provide children to be rendered inside of the <form> element
     */
    children: propTypes_13.isRequired,
    labelText: propTypes_6,
    helperText: propTypes_6,
    formFooter: propTypes_13,
    /**
     * Provide a custom className to be applied on the containing <form> node
     */
    className: propTypes_6
  };

  var styles$i = { "form-group": "lc-form-group", "form-group__header": "lc-form-group__header", "form-group__helper": "lc-form-group__helper", "form-group__label": "lc-form-group__label" };

  var FormGroup = function FormGroup(props) {
    var className = props.className,
        children = props.children,
        labelText = props.labelText,
        helperText = props.helperText;


    var baseClass = 'form-group';
    var mergedClassNames = getMergedClassNames(styles$i[baseClass], className);

    return React.createElement(
      'div',
      { role: 'group', 'aria-label': labelText, className: mergedClassNames },
      React.createElement(
        'div',
        { className: styles$i[baseClass + '__header'] },
        React.createElement(
          'div',
          { className: styles$i[baseClass + '__label'] },
          labelText
        ),
        helperText && React.createElement(
          'div',
          { className: styles$i[baseClass + '__helper'] },
          helperText
        )
      ),
      children
    );
  };

  FormGroup.propTypes = {
    className: propTypes_6,
    labelText: propTypes_6,
    helperText: propTypes_6,
    children: propTypes_13.isRequired
  };

  var styles$j = { "field-group": "lc-field-group", "field-group--inline": "lc-field-group--inline", "field-group--stretched": "lc-field-group--stretched" };

  var cx$h = bind.bind(styles$j);

  var FieldGroup = function FieldGroup(props) {
    var _cx;

    var className = props.className,
        children = props.children,
        inline = props.inline,
        stretch = props.stretch,
        error = props.error,
        description = props.description,
        restProps = objectWithoutProperties(props, ['className', 'children', 'inline', 'stretch', 'error', 'description']);


    var baseClass = 'field-group';
    var mergedClassNames = getMergedClassNames(cx$h((_cx = {}, _cx[baseClass] = true, _cx[baseClass + '--inline'] = inline, _cx[baseClass + '--stretched'] = stretch, _cx)), className);

    return React.createElement(
      'div',
      _extends({}, restProps, { className: mergedClassNames }),
      children,
      error && React.createElement(
        FieldError,
        null,
        error
      ),
      description && React.createElement(
        FieldDescription,
        null,
        description
      )
    );
  };

  FieldGroup.propTypes = {
    children: propTypes_13.isRequired,
    className: propTypes_6,
    description: propTypes_13,
    error: propTypes_6,
    inline: propTypes_2,
    stretch: propTypes_2
  };

  var MenuDownIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var MenuDownIcon = function MenuDownIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-menu-down-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M7 10l5 5 5-5H7z" })
    );
  };

  exports.default = MenuDownIcon;
  });

  var MenuDownIcon = unwrapExports(MenuDownIcon_1);

  var styles$k = { "select": "lc-select", "select-head": "lc-select-head", "select-head--focused": "lc-select-head--focused", "select-head--disabled": "lc-select-head--disabled", "select-head__clear": "lc-select-head__clear", "select-head__clear--visible": "lc-select-head__clear--visible", "select-head__search": "lc-select-head__search", "select-head__search--visible": "lc-select-head__search--visible", "select-head__input": "lc-select-head__input", "select-body": "lc-select-body", "select-body--visible": "lc-select-body--visible", "select-body__list": "lc-select-body__list", "select-body__list__header": "lc-select-body__list__header", "select-body__item": "lc-select-body__item", "select-body__item-content": "lc-select-body__item-content", "select-body__item--selected": "lc-select-body__item--selected", "select-body__checkmark": "lc-select-body__checkmark", "select-body__item--focused": "lc-select-body__item--focused", "select-head__item": "lc-select-head__item", "select-head__item-content": "lc-select-head__item-content", "select-head__item--visible": "lc-select-head__item--visible", "select-head__item-placeholder": "lc-select-head__item-placeholder", "select--error": "lc-select--error" };

  var baseClass$j = 'select-body';
  var cx$i = bind.bind(styles$k);

  var SelectItem = function SelectItem(props) {
    var _cx;

    var isSelected = props.isSelected,
        children = props.children,
        isFocused = props.isFocused,
        restProps = objectWithoutProperties(props, ['isSelected', 'children', 'isFocused']);

    return React.createElement(
      'li',
      _extends({
        className: cx$i((_cx = {}, _cx[baseClass$j + '__item'] = true, _cx[baseClass$j + '__item--selected'] = isSelected, _cx[baseClass$j + '__item--focused'] = isFocused, _cx)),
        'data-testid': 'select-body-item'
      }, restProps),
      React.createElement(
        'div',
        { className: styles$k[baseClass$j + '__item-content'] },
        children
      ),
      React.createElement(CheckIcon, {
        width: '15px',
        height: '15px',
        className: styles$k[baseClass$j + '__checkmark'],
        'data-testid': 'select-body-item-check-icon'
      })
    );
  };

  SelectItem.propTypes = {
    isSelected: propTypes_2,
    isFocused: propTypes_2,
    children: propTypes_13
  };

  var baseClass$k = 'select-body';

  var SelectList = function (_React$PureComponent) {
    inherits(SelectList, _React$PureComponent);

    function SelectList() {
      var _temp, _this, _ret;

      classCallCheck(this, SelectList);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.onKeydown = function (event) {
        var keyCode = event.keyCode;


        if (keyCode === 9 || keyCode === 27) {
          if (_this.props.listRef.current) {
            _this.props.listRef.current.scrollTop = 0;
          }
          _this.props.onListClose();
        }

        if (keyCode === KeyCodes.arrowDown || keyCode === KeyCodes.arrowUp) {
          _this.handleArrowKeyUse(event);
        }

        if (keyCode === KeyCodes.enter) {
          _this.handleEnterKeyUse(event);
        }
      }, _this.getHoveredItemCallback = function (itemKey) {
        if (!_this.hoverCallbacks[itemKey]) {
          _this.hoverCallbacks[itemKey] = function () {
            if (_this.props.listRef.current && !_this.props.listRef.current.classList.contains('disable-hover')) {
              _this.props.onFocusedItemChange(itemKey);
            }
          };
        }

        return _this.hoverCallbacks[itemKey];
      }, _this.getFocusedItemIndex = function (itemKey) {
        return _this.props.items.map(function (item) {
          return item.key;
        }).indexOf(itemKey);
      }, _this.scrollItems = function () {
        if (!_this.props.listRef.current) {
          return;
        }
        var focusedElement = _this.props.listRef.current.querySelector('.lc-' + baseClass$k + '__item--focused');

        if (focusedElement) {
          _this.props.listRef.current.classList.add('disable-hover');

          var _this$props$listRef$c = _this.props.listRef.current.getBoundingClientRect(),
              ulHeight = _this$props$listRef$c.height,
              ulTop = _this$props$listRef$c.top;

          var _focusedElement$getBo = focusedElement.getBoundingClientRect(),
              itemHeigth = _focusedElement$getBo.height,
              itemTop = _focusedElement$getBo.top;

          var relativeTop = itemTop + itemHeigth - ulTop;
          var itemOfsetTop = focusedElement.offsetTop;

          if (relativeTop > ulHeight) {
            _this.props.listRef.current.scrollTop = itemOfsetTop - ulHeight + itemHeigth;
          } else if (itemTop < ulTop) {
            _this.props.listRef.current.scrollTop = itemOfsetTop - itemOfsetTop % itemHeigth;
          }
          _this.timerId = setTimeout(function () {
            return _this.props.listRef.current.classList.remove('disable-hover');
          }, 100);
        }
      }, _this.handleEnterKeyUse = function () {
        var _this$props = _this.props,
            isOpen = _this$props.isOpen,
            focusedItemKey = _this$props.focusedItemKey,
            onEnterKey = _this$props.onEnterKey;


        if (isOpen && focusedItemKey !== null) {
          if (_this.props.listRef.current) {
            _this.props.listRef.current.scrollTop = 0;
          }
          onEnterKey(focusedItemKey);
        }
      }, _this.handleArrowKeyUse = function (event) {
        event.preventDefault();
        var _this$props2 = _this.props,
            items = _this$props2.items,
            focusedItemKey = _this$props2.focusedItemKey,
            onFocusedItemChange = _this$props2.onFocusedItemChange;
        var keyCode = event.keyCode;


        var currentItemIndex = _this.getFocusedItemIndex(focusedItemKey);

        if (keyCode === KeyCodes.arrowUp && currentItemIndex > 0) {
          onFocusedItemChange(items[currentItemIndex - 1].key);
        }

        if (keyCode === KeyCodes.arrowDown && currentItemIndex + 1 < items.length) {
          onFocusedItemChange(items[currentItemIndex + 1].key);
        }

        _this.scrollItems();
      }, _this.isItemSelected = function (itemKey) {
        if (_this.props.selectedItem === null) {
          return false;
        }
        return _this.props.selectedItem === itemKey;
      }, _this.isItemFocused = function (itemKey) {
        return _this.props.focusedItemKey === itemKey;
      }, _this.timerId = null, _this.hoverCallbacks = [], _temp), possibleConstructorReturn(_this, _ret);
    }

    SelectList.prototype.componentDidMount = function componentDidMount() {
      if (this.props.isOpen) {
        document.addEventListener('keydown', this.onKeydown);
      }
    };

    SelectList.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (!prevProps.isOpen && this.props.isOpen) {
        if (this.props.listRef.current) {
          this.props.listRef.current.scrollTop = 0;
        }
        document.addEventListener('keydown', this.onKeydown);
      } else if (prevProps.isOpen && !this.props.isOpen) {
        document.removeEventListener('keydown', this.onKeydown);
        if (this.timerId) {
          clearTimeout(this.timerId);
        }
      }
    };

    SelectList.prototype.componentWillUnmount = function componentWillUnmount() {
      document.removeEventListener('keydown', this.onKeydown);
      this.hoverCallbacks = [];
      if (this.timerId) {
        clearTimeout(this.timerId);
      }
    };

    SelectList.prototype.render = function render() {
      var _this2 = this;

      var _props = this.props,
          items = _props.items,
          getItemBody = _props.getItemBody,
          getItemSelectedHandler = _props.getItemSelectedHandler,
          selectHeader = _props.selectHeader;


      return React.createElement(
        'ul',
        { ref: this.props.listRef, className: styles$k[baseClass$k + '__list'], 'data-testid': 'select-list' },
        selectHeader && React.createElement(
          SelectItem,
          { className: styles$k[baseClass$k + '__list__header'] },
          selectHeader
        ),
        items.filter(function (v) {
          return !v.props.hidden;
        }).map(function (item) {
          return React.createElement(
            SelectItem,
            {
              isSelected: _this2.isItemSelected(item.key),
              isFocused: _this2.isItemFocused(item.key),
              key: item.key,
              onClick: getItemSelectedHandler(item.key),
              onMouseEnter: _this2.getHoveredItemCallback(item.key)
            },
            getItemBody(item.props)
          );
        })
      );
    };

    return SelectList;
  }(React.PureComponent);

  SelectList.propTypes = {
    getItemBody: propTypes_3,
    isOpen: propTypes_2,
    items: propTypes_9(propTypes_17({
      key: propTypes_6,
      props: propTypes_5
    })),
    onListClose: propTypes_3,
    selectedItem: propTypes_16([propTypes_6, propTypes_4]),
    getItemSelectedHandler: propTypes_3,
    onEnterKey: propTypes_3,
    focusedItemKey: propTypes_6,
    onFocusedItemChange: propTypes_3,
    listRef: propTypes_17({
      current: propTypes_12(typeof Element === 'undefined' ? function () {} : Element)
    }),
    selectHeader: propTypes_6
  };

  var cx$j = bind.bind(styles$k);

  var baseClass$l = 'select-head';

  var SelectHead = React.forwardRef(function (props, ref) {
    var _cx;

    var isFocused = props.isFocused,
        disabled = props.disabled,
        children = props.children,
        restProps = objectWithoutProperties(props, ['isFocused', 'disabled', 'children']);


    return React.createElement(
      'div',
      _extends({
        ref: ref,
        className: cx$j((_cx = {}, _cx['' + baseClass$l] = true, _cx[baseClass$l + '--focused'] = isFocused, _cx[baseClass$l + '--disabled'] = disabled, _cx)),
        disabled: disabled,
        'data-testid': 'select-head'
      }, restProps, {
        tabIndex: disabled ? -1 : 0
      }),
      children
    );
  });

  SelectHead.propTypes = {
    children: propTypes_13,
    disabled: propTypes_2,
    isFocused: propTypes_2
  };

  var baseClass$m = 'select-head__item';
  var cx$k = bind.bind(styles$k);

  var SelectHeadItem = function SelectHeadItem(props) {
    var _cx;

    var isVisible = props.isVisible,
        selectedItem = props.selectedItem,
        placeholder = props.placeholder,
        getSelectedItemBody = props.getSelectedItemBody;

    return React.createElement(
      'div',
      {
        className: cx$k((_cx = {}, _cx['' + baseClass$m] = true, _cx[baseClass$m + '--visible'] = isVisible, _cx)),
        'data-testid': 'select-head-item'
      },
      selectedItem ? React.createElement(
        'div',
        { className: styles$k[baseClass$m + '-content'] },
        getSelectedItemBody(selectedItem.props)
      ) : React.createElement(
        'div',
        { className: styles$k[baseClass$m + '-placeholder'], 'data-testid': 'select-head-item-pladceholder' },
        placeholder
      )
    );
  };

  SelectHeadItem.propTypes = {
    isVisible: propTypes_2,
    selectedItem: propTypes_17({
      key: propTypes_6,
      props: propTypes_5
    }),
    placeholder: propTypes_6,
    getSelectedItemBody: propTypes_3
  };

  var baseClass$n = 'select-head';
  var cx$l = bind.bind(styles$k);

  var ClearButton = React.forwardRef(function (props, ref) {
    var _cx;

    var isVisible = props.isVisible,
        clearSelectedOption = props.clearSelectedOption;

    return React.createElement(
      'div',
      {
        ref: ref,
        className: cx$l((_cx = {}, _cx[baseClass$n + '__clear'] = true, _cx[baseClass$n + '__clear--visible'] = isVisible, _cx)),
        'data-testid': 'select-clear-button'
      },
      React.createElement(CloseIcon, {
        width: '20px',
        height: '20px',
        fill: '#4384f5',
        'data-testid': 'select-clear-icon',
        onClick: clearSelectedOption
      })
    );
  });

  ClearButton.propTypes = {
    clearSelectedOption: propTypes_3,
    isVisible: propTypes_2
  };

  var baseClass$o = 'select-head';
  var cx$m = bind.bind(styles$k);

  var Search = function Search(props) {
    var _cx;

    var inputRef = props.inputRef,
        isVisible = props.isVisible,
        placeholder = props.placeholder,
        value = props.value,
        onChange = props.onChange,
        disabled = props.disabled;

    var onKeyDown = function onKeyDown(event) {
      if (event.keyCode === KeyCodes.enter) {
        event.preventDefault();
      }
    };

    return React.createElement(
      'div',
      {
        className: cx$m((_cx = {}, _cx[baseClass$o + '__search'] = true, _cx[baseClass$o + '__search--visible'] = isVisible, _cx))
      },
      React.createElement('input', {
        ref: inputRef,
        className: styles$k[baseClass$o + '__input'],
        type: 'text',
        placeholder: placeholder,
        name: 'select-box-input',
        'data-testid': 'select-search-input',
        value: value,
        onChange: onChange,
        onKeyDown: onKeyDown,
        autoComplete: 'off',
        disabled: disabled
      })
    );
  };

  Search.propTypes = {
    inputRef: propTypes_17({
      current: propTypes_12(typeof Element === 'undefined' ? function () {} : Element)
    }),
    isVisible: propTypes_2,
    placeholder: propTypes_6,
    value: propTypes_6,
    onChange: propTypes_3,
    disabled: propTypes_2
  };

  var cx$n = bind.bind(styles$k);

  var baseClass$p = 'select';

  var Select = function (_React$PureComponent) {
    inherits(Select, _React$PureComponent);

    function Select(props) {
      classCallCheck(this, Select);

      var _this = possibleConstructorReturn(this, _React$PureComponent.call(this, props));

      _initialiseProps.call(_this);

      _this.state = {
        isOpen: props.openedOnInit || props.isOpen || false,
        searchPhrase: '',
        focusedItemKey: _this.props.items[0] ? _this.props.items[0].key : null,
        isFocused: false
      };

      _this.timerId = null;
      _this.containerRef = React.createRef();
      _this.searchInputRef = React.createRef();
      _this.headRef = React.createRef();
      _this.clearButtonRef = React.createRef();
      _this.listRef = React.createRef();
      return _this;
    }

    Select.prototype.componentDidMount = function componentDidMount() {
      if (this.state.isOpen) {
        this.props.onDropdownToggle(true);
        this.onBodyOpen();
      }
    };

    Select.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
      var hasIsOpenChanged = this.getIsOpen(prevProps, prevState) !== this.getIsOpen();

      if (this.getIsOpen() && hasIsOpenChanged) {
        this.onBodyOpen();
      } else if (!this.getIsOpen() && hasIsOpenChanged) {
        this.onBodyClose();
      }
    };

    Select.prototype.componentWillUnmount = function componentWillUnmount() {
      this.onBodyClose();
      document.removeEventListener('keydown', this.onArrowPress);
    };

    Select.prototype.render = function render() {
      var _cx, _cx2;

      var _props = this.props,
          className = _props.className,
          disabled = _props.disabled,
          error = _props.error,
          getItemBody = _props.getItemBody,
          getSelectedItemBody = _props.getSelectedItemBody,
          id = _props.id,
          items = _props.items,
          placeholder = _props.placeholder,
          required = _props.required,
          search = _props.search,
          searchEmptyState = _props.searchEmptyState,
          searchPlaceholder = _props.searchPlaceholder,
          selected = _props.selected,
          dataTestId = _props.dataTestId,
          selectHeader = _props.selectHeader;
      var _state = this.state,
          searchPhrase = _state.searchPhrase,
          focusedItemKey = _state.focusedItemKey,
          isFocused = _state.isFocused;

      var selectedItemModel = items.find(function (item) {
        return item.key === selected;
      });
      var filteredItems = items.filter(this.filterItem);
      var mergedClassNames = getMergedClassNames(cx$n((_cx = {}, _cx[baseClass$p] = true, _cx[baseClass$p + '--error'] = error, _cx)), className);

      var isOpen = this.getIsOpen();
      var shouldRenderClearButton = !!selectedItemModel && !isOpen && !required;

      return React.createElement(
        'div',
        { ref: this.containerRef, className: mergedClassNames, id: id, 'data-testid': dataTestId },
        React.createElement(
          SelectHead,
          {
            isFocused: isOpen || isFocused,
            disabled: disabled,
            ref: this.headRef,
            onClick: this.onSelectHeadClick,
            onFocus: this.onSelectHeadFocus,
            onBlur: this.onSelectHeadBlur
          },
          React.createElement(SelectHeadItem, {
            getSelectedItemBody: getSelectedItemBody,
            selectedItem: selectedItemModel,
            isVisible: !(isOpen && search),
            placeholder: placeholder
          }),
          React.createElement(Search, {
            isVisible: !search ? false : isOpen,
            inputRef: this.searchInputRef,
            placeholder: searchPlaceholder || 'Search...',
            value: searchPhrase,
            onChange: this.onSearchChange,
            disabled: disabled
          }),
          React.createElement(ClearButton, {
            isVisible: shouldRenderClearButton,
            ref: this.clearButtonRef,
            clearSelectedOption: this.clearSelectedOption
          }),
          React.createElement(MenuDownIcon, { width: '24px', height: '24px', fill: '#424d57', 'data-testid': 'select-down-icon' })
        ),
        React.createElement(
          'div',
          {
            className: cx$n((_cx2 = {}, _cx2[baseClass$p + '-body'] = true, _cx2[baseClass$p + '-body--visible'] = this.shouldShowSelectBody(filteredItems), _cx2)),
            'data-testid': 'select-body'
          },
          filteredItems.length === 0 && searchEmptyState,
          React.createElement(SelectList, {
            listRef: this.listRef,
            getItemBody: getItemBody,
            isOpen: isOpen,
            onListClose: this.hideSelectBody,
            items: filteredItems,
            getSelectedItemBody: getSelectedItemBody,
            selectedItem: selected,
            getItemSelectedHandler: this.getItemSelectedHandler,
            onEnterKey: this.handleEnterKeyUse,
            onFocusedItemChange: this.changeFocusedItem,
            focusedItemKey: focusedItemKey,
            selectHeader: selectHeader
          })
        )
      );
    };

    return Select;
  }(React.PureComponent);

  var _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.onDocumentClick = function (event) {
      if (_this2.getIsOpen() && _this2.containerRef.current && !_this2.containerRef.current.contains(event.target)) {
        _this2.listRef.current.scrollTop = 0;
        _this2.hideSelectBody();
      }
    };

    this.onSearchChange = function (event) {
      _this2.setState({
        searchPhrase: event.target.value
      }, function () {
        var filteredItems = _this2.props.items.filter(function (v) {
          return _this2.filterItem(v) && _this2.props.selected !== v.key;
        });
        var focusedItemKey = filteredItems.length > 0 ? filteredItems[0].key : null;

        _this2.setState({
          focusedItemKey: focusedItemKey
        });

        if (_this2.props.onSearchPhraseChange) {
          _this2.props.onSearchPhraseChange(_this2.state.searchPhrase);
        }
      });
    };

    this.onBodyOpen = function () {
      document.addEventListener('click', _this2.onDocumentClick);
      if (_this2.props.search && _this2.searchInputRef.current) {
        _this2.timerId = setTimeout(function () {
          _this2.searchInputRef.current.focus();
        }, 150);
      }
    };

    this.onBodyClose = function () {
      document.removeEventListener('click', _this2.onDocumentClick);
      if (_this2.timerId) {
        clearTimeout(_this2.timerId);
      }
    };

    this.onSelectHeadClick = function (event) {
      event.preventDefault();
      if (_this2.props.disabled) {
        return;
      }
      if (_this2.clearButtonRef.current && _this2.clearButtonRef.current.contains(event.target)) {
        return;
      }
      if (!_this2.getIsOpen()) {
        _this2.showSelectBody();
      } else {
        _this2.hideSelectBody();
      }
    };

    this.onSelectHeadFocus = function () {
      _this2.setState({
        isFocused: true
      });
      if (!_this2.state.isOpen) {
        document.addEventListener('keydown', _this2.onArrowPress);
      }
    };

    this.onSelectHeadBlur = function () {
      _this2.setState({
        isFocused: false
      });
      document.removeEventListener('keydown', _this2.onArrowPress);
    };

    this.onArrowPress = function (e) {
      if (e.keyCode === KeyCodes.arrowDown || e.keyCode === KeyCodes.arrowUp) {
        e.preventDefault();
        _this2.showSelectBody();
      }
    };

    this.getItemSelectedHandler = function (itemKey) {
      return function (event) {
        event.preventDefault();

        _this2.props.onItemSelect(itemKey);
        _this2.hideSelectBody();
      };
    };

    this.getIsOpen = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this2.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this2.state;

      if (props.disabled) {
        return false;
      }
      return _this2.isIsOpenControlled() ? props.isOpen : state.isOpen;
    };

    this.handleEnterKeyUse = function (itemKey) {
      _this2.props.onItemSelect(itemKey);
      _this2.hideSelectBody();
    };

    this.showSelectBody = function () {
      _this2.setState({
        isOpen: true,
        searchPhrase: ''
      }, function () {
        _this2.props.onDropdownToggle(true);
      });
    };

    this.shouldShowSelectBody = function (filteredItems) {
      var searchEmptyState = _this2.props.searchEmptyState;
      var searchPhrase = _this2.state.searchPhrase;

      var isOpen = _this2.getIsOpen();

      return isOpen && filteredItems.length > 0 || searchEmptyState && searchPhrase.length > 0 && filteredItems.length === 0;
    };

    this.hideSelectBody = function () {
      _this2.setState({
        isOpen: false,
        focusedItemKey: _this2.props.items[0] ? _this2.props.items[0].key : null,
        searchPhrase: ''
      }, function () {
        _this2.props.onDropdownToggle(false);
        if (_this2.headRef.current) {
          _this2.headRef.current.focus();
        }
      });
    };

    this.changeFocusedItem = function (itemKey) {
      if (typeof itemKey === 'undefined' || itemKey === null) {
        return _this2.setState({
          focusedItemKey: _this2.props.items[0] ? _this2.props.items[0].key : null
        });
      }
      return _this2.setState({
        focusedItemKey: itemKey
      });
    };

    this.clearSelectedOption = function (e) {
      e.preventDefault();
      e.stopPropagation();
      _this2.props.onItemSelect(null);
    };

    this.filterItem = function (item) {
      var searchProperty = _this2.props.searchProperty;
      var searchPhrase = _this2.state.searchPhrase;


      if (searchPhrase) {
        if (typeof searchProperty === 'string') {
          if (!(searchProperty in item.props)) {
            return false;
          }

          return item.props[searchProperty].toLocaleLowerCase().includes(searchPhrase.toLocaleLowerCase());
        } else if (Array.isArray(searchProperty) && searchProperty.length > 0) {
          var validSearchProperties = searchProperty.filter(function (p) {
            return item.props[p];
          });

          if (validSearchProperties.length === 0) {
            return false;
          }
          return validSearchProperties.some(function (p) {
            return item.props[p].toLocaleLowerCase().includes(searchPhrase.toLocaleLowerCase());
          });
        }
      }

      return true;
    };

    this.isIsOpenControlled = function () {
      return _this2.props.isOpen !== undefined;
    };
  };

  Select.propTypes = {
    className: propTypes_6,
    error: propTypes_6,
    id: propTypes_6,
    dataTestId: propTypes_6,
    /**
     * Use when you need to control multiselect dropdown visibility in its parent component
     * Remember to pass `onDropdownToggle` method as props, thanks to that you will be able to
     * update your state
     */
    isOpen: propTypes_2,
    getItemBody: propTypes_3.isRequired,
    getSelectedItemBody: propTypes_3,
    onItemSelect: propTypes_3.isRequired,
    /**
     * Pass a ReactNode to specify SelectList placeholder
     * (visible when items list is empty and typed search phrase is not empty)
     */
    searchEmptyState: propTypes_13,
    items: propTypes_9(propTypes_17({
      key: propTypes_6,
      props: propTypes_5
    })),
    searchPlaceholder: propTypes_6,
    searchProperty: propTypes_16([propTypes_6, propTypes_9(propTypes_6)]),
    selected: propTypes_16([propTypes_6, propTypes_4]),
    search: propTypes_2,
    required: propTypes_2,
    placeholder: propTypes_6,
    disabled: propTypes_2,
    openedOnInit: propTypes_2,
    onDropdownToggle: propTypes_3,
    /**
     * Searching is controlled by Select component itself. Use this props to get current value of search phrase.
     * It would be useful, for instance, if you need to save searchPhrase as new item.
     * (searchPhrase) => {}
     */
    onSearchPhraseChange: propTypes_3,
    /**
     * Pass a string to display a tip in items list
     */
    selectHeader: propTypes_6
  };

  Select.defaultProps = {
    items: [],
    selected: null,
    onDropdownToggle: function onDropdownToggle() {}
  };

  var SelectField = function SelectField(props) {
    var inline = props.inline,
        error = props.error,
        description = props.description,
        labelText = props.labelText,
        labelAdornment = props.labelAdornment,
        className = props.className,
        id = props.id,
        fieldClassName = props.fieldClassName,
        restProps = objectWithoutProperties(props, ['inline', 'error', 'description', 'labelText', 'labelAdornment', 'className', 'id', 'fieldClassName']);


    return React.createElement(
      TextField,
      {
        inline: inline,
        error: error,
        description: description,
        labelText: labelText,
        labelAdornment: labelAdornment,
        className: className,
        htmlFor: id
      },
      React.createElement(Select, _extends({}, restProps, { className: fieldClassName, id: id, error: error }))
    );
  };

  SelectField.propTypes = {
    labelText: propTypes_6,
    /**  specifies additional decorative element rendered at the end of the label */
    labelAdornment: propTypes_13,
    id: propTypes_6.isRequired,
    className: propTypes_6,
    fieldClassName: propTypes_6,
    inline: propTypes_2,
    error: propTypes_6,
    description: propTypes_13
  };

  var styles$l = { "multiselect": "lc-multiselect", "multiselect-head": "lc-multiselect-head", "multiselect-head--focused": "lc-multiselect-head--focused", "multiselect-head--disabled": "lc-multiselect-head--disabled", "multiselect-head__clear": "lc-multiselect-head__clear", "multiselect-head__clear--visible": "lc-multiselect-head__clear--visible", "multiselect-head__search": "lc-multiselect-head__search", "multiselect-head__search--expanded": "lc-multiselect-head__search--expanded", "multiselect-body": "lc-multiselect-body", "multiselect-body--visible": "lc-multiselect-body--visible", "multiselect-body__list": "lc-multiselect-body__list", "multiselect-body__item": "lc-multiselect-body__item", "multiselect-body__item-content": "lc-multiselect-body__item-content", "multiselect-body__item--selected": "lc-multiselect-body__item--selected", "multiselect-body__checkmark": "lc-multiselect-body__checkmark", "multiselect-body__item--focused": "lc-multiselect-body__item--focused", "multiselect-body__item--toggle": "lc-multiselect-body__item--toggle", "multiselect-head__items": "lc-multiselect-head__items", "multiselect-head__items-empty": "lc-multiselect-head__items-empty", "multiselect__placeholder": "lc-multiselect__placeholder", "multiselect-head__item": "lc-multiselect-head__item", "multiselect-head__item-content": "lc-multiselect-head__item-content", "multiselect-head__item-remove-icon": "lc-multiselect-head__item-remove-icon", "multiselect__dropdown-icon": "lc-multiselect__dropdown-icon", "multiselect--error": "lc-multiselect--error" };

  var baseClass$q = 'multiselect-body';
  var cx$o = bind.bind(styles$l);

  var SelectItem$1 = function SelectItem(props) {
    var _cx;

    var isSelected = props.isSelected,
        children = props.children,
        isFocused = props.isFocused,
        isToggleItem = props.isToggleItem,
        restProps = objectWithoutProperties(props, ['isSelected', 'children', 'isFocused', 'isToggleItem']);

    return React.createElement(
      'li',
      _extends({
        className: cx$o((_cx = {}, _cx[baseClass$q + '__item'] = true, _cx[baseClass$q + '__item--selected'] = isSelected, _cx[baseClass$q + '__item--focused'] = isFocused, _cx[baseClass$q + '__item--toggle'] = isToggleItem, _cx)),
        'data-testid': 'multiselect-body-item'
      }, restProps),
      React.createElement(
        'div',
        { className: styles$l[baseClass$q + '__item-content'] },
        children
      ),
      React.createElement(CheckIcon, {
        width: '15px',
        height: '15px',
        className: styles$l[baseClass$q + '__checkmark'],
        'data-testid': 'multiselect-body-item-check-icon'
      })
    );
  };

  SelectItem$1.propTypes = {
    isSelected: propTypes_2,
    isFocused: propTypes_2,
    isToggleItem: propTypes_2,
    children: propTypes_13
  };

  var baseClass$r = 'multiselect-body';

  var MultiSelectList = function (_React$PureComponent) {
    inherits(MultiSelectList, _React$PureComponent);

    function MultiSelectList() {
      var _temp, _this, _ret;

      classCallCheck(this, MultiSelectList);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.onKeydown = function (event) {
        var keyCode = event.keyCode;


        if (keyCode === 9 || keyCode === 27) {
          if (_this.props.listRef.current) {
            _this.props.listRef.current.scrollTop = 0;
          }
          _this.props.onListClose();
        }

        if (keyCode === KeyCodes.arrowDown || keyCode === KeyCodes.arrowUp) {
          _this.handleArrowKeyUse(event);
        }

        if (keyCode === KeyCodes.enter) {
          _this.handleEnterKeyUse(event);
        }
      }, _this.onToggleAllOptionHover = function () {
        _this.props.onFocusedItemChange(null);
      }, _this.getHoveredItemCallback = function (itemKey) {
        if (!_this.hoverCallbacks[itemKey]) {
          _this.hoverCallbacks[itemKey] = function () {
            if (_this.props.listRef.current && !_this.props.listRef.current.classList.contains('disable-hover')) {
              _this.props.onFocusedItemChange(itemKey);
            }
          };
        }

        return _this.hoverCallbacks[itemKey];
      }, _this.getFocusedItemIndex = function (itemKey) {
        return _this.props.items.map(function (item) {
          return item.key;
        }).indexOf(itemKey);
      }, _this.scrollItems = function () {
        if (!_this.props.listRef.current) {
          return;
        }
        var focusedElement = _this.props.listRef.current.querySelector('.lc-' + baseClass$r + '__item--focused');

        if (focusedElement) {
          _this.props.listRef.current.classList.add('disable-hover');

          var _this$props$listRef$c = _this.props.listRef.current.getBoundingClientRect(),
              ulHeight = _this$props$listRef$c.height,
              ulTop = _this$props$listRef$c.top;

          var _focusedElement$getBo = focusedElement.getBoundingClientRect(),
              itemHeigth = _focusedElement$getBo.height,
              itemTop = _focusedElement$getBo.top;

          var relativeTop = itemTop + itemHeigth - ulTop;
          var itemOfsetTop = focusedElement.offsetTop;

          if (relativeTop > ulHeight) {
            _this.props.listRef.current.scrollTop = itemOfsetTop - ulHeight + itemHeigth;
          } else if (itemTop < ulTop) {
            _this.props.listRef.current.scrollTop = itemOfsetTop - itemOfsetTop % itemHeigth;
          }
          _this.timerId = setTimeout(function () {
            return _this.props.listRef.current.classList.remove('disable-hover');
          }, 100);
        }
      }, _this.handleEnterKeyUse = function () {
        var _this$props = _this.props,
            isOpen = _this$props.isOpen,
            focusedItemKey = _this$props.focusedItemKey,
            onEnterKey = _this$props.onEnterKey,
            toggleAllOptions = _this$props.toggleAllOptions;


        if (toggleAllOptions && focusedItemKey === null) {
          _this.handleToggleAll();
        } else if (isOpen && focusedItemKey !== null) {
          onEnterKey(focusedItemKey);
        }
      }, _this.handleArrowKeyUse = function (event) {
        event.preventDefault();
        var _this$props2 = _this.props,
            items = _this$props2.items,
            focusedItemKey = _this$props2.focusedItemKey,
            onFocusedItemChange = _this$props2.onFocusedItemChange,
            toggleAllOptions = _this$props2.toggleAllOptions;
        var keyCode = event.keyCode;


        var currentItemIndex = _this.getFocusedItemIndex(focusedItemKey);

        if (keyCode === KeyCodes.arrowUp) {
          if (currentItemIndex > 0) {
            onFocusedItemChange(items[currentItemIndex - 1].key);
          } else if (toggleAllOptions) {
            onFocusedItemChange(null);
          }
        }

        if (keyCode === KeyCodes.arrowDown && currentItemIndex + 1 < items.length) {
          onFocusedItemChange(items[currentItemIndex + 1].key);
        }

        _this.scrollItems();
      }, _this.isItemSelected = function (itemKey) {
        if (!_this.props.selectedItems) {
          return false;
        }
        return _this.props.selectedItems.some(function (item) {
          return item === itemKey;
        });
      }, _this.isItemFocused = function (itemKey) {
        return _this.props.focusedItemKey === itemKey;
      }, _this.isAllItemsSelected = function () {
        if (!_this.props.selectedItems) {
          return false;
        }
        return _this.props.selectedItems.length === _this.props.items.length;
      }, _this.handleToggleAll = function () {
        if (_this.isAllItemsSelected()) {
          return _this.props.toggleAllOptions.onToggleAll(null);
        }
        return _this.props.toggleAllOptions.onToggleAll(_this.props.items.map(function (item) {
          return item.key;
        }));
      }, _this.timerId = null, _this.hoverCallbacks = [], _temp), possibleConstructorReturn(_this, _ret);
    }

    MultiSelectList.prototype.componentDidMount = function componentDidMount() {
      if (this.props.isOpen) {
        document.addEventListener('keydown', this.onKeydown);
      }
    };

    MultiSelectList.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (!prevProps.isOpen && this.props.isOpen) {
        if (this.props.listRef.current) {
          this.props.listRef.current.scrollTop = 0;
        }
        document.addEventListener('keydown', this.onKeydown);
      } else if (prevProps.isOpen && !this.props.isOpen) {
        document.removeEventListener('keydown', this.onKeydown);
        if (this.timerId) {
          clearTimeout(this.timerId);
        }
      }
    };

    MultiSelectList.prototype.componentWillUnmount = function componentWillUnmount() {
      document.removeEventListener('keydown', this.onKeydown);
      this.hoverCallbacks = [];
      if (this.timerId) {
        clearTimeout(this.timerId);
      }
    };

    MultiSelectList.prototype.render = function render() {
      var _this2 = this;

      var _props = this.props,
          items = _props.items,
          getItemBody = _props.getItemBody,
          getItemSelectedHandler = _props.getItemSelectedHandler,
          toggleAllOptions = _props.toggleAllOptions;


      return React.createElement(
        'ul',
        { ref: this.props.listRef, className: styles$l[baseClass$r + '__list'], 'data-testid': 'multiselect-body-list' },
        toggleAllOptions && React.createElement(
          SelectItem$1,
          {
            isFocused: this.isItemFocused(null),
            onClick: this.handleToggleAll,
            isToggleItem: true,
            onMouseEnter: this.onToggleAllOptionHover
          },
          this.isAllItemsSelected() ? toggleAllOptions.clearLabel || 'Deselect all' : toggleAllOptions.selectLabel || 'Select all'
        ),
        items.filter(function (v) {
          return !v.props.hidden;
        }).map(function (item) {
          return React.createElement(
            SelectItem$1,
            {
              isSelected: _this2.isItemSelected(item.key),
              isFocused: _this2.isItemFocused(item.key),
              key: item.key,
              onClick: getItemSelectedHandler(item.key),
              onMouseEnter: _this2.getHoveredItemCallback(item.key)
            },
            getItemBody(item.props)
          );
        })
      );
    };

    return MultiSelectList;
  }(React.PureComponent);

  MultiSelectList.propTypes = {
    getItemBody: propTypes_3,
    isOpen: propTypes_2,
    items: propTypes_9(propTypes_17({
      key: propTypes_6,
      props: propTypes_5
    })),
    onListClose: propTypes_3,
    selectedItems: propTypes_9(propTypes_16([propTypes_6, propTypes_4])),
    getItemSelectedHandler: propTypes_3,
    onEnterKey: propTypes_3,
    focusedItemKey: propTypes_6,
    onFocusedItemChange: propTypes_3,
    listRef: propTypes_17({
      current: propTypes_12(typeof Element === 'undefined' ? function () {} : Element)
    }),
    toggleAllOptions: propTypes_17({
      onToggleAll: propTypes_3.isRequired,
      selectLabel: propTypes_6,
      clearLabel: propTypes_6
    })
  };

  var cx$p = bind.bind(styles$l);

  var baseClass$s = 'multiselect-head';

  var MultiSelectHead = React.forwardRef(function (props, ref) {
    var _cx;

    var isFocused = props.isFocused,
        disabled = props.disabled,
        children = props.children,
        restProps = objectWithoutProperties(props, ['isFocused', 'disabled', 'children']);


    return React.createElement(
      'div',
      _extends({
        ref: ref,
        className: cx$p((_cx = {}, _cx['' + baseClass$s] = true, _cx[baseClass$s + '--focused'] = isFocused, _cx[baseClass$s + '--disabled'] = disabled, _cx)),
        'data-testid': 'multiselect-head'
      }, restProps, {
        disabled: disabled,
        tabIndex: disabled ? -1 : 0
      }),
      children
    );
  });

  MultiSelectHead.propTypes = {
    children: propTypes_13,
    disabled: propTypes_2,
    isFocused: propTypes_2
  };

  var baseClass$t = 'multiselect-head__item';

  var MultiSelectHeadItem = function MultiSelectHeadItem(props) {
    var item = props.item,
        getSelectedItemBody = props.getSelectedItemBody;

    return React.createElement(
      'div',
      { className: styles$l['' + baseClass$t], 'data-testid': 'multiselect-head-item' },
      React.createElement(CloseIcon, {
        width: '14px',
        height: '14px',
        fill: '#fff',
        'data-testid': 'multiselect-remove-icon',
        onClick: function onClick(e) {
          return props.onRemove(e, item.key);
        },
        className: styles$l[baseClass$t + '-remove-icon']
      }),
      React.createElement(
        'div',
        { className: styles$l[baseClass$t + '-content'] },
        getSelectedItemBody(item.props)
      )
    );
  };

  MultiSelectHeadItem.propTypes = {
    item: propTypes_17({
      key: propTypes_6,
      props: propTypes_5
    }),
    getSelectedItemBody: propTypes_3,
    onRemove: propTypes_3
  };

  var baseClass$u = 'multiselect-head';
  var cx$q = bind.bind(styles$l);

  var Search$1 = function Search(props) {
    var _cx;

    var inputRef = props.inputRef,
        size = props.size,
        placeholder = props.placeholder,
        value = props.value,
        onChange = props.onChange,
        disabled = props.disabled,
        isDropdownOpen = props.isDropdownOpen;

    var onKeyDown = function onKeyDown(event) {
      if (event.keyCode === KeyCodes.enter) {
        event.preventDefault();
      }
    };

    return React.createElement('input', {
      ref: inputRef,
      className: cx$q((_cx = {}, _cx[baseClass$u + '__search'] = true, _cx[baseClass$u + '__search--expanded'] = placeholder || isDropdownOpen && value !== '', _cx)),
      type: 'text',
      size: size,
      placeholder: placeholder,
      name: 'select-box-input',
      'data-testid': 'multiselect-search-input',
      value: value,
      onChange: onChange,
      onKeyDown: onKeyDown,
      autoComplete: 'off',
      disabled: disabled
    });
  };

  Search$1.propTypes = {
    inputRef: propTypes_17({
      current: propTypes_12(typeof Element === 'undefined' ? function () {} : Element)
    }),
    placeholder: propTypes_6,
    value: propTypes_6,
    onChange: propTypes_3,
    disabled: propTypes_2,
    isDropdownOpen: propTypes_2,
    size: propTypes_4
  };

  var cx$r = bind.bind(styles$l);

  var baseClass$v = 'multiselect';

  var MultiSelect = function (_React$PureComponent) {
    inherits(MultiSelect, _React$PureComponent);

    function MultiSelect(props) {
      classCallCheck(this, MultiSelect);

      var _this = possibleConstructorReturn(this, _React$PureComponent.call(this, props));

      _initialiseProps$1.call(_this);

      _this.state = {
        isOpen: props.openedOnInit || props.isOpen || false,
        searchPhrase: '',
        focusedItemKey: null,
        isFocused: false
      };

      _this.timeouts = [];
      _this.containerRef = React.createRef();
      _this.searchInputRef = React.createRef();
      _this.headRef = React.createRef();
      _this.listRef = React.createRef();
      _this.selectedItemsContainerRef = React.createRef();
      return _this;
    }

    MultiSelect.prototype.componentDidMount = function componentDidMount() {
      if (this.state.isOpen) {
        this.props.onDropdownToggle(true);
        this.onBodyOpen();
      }
    };

    MultiSelect.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
      var hasIsOpenChanged = this.getIsOpen(prevProps, prevState) !== this.getIsOpen();

      if (this.getIsOpen() && hasIsOpenChanged) {
        this.onBodyOpen();
      } else if (!this.getIsOpen() && hasIsOpenChanged) {
        this.onBodyClose();
      }

      if (this.shouldScrollItemsContainer(prevProps) && this.selectedItemsContainerRef.current) {
        this.selectedItemsContainerRef.current.scrollTop = this.selectedItemsContainerRef.current.scrollHeight;
      }
    };

    MultiSelect.prototype.componentWillUnmount = function componentWillUnmount() {
      this.onBodyClose();
      document.removeEventListener('keydown', this.onArrowKeydown);
      document.removeEventListener('keydown', this.onBackspaceKeydown);
      this.timeouts.forEach(function (timerId) {
        clearTimeout(timerId);
      });
    };

    MultiSelect.prototype.render = function render() {
      var _cx,
          _this2 = this,
          _cx2;

      var _props = this.props,
          id = _props.id,
          className = _props.className,
          error = _props.error,
          items = _props.items,
          getItemBody = _props.getItemBody,
          getSelectedItemBody = _props.getSelectedItemBody,
          search = _props.search,
          disabled = _props.disabled,
          toggleAllOptions = _props.toggleAllOptions,
          maxItemsContainerHeight = _props.maxItemsContainerHeight,
          dataTestId = _props.dataTestId;

      var selectedItems = this.getSelectedItems();
      var _state = this.state,
          searchPhrase = _state.searchPhrase,
          focusedItemKey = _state.focusedItemKey,
          isFocused = _state.isFocused;

      var isOpen = this.getIsOpen();
      var selectedItemsModels = this.getSelectedItemsModels();
      var filteredItems = items.filter(this.filterItem);

      var mergedClassNames = getMergedClassNames(cx$r((_cx = {}, _cx[baseClass$v] = true, _cx[baseClass$v + '--error'] = error, _cx)), className);
      var headItemsStyles = selectedItems && selectedItems.length > 0 ? baseClass$v + '-head__items' : baseClass$v + '-head__items-empty';
      return React.createElement(
        'div',
        { ref: this.containerRef, className: mergedClassNames, id: id, 'data-testid': dataTestId },
        React.createElement(
          MultiSelectHead,
          {
            isFocused: isOpen || isFocused,
            ref: this.headRef,
            onClick: this.onSelectHeadClick,
            onFocus: this.onSelectHeadFocus,
            onBlur: this.onSelectHeadBlur,
            disabled: disabled
          },
          React.createElement(
            'div',
            {
              className: styles$l[headItemsStyles],
              style: { maxHeight: maxItemsContainerHeight },
              ref: this.selectedItemsContainerRef
            },
            selectedItemsModels && selectedItemsModels.map(function (item) {
              return React.createElement(MultiSelectHeadItem, {
                key: item.key,
                getSelectedItemBody: getSelectedItemBody,
                item: item,
                onRemove: _this2.handleItemRemove
              });
            }),
            search ? React.createElement(Search$1, {
              isDropdownOpen: isOpen,
              inputRef: this.searchInputRef,
              placeholder: this.getSearchPlaceholder(selectedItems),
              size: this.getInputSize(selectedItems),
              value: searchPhrase,
              onChange: this.onSearchChange,
              disabled: disabled
            }) : this.getSelectedItemsPlaceholder(selectedItems)
          ),
          React.createElement(MenuDownIcon, {
            'data-testid': 'multiselect-down-icon',
            className: styles$l[baseClass$v + '__dropdown-icon'],
            width: '24px',
            height: '24px',
            fill: '#424d57'
          })
        ),
        React.createElement(
          'div',
          {
            className: cx$r((_cx2 = {}, _cx2[baseClass$v + '-body'] = true, _cx2[baseClass$v + '-body--visible'] = isOpen && filteredItems.length > 0, _cx2))
          },
          React.createElement(MultiSelectList, {
            listRef: this.listRef,
            getItemBody: getItemBody,
            isOpen: isOpen,
            toggleAllOptions: toggleAllOptions,
            onListClose: this.hideSelectBody,
            items: filteredItems,
            getSelectedItemBody: getSelectedItemBody,
            selectedItems: selectedItems,
            getItemSelectedHandler: this.getItemSelectedHandler,
            onEnterKey: this.handleEnterKeyUse,
            onFocusedItemChange: this.changeFocusedItem,
            focusedItemKey: focusedItemKey
          })
        )
      );
    };

    return MultiSelect;
  }(React.PureComponent);

  var _initialiseProps$1 = function _initialiseProps() {
    var _this3 = this;

    this.onDocumentClick = function (event) {
      if (_this3.getIsOpen() && _this3.containerRef.current && !_this3.containerRef.current.contains(event.target)) {
        _this3.listRef.current.scrollTop = 0;
        _this3.hideSelectBody();
      }
    };

    this.onSearchChange = function (event) {
      _this3.setState({
        isOpen: true,
        searchPhrase: event.target.value
      }, function () {
        _this3.props.onDropdownToggle(true);
        var filteredItems = _this3.props.items.filter(function (v) {
          return _this3.filterItem(v) && _this3.props.selected !== v.key;
        });
        var focusedItemKey = filteredItems.length > 0 ? filteredItems[0].key : null;

        _this3.setState({
          focusedItemKey: focusedItemKey
        });
      });
    };

    this.onBodyOpen = function () {
      document.addEventListener('click', _this3.onDocumentClick);
      document.addEventListener('keydown', _this3.onBackspaceKeydown);
      _this3.delayedInputFocus();
    };

    this.onBodyClose = function () {
      document.removeEventListener('click', _this3.onDocumentClick);
      if (!_this3.state.isFocused) {
        document.removeEventListener('keydown', _this3.onBackspaceKeydown);
      }
    };

    this.onSelectHeadClick = function (event) {
      event.preventDefault();
      if (_this3.props.disabled) {
        return;
      }
      if (!_this3.getIsOpen()) {
        _this3.delayedInputFocus();
        _this3.showSelectBody();
      } else {
        _this3.hideSelectBody();
      }
    };

    this.onSelectHeadFocus = function () {
      _this3.setState({
        isFocused: true
      });
      document.addEventListener('keydown', _this3.onBackspaceKeydown);
      if (!_this3.state.isOpen) {
        document.addEventListener('keydown', _this3.onArrowKeydown);
      }
    };

    this.onSelectHeadBlur = function () {
      _this3.setState({
        isFocused: false
      });
      document.removeEventListener('keydown', _this3.onArrowKeydown);
      if (!_this3.state.isOpen) {
        document.removeEventListener('keydown', _this3.onBackspaceKeydown);
      }
    };

    this.onArrowKeydown = function (e) {
      if (e.keyCode === KeyCodes.arrowDown || e.keyCode === KeyCodes.arrowUp) {
        e.preventDefault();
        if (!_this3.state.isOpen) {
          _this3.showSelectBody();
        }
      }
    };

    this.onBackspaceKeydown = function (e) {
      var isCorrectKeyCode = e.keyCode === KeyCodes.backspace;
      var isSearchPhraseEmpty = _this3.state.searchPhrase === '';
      var isAnyItemsToRemove = _this3.props.selected && _this3.props.selected.length > 0;
      if (isCorrectKeyCode && isSearchPhraseEmpty && isAnyItemsToRemove) {
        e.preventDefault();
        var lastItemKey = _this3.props.selected[_this3.props.selected.length - 1];
        _this3.delayedItemRemove(lastItemKey);
      }
    };

    this.getItemSelectedHandler = function (itemKey) {
      return function (event) {
        event.preventDefault();
        _this3.handleItemSelect(itemKey);
        _this3.delayedInputFocus();
      };
    };

    this.getSelectedItems = function () {
      var selected = _this3.props.selected;

      if (selected === null) {
        return null;
      }
      return selected;
    };

    this.getSelectedItemsModels = function () {
      var _props2 = _this3.props,
          selected = _props2.selected,
          items = _props2.items;

      if (selected === null) {
        return null;
      }

      return selected.reduce(function (acc, selectedItemId) {
        var selectedItemModel = items.find(function (item) {
          return item.key === selectedItemId;
        });
        if (selectedItemModel) {
          return [].concat(acc, [selectedItemModel]);
        }
        return acc;
      }, []);
    };

    this.getDefaultInputSize = function (selectedItems) {
      if ((!selectedItems || selectedItems.length === 0) && _this3.props.placeholder) return _this3.props.placeholder.length;
      return 1;
    };

    this.getInputSize = function (selectedItems) {
      var defaultInputSize = _this3.getDefaultInputSize(selectedItems);

      if (_this3.state.searchPhrase.length > defaultInputSize) {
        return _this3.state.searchPhrase.length;
      }
      return defaultInputSize;
    };

    this.getSearchPlaceholder = function (selectedItems) {
      if ((!selectedItems || selectedItems.length === 0) && _this3.props.placeholder) {
        return _this3.props.placeholder;
      }
      return '';
    };

    this.getSelectedItemsPlaceholder = function (selectedItems) {
      if ((!selectedItems || selectedItems.length === 0) && _this3.props.placeholder) {
        return React.createElement(
          'div',
          { className: styles$l[baseClass$v + '__placeholder'] },
          _this3.props.placeholder
        );
      }
      return null;
    };

    this.getIsOpen = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this3.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this3.state;

      if (props.disabled) {
        return false;
      }
      return _this3.isIsOpenControlled() ? props.isOpen : state.isOpen;
    };

    this.shouldScrollItemsContainer = function (prevProps) {
      if (_this3.props.selected === null || !_this3.selectedItemsContainerRef.current) {
        return false;
      }
      return prevProps.selected === null && _this3.props.selected || prevProps.selected.length < _this3.props.selected.length;
    };

    this.handleItemSelect = function (itemKey) {
      _this3.setState({
        searchPhrase: ''
      });
      _this3.props.onItemSelect(itemKey);
      if (_this3.props.shouldCloseOnSelect) {
        _this3.hideSelectBody();
      }
    };

    this.handleEnterKeyUse = function (itemKey) {
      return _this3.handleItemSelect(itemKey);
    };

    this.handleItemRemove = function (e, itemKey) {
      e.preventDefault();
      e.stopPropagation();
      _this3.delayedItemRemove(itemKey);
    };

    this.showSelectBody = function () {
      _this3.setState({
        isOpen: true,
        searchPhrase: ''
      }, function () {
        _this3.props.onDropdownToggle(true);
      });
    };

    this.hideSelectBody = function () {
      _this3.setState({
        isOpen: false,
        searchPhrase: '',
        focusedItemKey: _this3.props.toggleAllOptions || !_this3.props.items[0] ? null : _this3.props.items[0].key
      }, function () {
        _this3.props.onDropdownToggle(false);
        if (_this3.headRef.current) {
          _this3.headRef.current.focus();
        }
      });
    };

    this.delayedInputFocus = function () {
      if (_this3.props.search && _this3.searchInputRef.current) {
        var timerId = setTimeout(function () {
          _this3.searchInputRef.current.focus();
        }, 0);
        _this3.timeouts = [].concat(_this3.timeouts, [timerId]);
      }
    };

    this.delayedItemRemove = function (itemKey) {
      var timerId = setTimeout(function () {
        _this3.props.onItemRemove(itemKey);
      }, 0);
      _this3.timeouts = [].concat(_this3.timeouts, [timerId]);
    };

    this.changeFocusedItem = function (itemKey) {
      if (_this3.props.toggleAllOptions && !itemKey) {
        return _this3.setState({
          focusedItemKey: null
        });
      }
      if (!itemKey) {
        return _this3.setState({
          focusedItemKey: _this3.props.items[0] ? _this3.props.items[0].key : null
        });
      }
      return _this3.setState({
        focusedItemKey: itemKey
      });
    };

    this.isIsOpenControlled = function () {
      return _this3.props.isOpen !== undefined;
    };

    this.filterItem = function (item) {
      var searchProperty = _this3.props.searchProperty;
      var searchPhrase = _this3.state.searchPhrase;


      if (searchPhrase) {
        if (typeof searchProperty === 'string') {
          if (!(searchProperty in item.props)) {
            return false;
          }

          return item.props[searchProperty].toLocaleLowerCase().includes(searchPhrase.toLocaleLowerCase());
        } else if (Array.isArray(searchProperty) && searchProperty.length > 0) {
          var validSearchProperties = searchProperty.filter(function (p) {
            return item.props[p];
          });

          if (validSearchProperties.length === 0) {
            return false;
          }
          return validSearchProperties.some(function (p) {
            return item.props[p].toLocaleLowerCase().includes(searchPhrase.toLocaleLowerCase());
          });
        }
      }

      return true;
    };
  };

  MultiSelect.propTypes = {
    id: propTypes_6,
    className: propTypes_6,
    dataTestId: propTypes_6,
    error: propTypes_6,
    getItemBody: propTypes_3.isRequired,
    getSelectedItemBody: propTypes_3.isRequired,
    onItemSelect: propTypes_3.isRequired,
    onItemRemove: propTypes_3.isRequired,
    items: propTypes_9(propTypes_17({
      key: propTypes_6,
      props: propTypes_5
    })),
    /**
     * Use when you need to control multiselect dropdown visibility in its parent component
     * Remember to pass `onDropdownToggle` method as props, thanks to that you will be able to
     * update your state
     */
    isOpen: propTypes_2,
    placeholder: propTypes_6,
    searchProperty: propTypes_16([propTypes_6, propTypes_9(propTypes_6)]),
    selected: propTypes_9(propTypes_16([propTypes_6, propTypes_4])),
    search: propTypes_2,
    /**
     * If `true` multiselect dropdown will be closed after option select/deselect
     */
    shouldCloseOnSelect: propTypes_2,
    disabled: propTypes_2,
    openedOnInit: propTypes_2,
    toggleAllOptions: propTypes_17({
      onToggleAll: propTypes_3.isRequired,
      selectLabel: propTypes_6,
      clearLabel: propTypes_6
    }),
    maxItemsContainerHeight: propTypes_4.isRequired,
    onDropdownToggle: propTypes_3
  };

  MultiSelect.defaultProps = {
    items: [],
    selected: null,
    shouldCloseOnSelect: false,
    onDropdownToggle: function onDropdownToggle() {}
  };

  var MultiSelectField = function MultiSelectField(props) {
    var inline = props.inline,
        error = props.error,
        description = props.description,
        labelText = props.labelText,
        labelAdornment = props.labelAdornment,
        className = props.className,
        id = props.id,
        fieldClassName = props.fieldClassName,
        restProps = objectWithoutProperties(props, ['inline', 'error', 'description', 'labelText', 'labelAdornment', 'className', 'id', 'fieldClassName']);


    return React.createElement(
      TextField,
      {
        inline: inline,
        error: error,
        description: description,
        labelText: labelText,
        labelAdornment: labelAdornment,
        className: className,
        htmlFor: id
      },
      React.createElement(MultiSelect, _extends({}, restProps, {
        className: fieldClassName,
        id: id,
        error: error
      }))
    );
  };

  MultiSelectField.propTypes = {
    labelText: propTypes_6,
    /**  specifies additional decorative element rendered at the end of the label */
    labelAdornment: propTypes_13,
    id: propTypes_6.isRequired,
    className: propTypes_6,
    fieldClassName: propTypes_6,
    inline: propTypes_2,
    error: propTypes_6,
    description: propTypes_13
  };

  var styles$m = { "numeric-input": "lc-numeric-input", "numeric-input__decrement": "lc-numeric-input__decrement", "numeric-input__increment": "lc-numeric-input__increment", "numeric-input--disabled": "lc-numeric-input--disabled", "numeric-input--error": "lc-numeric-input--error", "numeric-input--no-controls": "lc-numeric-input--no-controls" };

  var cx$s = bind.bind(styles$m);
  var baseClass$w = 'numeric-input';

  var NumericInput = function (_React$PureComponent) {
    inherits(NumericInput, _React$PureComponent);

    function NumericInput() {
      var _temp, _this, _ret;

      classCallCheck(this, NumericInput);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.hasMin = function () {
        return _this.props.min !== undefined;
      }, _this.hasMax = function () {
        return _this.props.max !== undefined;
      }, _this.onKeyDown = function (e) {
        if (e.keyCode === KeyCodes.arrowDown) {
          e.preventDefault();
          _this.changeValue(-1);
        }
        if (e.keyCode === KeyCodes.arrowUp) {
          e.preventDefault();
          _this.changeValue(1);
        }
      }, _this.getComponentStyles = function () {
        if (_this.props.width) {
          return _extends({}, _this.props.style || {}, {
            width: _this.props.width
          });
        }

        return _this.props.style;
      }, _this.addKeyboardEventListeners = function () {
        document.addEventListener('keydown', _this.onKeyDown);
      }, _this.removeKeyboardEventListeners = function () {
        document.removeEventListener('keydown', _this.onKeyDown);
      }, _this.changeValue = function (val) {
        if (_this.props.value !== '' && _this.props.value !== '-') {
          _this.callOnChange(_this.calcValue(parseInt(_this.props.value, 10) + val));
        } else if (_this.hasMin() && val < _this.props.min) {
          _this.callOnChange(_this.props.min);
        } else if (_this.hasMax() && val > _this.props.max) {
          _this.callOnChange(_this.props.max);
        } else {
          _this.callOnChange(val);
        }
      }, _this.handleChange = function (e) {
        e.preventDefault();
        e.stopPropagation();
        var value = _this.props.value;

        var inputVal = e.target.value.replace(/((?!([-]|([-]?\d+))).)/, '');

        if (inputVal === '') {
          _this.callOnChange('');
          return;
        }

        if (inputVal === '-') {
          _this.callOnChange('-');
          return;
        }

        var val = parseInt(inputVal, 10);

        if (String(val) !== inputVal) {
          _this.callOnChange(value);
        } else {
          var calculatedValue = _this.calcValue(val);
          _this.callOnChange(calculatedValue);
        }
      }, _this.callOnChange = function (value) {
        return _this.props.onChange(String(value));
      }, _this.calcValue = function (val) {
        var _this$props = _this.props,
            max = _this$props.max,
            min = _this$props.min;


        if (_this.hasMax() && val > max) {
          return max;
        }

        if (_this.hasMin() && val < min) {
          return min;
        }
        return val;
      }, _this.hasReachedTheLimit = function (value, margin) {
        return margin !== undefined && parseInt(value, 10) === margin;
      }, _this.handleIncrementClick = function () {
        _this.changeValue(1);
      }, _this.handleDecrementClick = function () {
        _this.changeValue(-1);
      }, _this.handleFocus = function () {
        _this.addKeyboardEventListeners();
      }, _this.handleBlur = function () {
        _this.removeKeyboardEventListeners();
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    NumericInput.prototype.componentDidMount = function componentDidMount() {
      if (this.hasMax() && parseInt(this.props.value, 10) > this.props.max) {
        this.callOnChange(this.props.max);
      }

      if (this.hasMin() && parseInt(this.props.value, 10) < this.props.min) {
        this.callOnChange(this.props.min);
      }
    };

    NumericInput.prototype.componentWillUnmount = function componentWillUnmount() {
      this.removeKeyboardEventListeners();
    };

    NumericInput.prototype.render = function render() {
      var _cx;

      var _props = this.props,
          error = _props.error,
          className = _props.className,
          max = _props.max,
          min = _props.min,
          onChange = _props.onChange,
          noControls = _props.noControls,
          value = _props.value,
          width = _props.width,
          disabled = _props.disabled,
          style = _props.style,
          restProps = objectWithoutProperties(_props, ['error', 'className', 'max', 'min', 'onChange', 'noControls', 'value', 'width', 'disabled', 'style']);


      var mergedClassNames = getMergedClassNames(cx$s((_cx = {}, _cx[baseClass$w] = true, _cx[baseClass$w + '--error'] = error, _cx[baseClass$w + '--no-controls'] = noControls, _cx[baseClass$w + '--disabled'] = disabled, _cx)), className);

      return React.createElement(
        'div',
        { className: mergedClassNames, style: this.getComponentStyles() },
        React.createElement('input', _extends({
          type: 'text'
        }, restProps, {
          value: value,
          disabled: disabled,
          onChange: this.handleChange,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          min: min,
          max: max
        })),
        !noControls && React.createElement(
          React.Fragment,
          null,
          React.createElement('button', {
            tabIndex: '-1',
            disabled: disabled || this.hasReachedTheLimit(value, max),
            onClick: this.handleIncrementClick,
            'aria-label': 'Increment value',
            className: styles$m[baseClass$w + '__increment'],
            type: 'button'
          }),
          React.createElement('button', {
            tabIndex: '-1',
            disabled: disabled || this.hasReachedTheLimit(value, min),
            'aria-label': 'Decrement value',
            className: styles$m[baseClass$w + '__decrement'],
            onClick: this.handleDecrementClick,
            type: 'button'
          })
        )
      );
    };

    return NumericInput;
  }(React.PureComponent);

  NumericInput.propTypes = {
    id: propTypes_6,
    className: propTypes_6,
    error: propTypes_6,
    value: propTypes_6,
    max: propTypes_4,
    min: propTypes_4,
    disabled: propTypes_2,
    /**
     * When equal `true` the up and down arrows won't be displayed
     */
    noControls: propTypes_2,
    style: propTypes_5,
    /**
     * Static value of input width i.e. "120px" or "100%"  
     */
    width: propTypes_6,
    /**
     * It's called with string value: '', '-' or '{number}'
     */
    onChange: propTypes_3.isRequired
  };

  var NumericInputField = function NumericInputField(props) {
    var inline = props.inline,
        error = props.error,
        description = props.description,
        labelText = props.labelText,
        labelAdornment = props.labelAdornment,
        className = props.className,
        id = props.id,
        fieldClassName = props.fieldClassName,
        restProps = objectWithoutProperties(props, ['inline', 'error', 'description', 'labelText', 'labelAdornment', 'className', 'id', 'fieldClassName']);


    return React.createElement(
      TextField,
      {
        inline: inline,
        error: error,
        description: description,
        labelText: labelText,
        labelAdornment: labelAdornment,
        className: className,
        htmlFor: id
      },
      React.createElement(NumericInput, _extends({}, restProps, {
        className: fieldClassName,
        id: id,
        error: error
      }))
    );
  };

  NumericInputField.propTypes = {
    labelText: propTypes_6,
    /**  specifies additional decorative element rendered at the end of the label */
    labelAdornment: propTypes_13,
    id: propTypes_6.isRequired,
    className: propTypes_6,
    fieldClassName: propTypes_6,
    inline: propTypes_2,
    error: propTypes_6,
    description: propTypes_13
  };

  var LocaleUtils = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.formatDay = formatDay;
  exports.formatMonthTitle = formatMonthTitle;
  exports.formatWeekdayShort = formatWeekdayShort;
  exports.formatWeekdayLong = formatWeekdayLong;
  exports.getFirstDayOfWeek = getFirstDayOfWeek;
  exports.getMonths = getMonths;
  var WEEKDAYS_LONG = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

  var WEEKDAYS_SHORT = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];

  var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

  function formatDay(day) {
    return day.toDateString();
  }

  function formatMonthTitle(d) {
    return MONTHS[d.getMonth()] + ' ' + d.getFullYear();
  }

  function formatWeekdayShort(i) {
    return WEEKDAYS_SHORT[i];
  }

  function formatWeekdayLong(i) {
    return WEEKDAYS_LONG[i];
  }

  function getFirstDayOfWeek() {
    return 0;
  }

  function getMonths() {
    return MONTHS;
  }

  exports.default = {
    formatDay: formatDay,
    formatMonthTitle: formatMonthTitle,
    formatWeekdayShort: formatWeekdayShort,
    formatWeekdayLong: formatWeekdayLong,
    getFirstDayOfWeek: getFirstDayOfWeek,
    getMonths: getMonths
  };

  });

  var LocaleUtils$1 = unwrapExports(LocaleUtils);
  var LocaleUtils_1 = LocaleUtils.formatDay;
  var LocaleUtils_2 = LocaleUtils.formatMonthTitle;
  var LocaleUtils_3 = LocaleUtils.formatWeekdayShort;
  var LocaleUtils_4 = LocaleUtils.formatWeekdayLong;
  var LocaleUtils_5 = LocaleUtils.getFirstDayOfWeek;
  var LocaleUtils_6 = LocaleUtils.getMonths;

  var LocaleUtils$2 = /*#__PURE__*/Object.freeze({
    default: LocaleUtils$1,
    __moduleExports: LocaleUtils,
    formatDay: LocaleUtils_1,
    formatMonthTitle: LocaleUtils_2,
    formatWeekdayShort: LocaleUtils_3,
    formatWeekdayLong: LocaleUtils_4,
    getFirstDayOfWeek: LocaleUtils_5,
    getMonths: LocaleUtils_6
  });

  var keys = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var LEFT = exports.LEFT = 37;
  var UP = exports.UP = 38;
  var RIGHT = exports.RIGHT = 39;
  var DOWN = exports.DOWN = 40;
  var ENTER = exports.ENTER = 13;
  var SPACE = exports.SPACE = 32;
  var ESC = exports.ESC = 27;
  var TAB = exports.TAB = 9;

  });

  var keys$1 = unwrapExports(keys);
  var keys_1 = keys.LEFT;
  var keys_2 = keys.UP;
  var keys_3 = keys.RIGHT;
  var keys_4 = keys.DOWN;
  var keys_5 = keys.ENTER;
  var keys_6 = keys.SPACE;
  var keys_7 = keys.ESC;
  var keys_8 = keys.TAB;

  var keys$2 = /*#__PURE__*/Object.freeze({
    default: keys$1,
    __moduleExports: keys,
    LEFT: keys_1,
    UP: keys_2,
    RIGHT: keys_3,
    DOWN: keys_4,
    ENTER: keys_5,
    SPACE: keys_6,
    ESC: keys_7,
    TAB: keys_8
  });

  var _LocaleUtils = ( LocaleUtils$2 && LocaleUtils$1 ) || LocaleUtils$2;

  var _keys = ( keys$2 && keys$1 ) || keys$2;

  var Caption_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



  var _react2 = _interopRequireDefault(React__default);



  var _propTypes2 = _interopRequireDefault(propTypes);



  var _LocaleUtils2 = _interopRequireDefault(_LocaleUtils);



  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Caption = function (_Component) {
    _inherits(Caption, _Component);

    function Caption(props) {
      _classCallCheck(this, Caption);

      var _this = _possibleConstructorReturn(this, (Caption.__proto__ || Object.getPrototypeOf(Caption)).call(this, props));

      _this.handleKeyUp = _this.handleKeyUp.bind(_this);
      return _this;
    }

    _createClass(Caption, [{
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.locale !== this.props.locale || nextProps.classNames !== this.props.classNames || nextProps.date.getMonth() !== this.props.date.getMonth() || nextProps.date.getFullYear() !== this.props.date.getFullYear();
      }
    }, {
      key: 'handleKeyUp',
      value: function handleKeyUp(e) {
        if (e.keyCode === _keys.ENTER) {
          this.props.onClick(e);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            classNames = _props.classNames,
            date = _props.date,
            months = _props.months,
            locale = _props.locale,
            localeUtils = _props.localeUtils,
            onClick = _props.onClick;

        return _react2.default.createElement(
          'div',
          { className: classNames.caption, role: 'heading' },
          _react2.default.createElement(
            'div',
            { onClick: onClick, onKeyUp: this.handleKeyUp },
            months ? months[date.getMonth()] + ' ' + date.getFullYear() : localeUtils.formatMonthTitle(date, locale)
          )
        );
      }
    }]);

    return Caption;
  }(React__default.Component);

  Caption.propTypes = {
    date: _propTypes2.default.instanceOf(Date),
    months: _propTypes2.default.arrayOf(_propTypes2.default.string),
    locale: _propTypes2.default.string,
    localeUtils: _propTypes2.default.object,
    onClick: _propTypes2.default.func,
    classNames: _propTypes2.default.shape({
      caption: _propTypes2.default.string.isRequired
    }).isRequired
  };
  Caption.defaultProps = {
    localeUtils: _LocaleUtils2.default
  };
  exports.default = Caption;

  });

  var Caption = unwrapExports(Caption_1);

  var Caption$1 = /*#__PURE__*/Object.freeze({
    default: Caption,
    __moduleExports: Caption_1
  });

  var classNames = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  // Proxy object to map classnames when css modules are not used

  exports.default = {
    container: 'DayPicker',
    wrapper: 'DayPicker-wrapper',
    interactionDisabled: 'DayPicker--interactionDisabled',
    months: 'DayPicker-Months',
    month: 'DayPicker-Month',

    navBar: 'DayPicker-NavBar',
    navButtonPrev: 'DayPicker-NavButton DayPicker-NavButton--prev',
    navButtonNext: 'DayPicker-NavButton DayPicker-NavButton--next',
    navButtonInteractionDisabled: 'DayPicker-NavButton--interactionDisabled',

    caption: 'DayPicker-Caption',
    weekdays: 'DayPicker-Weekdays',
    weekdaysRow: 'DayPicker-WeekdaysRow',
    weekday: 'DayPicker-Weekday',
    body: 'DayPicker-Body',
    week: 'DayPicker-Week',
    weekNumber: 'DayPicker-WeekNumber',
    day: 'DayPicker-Day',
    footer: 'DayPicker-Footer',
    todayButton: 'DayPicker-TodayButton',

    // default modifiers
    today: 'today',
    selected: 'selected',
    disabled: 'disabled',
    outside: 'outside'
  };

  });

  var classNames$1 = unwrapExports(classNames);

  var classNames$2 = /*#__PURE__*/Object.freeze({
    default: classNames$1,
    __moduleExports: classNames
  });

  var _classNames = ( classNames$2 && classNames$1 ) || classNames$2;

  var Navbar_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



  var _react2 = _interopRequireDefault(React__default);



  var _propTypes2 = _interopRequireDefault(propTypes);



  var _classNames2 = _interopRequireDefault(_classNames);



  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Navbar = function (_Component) {
    _inherits(Navbar, _Component);

    function Navbar() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, Navbar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Navbar.__proto__ || Object.getPrototypeOf(Navbar)).call.apply(_ref, [this].concat(args))), _this), _this.handleNextClick = function () {
        if (_this.props.onNextClick) {
          _this.props.onNextClick();
        }
      }, _this.handlePreviousClick = function () {
        if (_this.props.onPreviousClick) {
          _this.props.onPreviousClick();
        }
      }, _this.handleNextKeyDown = function (e) {
        if (e.keyCode !== _keys.ENTER && e.keyCode !== _keys.SPACE) {
          return;
        }
        e.preventDefault();
        _this.handleNextClick();
      }, _this.handlePreviousKeyDown = function (e) {
        if (e.keyCode !== _keys.ENTER && e.keyCode !== _keys.SPACE) {
          return;
        }
        e.preventDefault();
        _this.handlePreviousClick();
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Navbar, [{
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.labels !== this.props.labels || nextProps.dir !== this.props.dir || this.props.showPreviousButton !== nextProps.showPreviousButton || this.props.showNextButton !== nextProps.showNextButton;
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            classNames = _props.classNames,
            className = _props.className,
            showPreviousButton = _props.showPreviousButton,
            showNextButton = _props.showNextButton,
            labels = _props.labels,
            dir = _props.dir;


        var previousClickHandler = void 0;
        var nextClickHandler = void 0;
        var previousKeyDownHandler = void 0;
        var nextKeyDownHandler = void 0;
        var shouldShowPrevious = void 0;
        var shouldShowNext = void 0;

        if (dir === 'rtl') {
          previousClickHandler = this.handleNextClick;
          nextClickHandler = this.handlePreviousClick;
          previousKeyDownHandler = this.handleNextKeyDown;
          nextKeyDownHandler = this.handlePreviousKeyDown;
          shouldShowNext = showPreviousButton;
          shouldShowPrevious = showNextButton;
        } else {
          previousClickHandler = this.handlePreviousClick;
          nextClickHandler = this.handleNextClick;
          previousKeyDownHandler = this.handlePreviousKeyDown;
          nextKeyDownHandler = this.handleNextKeyDown;
          shouldShowNext = showNextButton;
          shouldShowPrevious = showPreviousButton;
        }

        var previousClassName = shouldShowPrevious ? classNames.navButtonPrev : classNames.navButtonPrev + ' ' + classNames.navButtonInteractionDisabled;

        var nextClassName = shouldShowNext ? classNames.navButtonNext : classNames.navButtonNext + ' ' + classNames.navButtonInteractionDisabled;

        var previousButton = _react2.default.createElement('span', {
          tabIndex: '0',
          role: 'button',
          'aria-label': labels.previousMonth,
          key: 'previous',
          className: previousClassName,
          onKeyDown: shouldShowPrevious ? previousKeyDownHandler : undefined,
          onClick: shouldShowPrevious ? previousClickHandler : undefined
        });

        var nextButton = _react2.default.createElement('span', {
          tabIndex: '0',
          role: 'button',
          'aria-label': labels.nextMonth,
          key: 'right',
          className: nextClassName,
          onKeyDown: shouldShowNext ? nextKeyDownHandler : undefined,
          onClick: shouldShowNext ? nextClickHandler : undefined
        });

        return _react2.default.createElement(
          'div',
          { className: className || classNames.navBar },
          dir === 'rtl' ? [nextButton, previousButton] : [previousButton, nextButton]
        );
      }
    }]);

    return Navbar;
  }(React__default.Component);

  Navbar.propTypes = {
    classNames: _propTypes2.default.shape({
      navBar: _propTypes2.default.string.isRequired,
      navButtonPrev: _propTypes2.default.string.isRequired,
      navButtonNext: _propTypes2.default.string.isRequired,
      navButtonInteractionDisabled: _propTypes2.default.string.isRequired
    }),
    className: _propTypes2.default.string,
    showPreviousButton: _propTypes2.default.bool,
    showNextButton: _propTypes2.default.bool,
    onPreviousClick: _propTypes2.default.func,
    onNextClick: _propTypes2.default.func,
    dir: _propTypes2.default.string,
    labels: _propTypes2.default.shape({
      previousMonth: _propTypes2.default.string.isRequired,
      nextMonth: _propTypes2.default.string.isRequired
    })
  };
  Navbar.defaultProps = {
    classNames: _classNames2.default,
    dir: 'ltr',
    labels: {
      previousMonth: 'Previous Month',
      nextMonth: 'Next Month'
    },
    showPreviousButton: true,
    showNextButton: true
  };
  exports.default = Navbar;

  });

  var Navbar = unwrapExports(Navbar_1);

  var Navbar$1 = /*#__PURE__*/Object.freeze({
    default: Navbar,
    __moduleExports: Navbar_1
  });

  var Weekdays_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



  var _react2 = _interopRequireDefault(React__default);



  var _propTypes2 = _interopRequireDefault(propTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Weekdays = function (_Component) {
    _inherits(Weekdays, _Component);

    function Weekdays() {
      _classCallCheck(this, Weekdays);

      return _possibleConstructorReturn(this, (Weekdays.__proto__ || Object.getPrototypeOf(Weekdays)).apply(this, arguments));
    }

    _createClass(Weekdays, [{
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps) {
        return this.props !== nextProps;
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            classNames = _props.classNames,
            firstDayOfWeek = _props.firstDayOfWeek,
            showWeekNumbers = _props.showWeekNumbers,
            weekdaysLong = _props.weekdaysLong,
            weekdaysShort = _props.weekdaysShort,
            locale = _props.locale,
            localeUtils = _props.localeUtils,
            weekdayElement = _props.weekdayElement;

        var days = [];
        for (var i = 0; i < 7; i += 1) {
          var weekday = (i + firstDayOfWeek) % 7;
          var elementProps = {
            key: i,
            className: classNames.weekday,
            weekday: weekday,
            weekdaysLong: weekdaysLong,
            weekdaysShort: weekdaysShort,
            localeUtils: localeUtils,
            locale: locale
          };
          var element = _react2.default.isValidElement(weekdayElement) ? _react2.default.cloneElement(weekdayElement, elementProps) : _react2.default.createElement(weekdayElement, elementProps);
          days.push(element);
        }

        return _react2.default.createElement(
          'div',
          { className: classNames.weekdays, role: 'rowgroup' },
          _react2.default.createElement(
            'div',
            { className: classNames.weekdaysRow, role: 'row' },
            showWeekNumbers && _react2.default.createElement('div', { className: classNames.weekday }),
            days
          )
        );
      }
    }]);

    return Weekdays;
  }(React__default.Component);

  Weekdays.propTypes = {
    classNames: _propTypes2.default.shape({
      weekday: _propTypes2.default.string.isRequired,
      weekdays: _propTypes2.default.string.isRequired,
      weekdaysRow: _propTypes2.default.string.isRequired
    }).isRequired,

    firstDayOfWeek: _propTypes2.default.number.isRequired,
    weekdaysLong: _propTypes2.default.arrayOf(_propTypes2.default.string),
    weekdaysShort: _propTypes2.default.arrayOf(_propTypes2.default.string),
    showWeekNumbers: _propTypes2.default.bool,
    locale: _propTypes2.default.string.isRequired,
    localeUtils: _propTypes2.default.object.isRequired,
    weekdayElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func, _propTypes2.default.instanceOf(_react2.default.Component)])
  };
  exports.default = Weekdays;

  });

  var Weekdays = unwrapExports(Weekdays_1);

  var Weekdays$1 = /*#__PURE__*/Object.freeze({
    default: Weekdays,
    __moduleExports: Weekdays_1
  });

  var DateUtils = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.clone = clone;
  exports.isDate = isDate;
  exports.addMonths = addMonths;
  exports.isSameDay = isSameDay;
  exports.isSameMonth = isSameMonth;
  exports.isDayBefore = isDayBefore;
  exports.isDayAfter = isDayAfter;
  exports.isPastDay = isPastDay;
  exports.isFutureDay = isFutureDay;
  exports.isDayBetween = isDayBetween;
  exports.addDayToRange = addDayToRange;
  exports.isDayInRange = isDayInRange;
  exports.getWeekNumber = getWeekNumber;
  /**
   * Clone a date object.
   *
   * @export
   * @param  {Date} d The date to clone
   * @return {Date} The cloned date
   */
  function clone(d) {
    return new Date(d.getTime());
  }

  /**
   * Return `true` if the passed value is a valid JavaScript Date object.
   *
   * @export
   * @param {any} value
   * @returns {Boolean}
   */
  function isDate(value) {
    return value instanceof Date && !isNaN(value.valueOf());
  }

  /**
   * Return `d` as a new date with `n` months added.
   *
   * @export
   * @param {Date} d
   * @param {number} n
   */
  function addMonths(d, n) {
    var newDate = clone(d);
    newDate.setMonth(d.getMonth() + n);
    return newDate;
  }

  /**
   * Return `true` if two dates are the same day, ignoring the time.
   *
   * @export
   * @param  {Date}  d1
   * @param  {Date}  d2
   * @return {Boolean}
   */
  function isSameDay(d1, d2) {
    if (!d1 || !d2) {
      return false;
    }
    return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();
  }

  /**
   * Return `true` if two dates fall in the same month.
   *
   * @export
   * @param  {Date}  d1
   * @param  {Date}  d2
   * @return {Boolean}
   */
  function isSameMonth(d1, d2) {
    if (!d1 || !d2) {
      return false;
    }
    return d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();
  }

  /**
   * Returns `true` if the first day is before the second day.
   *
   * @export
   * @param {Date} d1
   * @param {Date} d2
   * @returns {Boolean}
   */
  function isDayBefore(d1, d2) {
    var day1 = clone(d1).setHours(0, 0, 0, 0);
    var day2 = clone(d2).setHours(0, 0, 0, 0);
    return day1 < day2;
  }

  /**
   * Returns `true` if the first day is after the second day.
   *
   * @export
   * @param {Date} d1
   * @param {Date} d2
   * @returns {Boolean}
   */
  function isDayAfter(d1, d2) {
    var day1 = clone(d1).setHours(0, 0, 0, 0);
    var day2 = clone(d2).setHours(0, 0, 0, 0);
    return day1 > day2;
  }

  /**
   * Return `true` if a day is in the past, e.g. yesterday or any day
   * before yesterday.
   *
   * @export
   * @param  {Date}  d
   * @return {Boolean}
   */
  function isPastDay(d) {
    var today = new Date();
    today.setHours(0, 0, 0, 0);
    return isDayBefore(d, today);
  }

  /**
   * Return `true` if a day is in the future, e.g. tomorrow or any day
   * after tomorrow.
   *
   * @export
   * @param  {Date}  d
   * @return {Boolean}
   */
  function isFutureDay(d) {
    var tomorrow = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);
    tomorrow.setHours(0, 0, 0, 0);
    return d >= tomorrow;
  }

  /**
   * Return `true` if day `d` is between days `d1` and `d2`,
   * without including them.
   *
   * @export
   * @param  {Date}  d
   * @param  {Date}  d1
   * @param  {Date}  d2
   * @return {Boolean}
   */
  function isDayBetween(d, d1, d2) {
    var date = clone(d);
    date.setHours(0, 0, 0, 0);
    return isDayAfter(date, d1) && isDayBefore(date, d2) || isDayAfter(date, d2) && isDayBefore(date, d1);
  }

  /**
   * Add a day to a range and return a new range. A range is an object with
   * `from` and `to` days.
   *
   * @export
   * @param {Date} day
   * @param {Object} range
   * @return {Object} Returns a new range object
   */
  function addDayToRange(day) {
    var range = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { from: null, to: null };
    var from = range.from,
        to = range.to;

    if (!from) {
      from = day;
    } else if (from && to && isSameDay(from, to) && isSameDay(day, from)) {
      from = null;
      to = null;
    } else if (to && isDayBefore(day, from)) {
      from = day;
    } else if (to && isSameDay(day, to)) {
      from = day;
      to = day;
    } else {
      to = day;
      if (isDayBefore(to, from)) {
        to = from;
        from = day;
      }
    }

    return { from: from, to: to };
  }

  /**
   * Return `true` if a day is included in a range of days.
   *
   * @export
   * @param  {Date}  day
   * @param  {Object}  range
   * @return {Boolean}
   */
  function isDayInRange(day, range) {
    var from = range.from,
        to = range.to;

    return from && isSameDay(day, from) || to && isSameDay(day, to) || from && to && isDayBetween(day, from, to);
  }

  /**
   * Return the year's week number (as per ISO, i.e. with the week starting from monday)
   * for the given day.
   *
   * @export
   * @param {Date} day
   * @returns {Number}
   */
  function getWeekNumber(day) {
    var date = clone(day);
    date.setHours(0, 0, 0);
    date.setDate(date.getDate() + 4 - (date.getDay() || 7));
    return Math.ceil(((date - new Date(date.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);
  }

  exports.default = {
    addDayToRange: addDayToRange,
    addMonths: addMonths,
    clone: clone,
    getWeekNumber: getWeekNumber,
    isDate: isDate,
    isDayAfter: isDayAfter,
    isDayBefore: isDayBefore,
    isDayBetween: isDayBetween,
    isDayInRange: isDayInRange,
    isFutureDay: isFutureDay,
    isPastDay: isPastDay,
    isSameDay: isSameDay,
    isSameMonth: isSameMonth
  };

  });

  var DateUtils$1 = unwrapExports(DateUtils);
  var DateUtils_1 = DateUtils.clone;
  var DateUtils_2 = DateUtils.isDate;
  var DateUtils_3 = DateUtils.addMonths;
  var DateUtils_4 = DateUtils.isSameDay;
  var DateUtils_5 = DateUtils.isSameMonth;
  var DateUtils_6 = DateUtils.isDayBefore;
  var DateUtils_7 = DateUtils.isDayAfter;
  var DateUtils_8 = DateUtils.isPastDay;
  var DateUtils_9 = DateUtils.isFutureDay;
  var DateUtils_10 = DateUtils.isDayBetween;
  var DateUtils_11 = DateUtils.addDayToRange;
  var DateUtils_12 = DateUtils.isDayInRange;
  var DateUtils_13 = DateUtils.getWeekNumber;

  var DateUtils$2 = /*#__PURE__*/Object.freeze({
    default: DateUtils$1,
    __moduleExports: DateUtils,
    clone: DateUtils_1,
    isDate: DateUtils_2,
    addMonths: DateUtils_3,
    isSameDay: DateUtils_4,
    isSameMonth: DateUtils_5,
    isDayBefore: DateUtils_6,
    isDayAfter: DateUtils_7,
    isPastDay: DateUtils_8,
    isFutureDay: DateUtils_9,
    isDayBetween: DateUtils_10,
    addDayToRange: DateUtils_11,
    isDayInRange: DateUtils_12,
    getWeekNumber: DateUtils_13
  });

  var _DateUtils = ( DateUtils$2 && DateUtils$1 ) || DateUtils$2;

  var Helpers = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  exports.cancelEvent = cancelEvent;
  exports.getFirstDayOfMonth = getFirstDayOfMonth;
  exports.getDaysInMonth = getDaysInMonth;
  exports.getModifiersFromProps = getModifiersFromProps;
  exports.getFirstDayOfWeekFromProps = getFirstDayOfWeekFromProps;
  exports.isRangeOfDates = isRangeOfDates;
  exports.getMonthsDiff = getMonthsDiff;
  exports.getWeekArray = getWeekArray;
  exports.startOfMonth = startOfMonth;
  exports.getDayNodes = getDayNodes;
  exports.nodeListToArray = nodeListToArray;
  exports.hasOwnProp = hasOwnProp;







  var _classNames2 = _interopRequireDefault(_classNames);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function cancelEvent(e) {
    e.preventDefault();
    e.stopPropagation();
  }

  function getFirstDayOfMonth(d) {
    return new Date(d.getFullYear(), d.getMonth(), 1, 12);
  }

  function getDaysInMonth(d) {
    var resultDate = getFirstDayOfMonth(d);

    resultDate.setMonth(resultDate.getMonth() + 1);
    resultDate.setDate(resultDate.getDate() - 1);

    return resultDate.getDate();
  }

  function getModifiersFromProps(props) {
    var modifiers = _extends({}, props.modifiers);
    if (props.selectedDays) {
      modifiers[props.classNames.selected] = props.selectedDays;
    }
    if (props.disabledDays) {
      modifiers[props.classNames.disabled] = props.disabledDays;
    }
    return modifiers;
  }

  function getFirstDayOfWeekFromProps(props) {
    var firstDayOfWeek = props.firstDayOfWeek,
        _props$locale = props.locale,
        locale = _props$locale === undefined ? 'en' : _props$locale,
        _props$localeUtils = props.localeUtils,
        localeUtils = _props$localeUtils === undefined ? {} : _props$localeUtils;

    if (!isNaN(firstDayOfWeek)) {
      return firstDayOfWeek;
    }
    if (localeUtils.getFirstDayOfWeek) {
      return localeUtils.getFirstDayOfWeek(locale);
    }
    return 0;
  }

  function isRangeOfDates(value) {
    return !!(value && value.from && value.to);
  }

  function getMonthsDiff(d1, d2) {
    return d2.getMonth() - d1.getMonth() + 12 * (d2.getFullYear() - d1.getFullYear());
  }

  function getWeekArray(d) {
    var firstDayOfWeek = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _LocaleUtils.getFirstDayOfWeek)();
    var fixedWeeks = arguments[2];

    var daysInMonth = getDaysInMonth(d);
    var dayArray = [];

    var week = [];
    var weekArray = [];

    for (var i = 1; i <= daysInMonth; i += 1) {
      dayArray.push(new Date(d.getFullYear(), d.getMonth(), i, 12));
    }

    dayArray.forEach(function (day) {
      if (week.length > 0 && day.getDay() === firstDayOfWeek) {
        weekArray.push(week);
        week = [];
      }
      week.push(day);
      if (dayArray.indexOf(day) === dayArray.length - 1) {
        weekArray.push(week);
      }
    });

    // unshift days to start the first week
    var firstWeek = weekArray[0];
    for (var _i = 7 - firstWeek.length; _i > 0; _i -= 1) {
      var outsideDate = (0, _DateUtils.clone)(firstWeek[0]);
      outsideDate.setDate(firstWeek[0].getDate() - 1);
      firstWeek.unshift(outsideDate);
    }

    // push days until the end of the last week
    var lastWeek = weekArray[weekArray.length - 1];
    for (var _i2 = lastWeek.length; _i2 < 7; _i2 += 1) {
      var _outsideDate = (0, _DateUtils.clone)(lastWeek[lastWeek.length - 1]);
      _outsideDate.setDate(lastWeek[lastWeek.length - 1].getDate() + 1);
      lastWeek.push(_outsideDate);
    }

    // add extra weeks to reach 6 weeks
    if (fixedWeeks && weekArray.length < 6) {
      var lastExtraWeek = void 0;

      for (var _i3 = weekArray.length; _i3 < 6; _i3 += 1) {
        lastExtraWeek = weekArray[weekArray.length - 1];
        var lastDay = lastExtraWeek[lastExtraWeek.length - 1];
        var extraWeek = [];

        for (var j = 0; j < 7; j += 1) {
          var _outsideDate2 = (0, _DateUtils.clone)(lastDay);
          _outsideDate2.setDate(lastDay.getDate() + j + 1);
          extraWeek.push(_outsideDate2);
        }

        weekArray.push(extraWeek);
      }
    }

    return weekArray;
  }

  function startOfMonth(d) {
    var newDate = (0, _DateUtils.clone)(d);
    newDate.setDate(1);
    newDate.setHours(12, 0, 0, 0); // always set noon to avoid time zone issues
    return newDate;
  }

  function getDayNodes(node, classNames) {
    var outsideClassName = void 0;
    if (classNames === _classNames2.default) {
      // When using CSS modules prefix the modifier as required by the BEM syntax
      outsideClassName = classNames.day + '--' + classNames.outside;
    } else {
      outsideClassName = '' + classNames.outside;
    }
    var dayQuery = classNames.day.replace(/ /g, '.');
    var outsideDayQuery = outsideClassName.replace(/ /g, '.');
    var selector = '.' + dayQuery + ':not(.' + outsideDayQuery + ')';
    return node.querySelectorAll(selector);
  }

  function nodeListToArray(nodeList) {
    return Array.prototype.slice.call(nodeList, 0);
  }

  function hasOwnProp(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  });

  var Helpers$1 = unwrapExports(Helpers);
  var Helpers_1 = Helpers.cancelEvent;
  var Helpers_2 = Helpers.getFirstDayOfMonth;
  var Helpers_3 = Helpers.getDaysInMonth;
  var Helpers_4 = Helpers.getModifiersFromProps;
  var Helpers_5 = Helpers.getFirstDayOfWeekFromProps;
  var Helpers_6 = Helpers.isRangeOfDates;
  var Helpers_7 = Helpers.getMonthsDiff;
  var Helpers_8 = Helpers.getWeekArray;
  var Helpers_9 = Helpers.startOfMonth;
  var Helpers_10 = Helpers.getDayNodes;
  var Helpers_11 = Helpers.nodeListToArray;
  var Helpers_12 = Helpers.hasOwnProp;

  var Helpers$2 = /*#__PURE__*/Object.freeze({
    default: Helpers$1,
    __moduleExports: Helpers,
    cancelEvent: Helpers_1,
    getFirstDayOfMonth: Helpers_2,
    getDaysInMonth: Helpers_3,
    getModifiersFromProps: Helpers_4,
    getFirstDayOfWeekFromProps: Helpers_5,
    isRangeOfDates: Helpers_6,
    getMonthsDiff: Helpers_7,
    getWeekArray: Helpers_8,
    startOfMonth: Helpers_9,
    getDayNodes: Helpers_10,
    nodeListToArray: Helpers_11,
    hasOwnProp: Helpers_12
  });

  var _Helpers = ( Helpers$2 && Helpers$1 ) || Helpers$2;

  var Day_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



  var _react2 = _interopRequireDefault(React__default);



  var _propTypes2 = _interopRequireDefault(propTypes);







  var _classNames2 = _interopRequireDefault(_classNames);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable jsx-a11y/no-static-element-interactions, react/forbid-prop-types */

  function handleEvent(handler, day, modifiers) {
    if (!handler) {
      return undefined;
    }
    return function (e) {
      e.persist();
      handler(day, modifiers, e);
    };
  }

  var Day = function (_Component) {
    _inherits(Day, _Component);

    function Day() {
      _classCallCheck(this, Day);

      return _possibleConstructorReturn(this, (Day.__proto__ || Object.getPrototypeOf(Day)).apply(this, arguments));
    }

    _createClass(Day, [{
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps) {
        var _this2 = this;

        var propNames = Object.keys(this.props);
        var nextPropNames = Object.keys(nextProps);
        if (propNames.length !== nextPropNames.length) {
          return true;
        }
        return propNames.some(function (name) {
          if (name === 'modifiers' || name === 'modifiersStyles' || name === 'classNames') {
            var prop = _this2.props[name];
            var nextProp = nextProps[name];
            var modifiers = Object.keys(prop);
            var nextModifiers = Object.keys(nextProp);
            if (modifiers.length !== nextModifiers.length) {
              return true;
            }
            return modifiers.some(function (mod) {
              return !(0, _Helpers.hasOwnProp)(nextProp, mod) || prop[mod] !== nextProp[mod];
            });
          }
          if (name === 'day') {
            return !(0, _DateUtils.isSameDay)(_this2.props[name], nextProps[name]);
          }
          return !(0, _Helpers.hasOwnProp)(nextProps, name) || _this2.props[name] !== nextProps[name];
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            classNames = _props.classNames,
            modifiersStyles = _props.modifiersStyles,
            day = _props.day,
            tabIndex = _props.tabIndex,
            empty = _props.empty,
            modifiers = _props.modifiers,
            onMouseEnter = _props.onMouseEnter,
            onMouseLeave = _props.onMouseLeave,
            onMouseUp = _props.onMouseUp,
            onMouseDown = _props.onMouseDown,
            onClick = _props.onClick,
            onKeyDown = _props.onKeyDown,
            onTouchStart = _props.onTouchStart,
            onTouchEnd = _props.onTouchEnd,
            onFocus = _props.onFocus,
            ariaLabel = _props.ariaLabel,
            ariaDisabled = _props.ariaDisabled,
            ariaSelected = _props.ariaSelected,
            children = _props.children;


        var className = classNames.day;
        if (classNames !== _classNames2.default) {
          // When using CSS modules prefix the modifier as required by the BEM syntax
          className += ' ' + Object.keys(modifiers).join(' ');
        } else {
          className += Object.keys(modifiers).map(function (modifier) {
            return ' ' + className + '--' + modifier;
          }).join('');
        }

        var style = void 0;
        if (modifiersStyles) {
          Object.keys(modifiers).filter(function (modifier) {
            return !!modifiersStyles[modifier];
          }).forEach(function (modifier) {
            style = _extends({}, style, modifiersStyles[modifier]);
          });
        }

        if (empty) {
          return _react2.default.createElement('div', { 'aria-disabled': true, className: className, style: style });
        }
        return _react2.default.createElement(
          'div',
          {
            className: className,
            tabIndex: tabIndex,
            style: style,
            role: 'gridcell',
            'aria-label': ariaLabel,
            'aria-disabled': ariaDisabled,
            'aria-selected': ariaSelected,
            onClick: handleEvent(onClick, day, modifiers),
            onKeyDown: handleEvent(onKeyDown, day, modifiers),
            onMouseEnter: handleEvent(onMouseEnter, day, modifiers),
            onMouseLeave: handleEvent(onMouseLeave, day, modifiers),
            onMouseUp: handleEvent(onMouseUp, day, modifiers),
            onMouseDown: handleEvent(onMouseDown, day, modifiers),
            onTouchEnd: handleEvent(onTouchEnd, day, modifiers),
            onTouchStart: handleEvent(onTouchStart, day, modifiers),
            onFocus: handleEvent(onFocus, day, modifiers)
          },
          children
        );
      }
    }]);

    return Day;
  }(React__default.Component);

  Day.propTypes = {
    classNames: _propTypes2.default.shape({
      day: _propTypes2.default.string.isRequired
    }).isRequired,

    day: _propTypes2.default.instanceOf(Date).isRequired,
    children: _propTypes2.default.node.isRequired,

    ariaDisabled: _propTypes2.default.bool,
    ariaLabel: _propTypes2.default.string,
    ariaSelected: _propTypes2.default.bool,
    empty: _propTypes2.default.bool,
    modifiers: _propTypes2.default.object,
    modifiersStyles: _propTypes2.default.object,
    onClick: _propTypes2.default.func,
    onKeyDown: _propTypes2.default.func,
    onMouseEnter: _propTypes2.default.func,
    onMouseLeave: _propTypes2.default.func,
    onMouseDown: _propTypes2.default.func,
    onMouseUp: _propTypes2.default.func,
    onTouchEnd: _propTypes2.default.func,
    onTouchStart: _propTypes2.default.func,
    onFocus: _propTypes2.default.func,
    tabIndex: _propTypes2.default.number
  };
  Day.defaultProps = {
    tabIndex: -1
  };
  Day.defaultProps = {
    modifiers: {},
    modifiersStyles: {},
    empty: false
  };
  exports.default = Day;

  });

  var Day = unwrapExports(Day_1);

  var Day$1 = /*#__PURE__*/Object.freeze({
    default: Day,
    __moduleExports: Day_1
  });

  var ModifiersUtils = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.dayMatchesModifier = dayMatchesModifier;
  exports.getModifiersForDay = getModifiersForDay;





  /**
   * Return `true` if a date matches the specified modifier.
   *
   * @export
   * @param {Date} day
   * @param {Any} modifier
   * @return {Boolean}
   */
  function dayMatchesModifier(day, modifier) {
    if (!modifier) {
      return false;
    }
    var arr = Array.isArray(modifier) ? modifier : [modifier];
    return arr.some(function (mod) {
      if (!mod) {
        return false;
      }
      if (mod instanceof Date) {
        return (0, _DateUtils.isSameDay)(day, mod);
      }
      if ((0, _Helpers.isRangeOfDates)(mod)) {
        return (0, _DateUtils.isDayInRange)(day, mod);
      }
      if (mod.after && mod.before && (0, _DateUtils.isDayAfter)(mod.before, mod.after)) {
        return (0, _DateUtils.isDayAfter)(day, mod.after) && (0, _DateUtils.isDayBefore)(day, mod.before);
      }
      if (mod.after && mod.before && ((0, _DateUtils.isDayAfter)(mod.after, mod.before) || (0, _DateUtils.isSameDay)(mod.after, mod.before))) {
        return (0, _DateUtils.isDayAfter)(day, mod.after) || (0, _DateUtils.isDayBefore)(day, mod.before);
      }
      if (mod.after) {
        return (0, _DateUtils.isDayAfter)(day, mod.after);
      }
      if (mod.before) {
        return (0, _DateUtils.isDayBefore)(day, mod.before);
      }
      if (mod.daysOfWeek) {
        return mod.daysOfWeek.some(function (dayOfWeek) {
          return day.getDay() === dayOfWeek;
        });
      }
      if (typeof mod === 'function') {
        return mod(day);
      }
      return false;
    });
  }

  /**
   * Return the modifiers matching the given day for the given
   * object of modifiers.
   *
   * @export
   * @param {Date} day
   * @param {Object} [modifiersObj={}]
   * @return {Array}
   */
  function getModifiersForDay(day) {
    var modifiersObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return Object.keys(modifiersObj).reduce(function (modifiers, modifierName) {
      var value = modifiersObj[modifierName];
      if (dayMatchesModifier(day, value)) {
        modifiers.push(modifierName);
      }
      return modifiers;
    }, []);
  }

  exports.default = { dayMatchesModifier: dayMatchesModifier, getModifiersForDay: getModifiersForDay };

  });

  var ModifiersUtils$1 = unwrapExports(ModifiersUtils);
  var ModifiersUtils_1 = ModifiersUtils.dayMatchesModifier;
  var ModifiersUtils_2 = ModifiersUtils.getModifiersForDay;

  var ModifiersUtils$2 = /*#__PURE__*/Object.freeze({
    default: ModifiersUtils$1,
    __moduleExports: ModifiersUtils,
    dayMatchesModifier: ModifiersUtils_1,
    getModifiersForDay: ModifiersUtils_2
  });

  var _Weekdays = ( Weekdays$1 && Weekdays ) || Weekdays$1;

  var _Day = ( Day$1 && Day ) || Day$1;

  var _ModifiersUtils = ( ModifiersUtils$2 && ModifiersUtils$1 ) || ModifiersUtils$2;

  var Month_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



  var _react2 = _interopRequireDefault(React__default);



  var _propTypes2 = _interopRequireDefault(propTypes);



  var _Weekdays2 = _interopRequireDefault(_Weekdays);



  var _Day2 = _interopRequireDefault(_Day);





  var ModifiersUtils = _interopRequireWildcard(_ModifiersUtils);



  var Helpers = _interopRequireWildcard(_Helpers);



  var DateUtils = _interopRequireWildcard(_DateUtils);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Month = function (_Component) {
    _inherits(Month, _Component);

    function Month() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, Month);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Month.__proto__ || Object.getPrototypeOf(Month)).call.apply(_ref, [this].concat(args))), _this), _this.renderDay = function (day) {
        var monthNumber = _this.props.month.getMonth();
        var propModifiers = Helpers.getModifiersFromProps(_this.props);
        var dayModifiers = ModifiersUtils.getModifiersForDay(day, propModifiers);
        if (DateUtils.isSameDay(day, new Date()) && !Object.prototype.hasOwnProperty.call(propModifiers, _this.props.classNames.today)) {
          dayModifiers.push(_this.props.classNames.today);
        }
        if (day.getMonth() !== monthNumber) {
          dayModifiers.push(_this.props.classNames.outside);
        }

        var isOutside = day.getMonth() !== monthNumber;
        var tabIndex = -1;
        // Focus on the first day of the month
        if (_this.props.onDayClick && !isOutside && day.getDate() === 1) {
          tabIndex = _this.props.tabIndex; // eslint-disable-line prefer-destructuring
        }
        var key = '' + day.getFullYear() + day.getMonth() + day.getDate();
        var modifiers = {};
        dayModifiers.forEach(function (modifier) {
          modifiers[modifier] = true;
        });

        return _react2.default.createElement(
          _Day2.default,
          {
            key: '' + (isOutside ? 'outside-' : '') + key,
            classNames: _this.props.classNames,
            day: day,
            modifiers: modifiers,
            modifiersStyles: _this.props.modifiersStyles,
            empty: isOutside && !_this.props.showOutsideDays && !_this.props.fixedWeeks,
            tabIndex: tabIndex,
            ariaLabel: _this.props.localeUtils.formatDay(day, _this.props.locale),
            ariaDisabled: isOutside || dayModifiers.indexOf('disabled') > -1,
            ariaSelected: dayModifiers.indexOf('selected') > -1,
            onClick: _this.props.onDayClick,
            onFocus: _this.props.onDayFocus,
            onKeyDown: _this.props.onDayKeyDown,
            onMouseEnter: _this.props.onDayMouseEnter,
            onMouseLeave: _this.props.onDayMouseLeave,
            onMouseDown: _this.props.onDayMouseDown,
            onMouseUp: _this.props.onDayMouseUp,
            onTouchEnd: _this.props.onDayTouchEnd,
            onTouchStart: _this.props.onDayTouchStart
          },
          _this.props.renderDay(day, modifiers)
        );
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Month, [{
      key: 'render',
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            classNames = _props.classNames,
            month = _props.month,
            months = _props.months,
            fixedWeeks = _props.fixedWeeks,
            captionElement = _props.captionElement,
            weekdayElement = _props.weekdayElement,
            locale = _props.locale,
            localeUtils = _props.localeUtils,
            weekdaysLong = _props.weekdaysLong,
            weekdaysShort = _props.weekdaysShort,
            firstDayOfWeek = _props.firstDayOfWeek,
            onCaptionClick = _props.onCaptionClick,
            showWeekNumbers = _props.showWeekNumbers,
            showWeekDays = _props.showWeekDays,
            onWeekClick = _props.onWeekClick;


        var captionProps = {
          date: month,
          classNames: classNames,
          months: months,
          localeUtils: localeUtils,
          locale: locale,
          onClick: onCaptionClick ? function (e) {
            return onCaptionClick(month, e);
          } : undefined
        };
        var caption = _react2.default.isValidElement(captionElement) ? _react2.default.cloneElement(captionElement, captionProps) : _react2.default.createElement(captionElement, captionProps);

        var weeks = Helpers.getWeekArray(month, firstDayOfWeek, fixedWeeks);
        return _react2.default.createElement(
          'div',
          { className: classNames.month, role: 'grid' },
          caption,
          showWeekDays && _react2.default.createElement(_Weekdays2.default, {
            classNames: classNames,
            weekdaysShort: weekdaysShort,
            weekdaysLong: weekdaysLong,
            firstDayOfWeek: firstDayOfWeek,
            showWeekNumbers: showWeekNumbers,
            locale: locale,
            localeUtils: localeUtils,
            weekdayElement: weekdayElement
          }),
          _react2.default.createElement(
            'div',
            { className: classNames.body, role: 'rowgroup' },
            weeks.map(function (week) {
              var weekNumber = void 0;
              if (showWeekNumbers) {
                weekNumber = DateUtils.getWeekNumber(week[6]);
              }
              return _react2.default.createElement(
                'div',
                {
                  key: week[0].getTime(),
                  className: classNames.week,
                  role: 'row'
                },
                showWeekNumbers && _react2.default.createElement(
                  'div',
                  {
                    className: classNames.weekNumber,
                    tabIndex: onWeekClick ? 0 : -1,
                    role: 'gridcell',
                    onClick: onWeekClick ? function (e) {
                      return onWeekClick(weekNumber, week, e);
                    } : undefined,
                    onKeyUp: onWeekClick ? function (e) {
                      return e.keyCode === _keys.ENTER && onWeekClick(weekNumber, week, e);
                    } : undefined
                  },
                  _this2.props.renderWeek(weekNumber, week, month)
                ),
                week.map(_this2.renderDay)
              );
            })
          )
        );
      }
    }]);

    return Month;
  }(React__default.Component);

  Month.propTypes = {
    classNames: _propTypes2.default.shape({
      body: _propTypes2.default.string.isRequired,
      month: _propTypes2.default.string.isRequired,
      outside: _propTypes2.default.string.isRequired,
      today: _propTypes2.default.string.isRequired,
      week: _propTypes2.default.string.isRequired,
      weekNumber: _propTypes2.default.string.isRequired
    }).isRequired,
    tabIndex: _propTypes2.default.number,

    month: _propTypes2.default.instanceOf(Date).isRequired,
    months: _propTypes2.default.arrayOf(_propTypes2.default.string),

    modifiersStyles: _propTypes2.default.object,

    showWeekDays: _propTypes2.default.bool,
    showOutsideDays: _propTypes2.default.bool,

    renderDay: _propTypes2.default.func.isRequired,
    renderWeek: _propTypes2.default.func.isRequired,

    captionElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func, _propTypes2.default.instanceOf(_react2.default.Component)]).isRequired,
    weekdayElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func, _propTypes2.default.instanceOf(_react2.default.Component)]),

    fixedWeeks: _propTypes2.default.bool,
    showWeekNumbers: _propTypes2.default.bool,

    locale: _propTypes2.default.string.isRequired,
    localeUtils: _propTypes2.default.object.isRequired,
    weekdaysLong: _propTypes2.default.arrayOf(_propTypes2.default.string),
    weekdaysShort: _propTypes2.default.arrayOf(_propTypes2.default.string),
    firstDayOfWeek: _propTypes2.default.number.isRequired,

    onCaptionClick: _propTypes2.default.func,
    onDayClick: _propTypes2.default.func,
    onDayFocus: _propTypes2.default.func,
    onDayKeyDown: _propTypes2.default.func,
    onDayMouseEnter: _propTypes2.default.func,
    onDayMouseLeave: _propTypes2.default.func,
    onDayMouseDown: _propTypes2.default.func,
    onDayMouseUp: _propTypes2.default.func,
    onDayTouchEnd: _propTypes2.default.func,
    onDayTouchStart: _propTypes2.default.func,
    onWeekClick: _propTypes2.default.func
  };
  exports.default = Month;

  });

  var Month = unwrapExports(Month_1);

  var Month$1 = /*#__PURE__*/Object.freeze({
    default: Month,
    __moduleExports: Month_1
  });

  var Weekday_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



  var _react2 = _interopRequireDefault(React__default);



  var _propTypes2 = _interopRequireDefault(propTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Weekday = function (_Component) {
    _inherits(Weekday, _Component);

    function Weekday() {
      _classCallCheck(this, Weekday);

      return _possibleConstructorReturn(this, (Weekday.__proto__ || Object.getPrototypeOf(Weekday)).apply(this, arguments));
    }

    _createClass(Weekday, [{
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps) {
        return this.props !== nextProps;
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            weekday = _props.weekday,
            className = _props.className,
            weekdaysLong = _props.weekdaysLong,
            weekdaysShort = _props.weekdaysShort,
            localeUtils = _props.localeUtils,
            locale = _props.locale;

        var title = void 0;
        if (weekdaysLong) {
          title = weekdaysLong[weekday];
        } else {
          title = localeUtils.formatWeekdayLong(weekday, locale);
        }
        var content = void 0;
        if (weekdaysShort) {
          content = weekdaysShort[weekday];
        } else {
          content = localeUtils.formatWeekdayShort(weekday, locale);
        }

        return _react2.default.createElement(
          'div',
          { className: className, role: 'columnheader' },
          _react2.default.createElement(
            'abbr',
            { title: title },
            content
          )
        );
      }
    }]);

    return Weekday;
  }(React__default.Component);

  Weekday.propTypes = {
    weekday: _propTypes2.default.number,
    className: _propTypes2.default.string,
    locale: _propTypes2.default.string,
    localeUtils: _propTypes2.default.object,

    weekdaysLong: _propTypes2.default.arrayOf(_propTypes2.default.string),
    weekdaysShort: _propTypes2.default.arrayOf(_propTypes2.default.string)
  };
  exports.default = Weekday;

  });

  var Weekday = unwrapExports(Weekday_1);

  var Weekday$1 = /*#__PURE__*/Object.freeze({
    default: Weekday,
    __moduleExports: Weekday_1
  });

  var _Caption = ( Caption$1 && Caption ) || Caption$1;

  var _Navbar = ( Navbar$1 && Navbar ) || Navbar$1;

  var _Month = ( Month$1 && Month ) || Month$1;

  var _Weekday = ( Weekday$1 && Weekday ) || Weekday$1;

  var DayPicker_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ModifiersUtils = exports.LocaleUtils = exports.DateUtils = exports.DayPicker = undefined;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



  var _react2 = _interopRequireDefault(React__default);



  var _propTypes2 = _interopRequireDefault(propTypes);



  var _Caption2 = _interopRequireDefault(_Caption);



  var _Navbar2 = _interopRequireDefault(_Navbar);



  var _Month2 = _interopRequireDefault(_Month);



  var _Weekday2 = _interopRequireDefault(_Weekday);



  var Helpers = _interopRequireWildcard(_Helpers);



  var DateUtils = _interopRequireWildcard(_DateUtils);



  var LocaleUtils = _interopRequireWildcard(_LocaleUtils);



  var ModifiersUtils = _interopRequireWildcard(_ModifiersUtils);



  var _classNames2 = _interopRequireDefault(_classNames);



  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var DayPicker = exports.DayPicker = function (_Component) {
    _inherits(DayPicker, _Component);

    function DayPicker(props) {
      _classCallCheck(this, DayPicker);

      var _this = _possibleConstructorReturn(this, (DayPicker.__proto__ || Object.getPrototypeOf(DayPicker)).call(this, props));

      _this.dayPicker = null;

      _this.showNextMonth = function (callback) {
        if (!_this.allowNextMonth()) {
          return;
        }
        var deltaMonths = _this.props.pagedNavigation ? _this.props.numberOfMonths : 1;
        var nextMonth = DateUtils.addMonths(_this.state.currentMonth, deltaMonths);
        _this.showMonth(nextMonth, callback);
      };

      _this.showPreviousMonth = function (callback) {
        if (!_this.allowPreviousMonth()) {
          return;
        }
        var deltaMonths = _this.props.pagedNavigation ? _this.props.numberOfMonths : 1;
        var previousMonth = DateUtils.addMonths(_this.state.currentMonth, -deltaMonths);
        _this.showMonth(previousMonth, callback);
      };

      _this.handleKeyDown = function (e) {
        e.persist();

        switch (e.keyCode) {
          case _keys.LEFT:
            if (_this.props.dir === 'rtl') {
              _this.showNextMonth();
            } else {
              _this.showPreviousMonth();
            }
            Helpers.cancelEvent(e);
            break;
          case _keys.RIGHT:
            if (_this.props.dir === 'rtl') {
              _this.showPreviousMonth();
            } else {
              _this.showNextMonth();
            }
            Helpers.cancelEvent(e);
            break;
          case _keys.UP:
            _this.showPreviousYear();
            Helpers.cancelEvent(e);
            break;
          case _keys.DOWN:
            _this.showNextYear();
            Helpers.cancelEvent(e);
            break;
          default:
            break;
        }

        if (_this.props.onKeyDown) {
          _this.props.onKeyDown(e);
        }
      };

      _this.handleDayKeyDown = function (day, modifiers, e) {
        e.persist();

        switch (e.keyCode) {
          case _keys.LEFT:
            Helpers.cancelEvent(e);
            if (_this.props.dir === 'rtl') {
              _this.focusNextDay(e.target);
            } else {
              _this.focusPreviousDay(e.target);
            }
            break;
          case _keys.RIGHT:
            Helpers.cancelEvent(e);
            if (_this.props.dir === 'rtl') {
              _this.focusPreviousDay(e.target);
            } else {
              _this.focusNextDay(e.target);
            }
            break;
          case _keys.UP:
            Helpers.cancelEvent(e);
            _this.focusPreviousWeek(e.target);
            break;
          case _keys.DOWN:
            Helpers.cancelEvent(e);
            _this.focusNextWeek(e.target);
            break;
          case _keys.ENTER:
          case _keys.SPACE:
            Helpers.cancelEvent(e);
            if (_this.props.onDayClick) {
              _this.handleDayClick(day, modifiers, e);
            }
            break;
          default:
            break;
        }
        if (_this.props.onDayKeyDown) {
          _this.props.onDayKeyDown(day, modifiers, e);
        }
      };

      _this.handleDayClick = function (day, modifiers, e) {
        e.persist();

        if (modifiers[_this.props.classNames.outside] && _this.props.enableOutsideDaysClick) {
          _this.handleOutsideDayClick(day);
        }
        if (_this.props.onDayClick) {
          _this.props.onDayClick(day, modifiers, e);
        }
      };

      _this.handleTodayButtonClick = function (e) {
        var today = new Date();
        var month = new Date(today.getFullYear(), today.getMonth());
        _this.showMonth(month);
        e.target.blur();
        if (_this.props.onTodayButtonClick) {
          e.persist();
          _this.props.onTodayButtonClick(new Date(today.getFullYear(), today.getMonth(), today.getDate()), ModifiersUtils.getModifiersForDay(today, _this.props.modifiers), e);
        }
      };

      var currentMonth = _this.getCurrentMonthFromProps(props);
      _this.state = { currentMonth: currentMonth };
      return _this;
    }

    _createClass(DayPicker, [{
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        // Changing the `month` props means changing the current displayed month
        if (prevProps.month !== this.props.month && !DateUtils.isSameMonth(prevProps.month, this.props.month)) {
          var currentMonth = this.getCurrentMonthFromProps(this.props);
          // eslint-disable-next-line react/no-did-update-set-state
          this.setState({ currentMonth: currentMonth });
        }
      }

      /**
       * Return the month to be shown in the calendar based on the component props.
       *
       * @param {Object} props
       * @returns Date
       * @memberof DayPicker
       * @private
       */

    }, {
      key: 'getCurrentMonthFromProps',
      value: function getCurrentMonthFromProps(props) {
        var initialMonth = Helpers.startOfMonth(props.month || props.initialMonth);
        var currentMonth = initialMonth;

        if (props.pagedNavigation && props.numberOfMonths > 1 && props.fromMonth) {
          var fromMonth = Helpers.startOfMonth(props.fromMonth);
          var diffInMonths = Helpers.getMonthsDiff(fromMonth, currentMonth);
          currentMonth = DateUtils.addMonths(fromMonth, Math.floor(diffInMonths / props.numberOfMonths) * props.numberOfMonths);
        } else if (props.toMonth && props.numberOfMonths > 1 && Helpers.getMonthsDiff(currentMonth, props.toMonth) <= 0) {
          currentMonth = DateUtils.addMonths(Helpers.startOfMonth(props.toMonth), 1 - this.props.numberOfMonths);
        }
        return currentMonth;
      }
    }, {
      key: 'getNextNavigableMonth',
      value: function getNextNavigableMonth() {
        return DateUtils.addMonths(this.state.currentMonth, this.props.numberOfMonths);
      }
    }, {
      key: 'getPreviousNavigableMonth',
      value: function getPreviousNavigableMonth() {
        return DateUtils.addMonths(this.state.currentMonth, -1);
      }
    }, {
      key: 'allowPreviousMonth',
      value: function allowPreviousMonth() {
        var previousMonth = DateUtils.addMonths(this.state.currentMonth, -1);
        return this.allowMonth(previousMonth);
      }
    }, {
      key: 'allowNextMonth',
      value: function allowNextMonth() {
        var nextMonth = DateUtils.addMonths(this.state.currentMonth, this.props.numberOfMonths);
        return this.allowMonth(nextMonth);
      }
    }, {
      key: 'allowMonth',
      value: function allowMonth(d) {
        var _props = this.props,
            fromMonth = _props.fromMonth,
            toMonth = _props.toMonth,
            canChangeMonth = _props.canChangeMonth;

        if (!canChangeMonth || fromMonth && Helpers.getMonthsDiff(fromMonth, d) < 0 || toMonth && Helpers.getMonthsDiff(toMonth, d) > 0) {
          return false;
        }
        return true;
      }
    }, {
      key: 'allowYearChange',
      value: function allowYearChange() {
        return this.props.canChangeMonth;
      }
    }, {
      key: 'showMonth',
      value: function showMonth(d, callback) {
        var _this2 = this;

        if (!this.allowMonth(d)) {
          return;
        }
        this.setState({ currentMonth: Helpers.startOfMonth(d) }, function () {
          if (callback) {
            callback();
          }
          if (_this2.props.onMonthChange) {
            _this2.props.onMonthChange(_this2.state.currentMonth);
          }
        });
      }
    }, {
      key: 'showNextYear',
      value: function showNextYear() {
        if (!this.allowYearChange()) {
          return;
        }
        var nextMonth = DateUtils.addMonths(this.state.currentMonth, 12);
        this.showMonth(nextMonth);
      }
    }, {
      key: 'showPreviousYear',
      value: function showPreviousYear() {
        if (!this.allowYearChange()) {
          return;
        }
        var nextMonth = DateUtils.addMonths(this.state.currentMonth, -12);
        this.showMonth(nextMonth);
      }
    }, {
      key: 'focus',
      value: function focus() {
        this.wrapper.focus();
      }
    }, {
      key: 'focusFirstDayOfMonth',
      value: function focusFirstDayOfMonth() {
        Helpers.getDayNodes(this.dayPicker, this.props.classNames)[0].focus();
      }
    }, {
      key: 'focusLastDayOfMonth',
      value: function focusLastDayOfMonth() {
        var dayNodes = Helpers.getDayNodes(this.dayPicker, this.props.classNames);
        dayNodes[dayNodes.length - 1].focus();
      }
    }, {
      key: 'focusPreviousDay',
      value: function focusPreviousDay(dayNode) {
        var _this3 = this;

        var dayNodes = Helpers.getDayNodes(this.dayPicker, this.props.classNames);
        var dayNodeIndex = Helpers.nodeListToArray(dayNodes).indexOf(dayNode);
        if (dayNodeIndex === -1) return;
        if (dayNodeIndex === 0) {
          this.showPreviousMonth(function () {
            return _this3.focusLastDayOfMonth();
          });
        } else {
          dayNodes[dayNodeIndex - 1].focus();
        }
      }
    }, {
      key: 'focusNextDay',
      value: function focusNextDay(dayNode) {
        var _this4 = this;

        var dayNodes = Helpers.getDayNodes(this.dayPicker, this.props.classNames);
        var dayNodeIndex = Helpers.nodeListToArray(dayNodes).indexOf(dayNode);
        if (dayNodeIndex === -1) return;
        if (dayNodeIndex === dayNodes.length - 1) {
          this.showNextMonth(function () {
            return _this4.focusFirstDayOfMonth();
          });
        } else {
          dayNodes[dayNodeIndex + 1].focus();
        }
      }
    }, {
      key: 'focusNextWeek',
      value: function focusNextWeek(dayNode) {
        var _this5 = this;

        var dayNodes = Helpers.getDayNodes(this.dayPicker, this.props.classNames);
        var dayNodeIndex = Helpers.nodeListToArray(dayNodes).indexOf(dayNode);
        var isInLastWeekOfMonth = dayNodeIndex > dayNodes.length - 8;

        if (isInLastWeekOfMonth) {
          this.showNextMonth(function () {
            var daysAfterIndex = dayNodes.length - dayNodeIndex;
            var nextMonthDayNodeIndex = 7 - daysAfterIndex;
            Helpers.getDayNodes(_this5.dayPicker, _this5.props.classNames)[nextMonthDayNodeIndex].focus();
          });
        } else {
          dayNodes[dayNodeIndex + 7].focus();
        }
      }
    }, {
      key: 'focusPreviousWeek',
      value: function focusPreviousWeek(dayNode) {
        var _this6 = this;

        var dayNodes = Helpers.getDayNodes(this.dayPicker, this.props.classNames);
        var dayNodeIndex = Helpers.nodeListToArray(dayNodes).indexOf(dayNode);
        var isInFirstWeekOfMonth = dayNodeIndex <= 6;

        if (isInFirstWeekOfMonth) {
          this.showPreviousMonth(function () {
            var previousMonthDayNodes = Helpers.getDayNodes(_this6.dayPicker, _this6.props.classNames);
            var startOfLastWeekOfMonth = previousMonthDayNodes.length - 7;
            var previousMonthDayNodeIndex = startOfLastWeekOfMonth + dayNodeIndex;
            previousMonthDayNodes[previousMonthDayNodeIndex].focus();
          });
        } else {
          dayNodes[dayNodeIndex - 7].focus();
        }
      }

      // Event handlers

    }, {
      key: 'handleOutsideDayClick',
      value: function handleOutsideDayClick(day) {
        var currentMonth = this.state.currentMonth;
        var numberOfMonths = this.props.numberOfMonths;

        var diffInMonths = Helpers.getMonthsDiff(currentMonth, day);
        if (diffInMonths > 0 && diffInMonths >= numberOfMonths) {
          this.showNextMonth();
        } else if (diffInMonths < 0) {
          this.showPreviousMonth();
        }
      }
    }, {
      key: 'renderNavbar',
      value: function renderNavbar() {
        var _props2 = this.props,
            labels = _props2.labels,
            locale = _props2.locale,
            localeUtils = _props2.localeUtils,
            canChangeMonth = _props2.canChangeMonth,
            navbarElement = _props2.navbarElement,
            attributes = _objectWithoutProperties(_props2, ['labels', 'locale', 'localeUtils', 'canChangeMonth', 'navbarElement']);

        if (!canChangeMonth) return null;

        var props = {
          month: this.state.currentMonth,
          classNames: this.props.classNames,
          className: this.props.classNames.navBar,
          nextMonth: this.getNextNavigableMonth(),
          previousMonth: this.getPreviousNavigableMonth(),
          showPreviousButton: this.allowPreviousMonth(),
          showNextButton: this.allowNextMonth(),
          onNextClick: this.showNextMonth,
          onPreviousClick: this.showPreviousMonth,
          dir: attributes.dir,
          labels: labels,
          locale: locale,
          localeUtils: localeUtils
        };
        return _react2.default.isValidElement(navbarElement) ? _react2.default.cloneElement(navbarElement, props) : _react2.default.createElement(navbarElement, props);
      }
    }, {
      key: 'renderMonths',
      value: function renderMonths() {
        var months = [];
        var firstDayOfWeek = Helpers.getFirstDayOfWeekFromProps(this.props);
        for (var i = 0; i < this.props.numberOfMonths; i += 1) {
          var month = DateUtils.addMonths(this.state.currentMonth, i);
          months.push(_react2.default.createElement(_Month2.default, _extends({
            key: i
          }, this.props, {
            month: month,
            firstDayOfWeek: firstDayOfWeek,
            onDayKeyDown: this.handleDayKeyDown,
            onDayClick: this.handleDayClick
          })));
        }

        if (this.props.reverseMonths) {
          months.reverse();
        }
        return months;
      }
    }, {
      key: 'renderFooter',
      value: function renderFooter() {
        if (this.props.todayButton) {
          return _react2.default.createElement(
            'div',
            { className: this.props.classNames.footer },
            this.renderTodayButton()
          );
        }
        return null;
      }
    }, {
      key: 'renderTodayButton',
      value: function renderTodayButton() {
        return _react2.default.createElement(
          'button',
          {
            type: 'button',
            tabIndex: 0,
            className: this.props.classNames.todayButton,
            'aria-label': this.props.todayButton,
            onClick: this.handleTodayButtonClick
          },
          this.props.todayButton
        );
      }
    }, {
      key: 'render',
      value: function render() {
        var _this7 = this;

        var className = this.props.classNames.container;

        if (!this.props.onDayClick) {
          className = className + ' ' + this.props.classNames.interactionDisabled;
        }
        if (this.props.className) {
          className = className + ' ' + this.props.className;
        }
        return _react2.default.createElement(
          'div',
          _extends({}, this.props.containerProps, {
            className: className,
            ref: function ref(el) {
              return _this7.dayPicker = el;
            },
            lang: this.props.locale
          }),
          _react2.default.createElement(
            'div',
            {
              className: this.props.classNames.wrapper,
              ref: function ref(el) {
                return _this7.wrapper = el;
              },
              tabIndex: this.props.canChangeMonth && typeof this.props.tabIndex !== 'undefined' ? this.props.tabIndex : -1,
              onKeyDown: this.handleKeyDown,
              onFocus: this.props.onFocus,
              onBlur: this.props.onBlur
            },
            this.renderNavbar(),
            _react2.default.createElement(
              'div',
              { className: this.props.classNames.months },
              this.renderMonths()
            ),
            this.renderFooter()
          )
        );
      }
    }]);

    return DayPicker;
  }(React__default.Component);

  DayPicker.VERSION = '7.4.0';
  DayPicker.propTypes = {
    // Rendering months
    initialMonth: _propTypes2.default.instanceOf(Date),
    month: _propTypes2.default.instanceOf(Date),
    numberOfMonths: _propTypes2.default.number,
    fromMonth: _propTypes2.default.instanceOf(Date),
    toMonth: _propTypes2.default.instanceOf(Date),
    canChangeMonth: _propTypes2.default.bool,
    reverseMonths: _propTypes2.default.bool,
    pagedNavigation: _propTypes2.default.bool,
    todayButton: _propTypes2.default.string,
    showWeekNumbers: _propTypes2.default.bool,
    showWeekDays: _propTypes2.default.bool,

    // Modifiers
    selectedDays: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func, _propTypes2.default.array]),
    disabledDays: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func, _propTypes2.default.array]),

    modifiers: _propTypes2.default.object,
    modifiersStyles: _propTypes2.default.object,

    // Localization
    dir: _propTypes2.default.string,
    firstDayOfWeek: _propTypes2.default.oneOf([0, 1, 2, 3, 4, 5, 6]),
    labels: _propTypes2.default.shape({
      nextMonth: _propTypes2.default.string.isRequired,
      previousMonth: _propTypes2.default.string.isRequired
    }),
    locale: _propTypes2.default.string,
    localeUtils: _propTypes2.default.shape({
      formatMonthTitle: _propTypes2.default.func,
      formatWeekdayShort: _propTypes2.default.func,
      formatWeekdayLong: _propTypes2.default.func,
      getFirstDayOfWeek: _propTypes2.default.func
    }),
    months: _propTypes2.default.arrayOf(_propTypes2.default.string),
    weekdaysLong: _propTypes2.default.arrayOf(_propTypes2.default.string),
    weekdaysShort: _propTypes2.default.arrayOf(_propTypes2.default.string),

    // Customization
    showOutsideDays: _propTypes2.default.bool,
    enableOutsideDaysClick: _propTypes2.default.bool,
    fixedWeeks: _propTypes2.default.bool,

    // CSS and HTML
    classNames: _propTypes2.default.shape({
      body: _propTypes2.default.string,
      container: _propTypes2.default.string,
      day: _propTypes2.default.string.isRequired,
      disabled: _propTypes2.default.string.isRequired,
      footer: _propTypes2.default.string,
      interactionDisabled: _propTypes2.default.string,
      months: _propTypes2.default.string,
      month: _propTypes2.default.string,
      navBar: _propTypes2.default.string,
      outside: _propTypes2.default.string.isRequired,
      selected: _propTypes2.default.string.isRequired,
      today: _propTypes2.default.string.isRequired,
      todayButton: _propTypes2.default.string,
      week: _propTypes2.default.string,
      wrapper: _propTypes2.default.string
    }),
    className: _propTypes2.default.string,
    containerProps: _propTypes2.default.object,
    tabIndex: _propTypes2.default.number,

    // Custom elements
    renderDay: _propTypes2.default.func,
    renderWeek: _propTypes2.default.func,
    weekdayElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func, _propTypes2.default.instanceOf(React__default.Component)]),
    navbarElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func, _propTypes2.default.instanceOf(React__default.Component)]),
    captionElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func, _propTypes2.default.instanceOf(React__default.Component)]),

    // Events
    onBlur: _propTypes2.default.func,
    onFocus: _propTypes2.default.func,
    onKeyDown: _propTypes2.default.func,
    onDayClick: _propTypes2.default.func,
    onDayKeyDown: _propTypes2.default.func,
    onDayMouseEnter: _propTypes2.default.func,
    onDayMouseLeave: _propTypes2.default.func,
    onDayMouseDown: _propTypes2.default.func,
    onDayMouseUp: _propTypes2.default.func,
    onDayTouchStart: _propTypes2.default.func,
    onDayTouchEnd: _propTypes2.default.func,
    onDayFocus: _propTypes2.default.func,
    onMonthChange: _propTypes2.default.func,
    onCaptionClick: _propTypes2.default.func,
    onWeekClick: _propTypes2.default.func,
    onTodayButtonClick: _propTypes2.default.func
  };
  DayPicker.defaultProps = {
    classNames: _classNames2.default,
    tabIndex: 0,
    initialMonth: new Date(),
    numberOfMonths: 1,
    labels: {
      previousMonth: 'Previous Month',
      nextMonth: 'Next Month'
    },
    locale: 'en',
    localeUtils: LocaleUtils,
    showOutsideDays: false,
    enableOutsideDaysClick: true,
    fixedWeeks: false,
    canChangeMonth: true,
    reverseMonths: false,
    pagedNavigation: false,
    showWeekNumbers: false,
    showWeekDays: true,
    renderDay: function renderDay(day) {
      return day.getDate();
    },
    renderWeek: function renderWeek(weekNumber) {
      return weekNumber;
    },
    weekdayElement: _react2.default.createElement(_Weekday2.default, null),
    navbarElement: _react2.default.createElement(_Navbar2.default, { classNames: _classNames2.default }),
    captionElement: _react2.default.createElement(_Caption2.default, { classNames: _classNames2.default })
  };


  DayPicker.DateUtils = DateUtils;
  DayPicker.LocaleUtils = LocaleUtils;
  DayPicker.ModifiersUtils = ModifiersUtils;

  exports.DateUtils = DateUtils;
  exports.LocaleUtils = LocaleUtils;
  exports.ModifiersUtils = ModifiersUtils;
  exports.default = DayPicker;

  });

  var DayPicker = unwrapExports(DayPicker_1);
  var DayPicker_2 = DayPicker_1.ModifiersUtils;
  var DayPicker_3 = DayPicker_1.LocaleUtils;
  var DayPicker_4 = DayPicker_1.DateUtils;
  var DayPicker_5 = DayPicker_1.DayPicker;

  var DayPicker$1 = /*#__PURE__*/Object.freeze({
    default: DayPicker,
    __moduleExports: DayPicker_1,
    ModifiersUtils: DayPicker_2,
    LocaleUtils: DayPicker_3,
    DateUtils: DayPicker_4,
    DayPicker: DayPicker_5
  });

  var PropTypes = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ModifierPropType = undefined;



  var _propTypes2 = _interopRequireDefault(propTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var PrimitiveTypes = {
    localeUtils: _propTypes2.default.shape({
      formatMonthTitle: _propTypes2.default.func,
      formatWeekdayShort: _propTypes2.default.func,
      formatWeekdayLong: _propTypes2.default.func,
      getFirstDayOfWeek: _propTypes2.default.func
    }),
    range: _propTypes2.default.shape({
      from: _propTypes2.default.instanceOf(Date),
      to: _propTypes2.default.instanceOf(Date)
    }),
    after: _propTypes2.default.shape({
      after: _propTypes2.default.instanceOf(Date)
    }),
    before: _propTypes2.default.shape({
      before: _propTypes2.default.instanceOf(Date)
    })
  };

  var ModifierPropType = exports.ModifierPropType = _propTypes2.default.oneOfType([PrimitiveTypes.after, PrimitiveTypes.before, PrimitiveTypes.range, _propTypes2.default.func, _propTypes2.default.array]);

  exports.default = PrimitiveTypes;

  });

  var PropTypes$1 = unwrapExports(PropTypes);
  var PropTypes_1 = PropTypes.ModifierPropType;

  var PropTypes$2 = /*#__PURE__*/Object.freeze({
    default: PropTypes$1,
    __moduleExports: PropTypes,
    ModifierPropType: PropTypes_1
  });

  var DayPicker$2 = ( DayPicker$1 && DayPicker ) || DayPicker$1;

  var PropTypes$3 = ( PropTypes$2 && PropTypes$1 ) || PropTypes$2;

  /*
    Used as main file in package.json
  */

  /* eslint-disable no-var */
  /* eslint-env node */









  var DayPicker_1$1 = DayPicker$2;
  var DateUtils_1$1 = _DateUtils;
  var LocaleUtils_1$1 = _LocaleUtils;
  var ModifiersUtils_1$1 = _ModifiersUtils;
  var WeekdayPropTypes = _Weekday.propTypes;
  var NavbarPropTypes = _Navbar.propTypes;
  var PropTypes_1$1 = PropTypes$3;
  DayPicker_1$1.DateUtils = DateUtils_1$1;
  DayPicker_1$1.LocaleUtils = LocaleUtils_1$1;
  DayPicker_1$1.ModifiersUtils = ModifiersUtils_1$1;
  DayPicker_1$1.WeekdayPropTypes = WeekdayPropTypes;
  DayPicker_1$1.NavbarPropTypes = NavbarPropTypes;
  DayPicker_1$1.PropTypes = PropTypes_1$1;

  var styles$n = { "date-picker": "lc-date-picker", "date-picker__wrapper": "lc-date-picker__wrapper", "date-picker__months": "lc-date-picker__months", "date-picker__month": "lc-date-picker__month", "date-picker__nav-bar": "lc-date-picker__nav-bar", "date-picker__nav-button": "lc-date-picker__nav-button", "date-picker__nav-button--interaction-disabled": "lc-date-picker__nav-button--interaction-disabled", "date-picker__caption": "lc-date-picker__caption", "date-picker__weekdays": "lc-date-picker__weekdays", "date-picker__weekdays-row": "lc-date-picker__weekdays-row", "date-picker__weekday": "lc-date-picker__weekday", "date-picker__week-number": "lc-date-picker__week-number", "date-picker__body": "lc-date-picker__body", "date-picker__week": "lc-date-picker__week", "date-picker__day": "lc-date-picker__day", "date-picker__day-content": "lc-date-picker__day-content", "date-picker__day-wrapper": "lc-date-picker__day-wrapper", "date-picker__day--today": "lc-date-picker__day--today", "date-picker__day--selected": "lc-date-picker__day--selected", "date-picker__day--outside": "lc-date-picker__day--outside", "date-picker__day--disabled": "lc-date-picker__day--disabled", "date-picker--interaction-disabled": "lc-date-picker--interaction-disabled", "date-picker__footer": "lc-date-picker__footer", "date-picker__today-button": "lc-date-picker__today-button", "date-picker__input": "lc-date-picker__input", "date-picker__input-overlay-wrapper": "lc-date-picker__input-overlay-wrapper", "date-picker__input-overlay": "lc-date-picker__input-overlay", "date-picker--range": "lc-date-picker--range", "date-picker__day--start": "lc-date-picker__day--start", "date-picker__day--end": "lc-date-picker__day--end", "date-picker__day--single": "lc-date-picker__day--single", "date-picker__day--sunday": "lc-date-picker__day--sunday", "date-picker__day--monday": "lc-date-picker__day--monday", "date-picker--range__select-input": "lc-date-picker--range__select-input", "date-picker--range__calendars-wrapper": "lc-date-picker--range__calendars-wrapper" };

  var MILLISECONDS_IN_MINUTE = 60000;

  /**
   * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
   * They usually appear for dates that denote time before the timezones were introduced
   * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
   * and GMT+01:00:00 after that date)
   *
   * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
   * which would lead to incorrect calculations.
   *
   * This function returns the timezone offset in milliseconds that takes seconds in account.
   */
  var getTimezoneOffsetInMilliseconds = function getTimezoneOffsetInMilliseconds (dirtyDate) {
    var date = new Date(dirtyDate.getTime());
    var baseTimezoneOffset = date.getTimezoneOffset();
    date.setSeconds(0, 0);
    var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;

    return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset
  };

  var getTimezoneOffsetInMilliseconds$1 = /*#__PURE__*/Object.freeze({
    default: getTimezoneOffsetInMilliseconds,
    __moduleExports: getTimezoneOffsetInMilliseconds
  });

  /**
   * @category Common Helpers
   * @summary Is the given argument an instance of Date?
   *
   * @description
   * Is the given argument an instance of Date?
   *
   * @param {*} argument - the argument to check
   * @returns {Boolean} the given argument is an instance of Date
   *
   * @example
   * // Is 'mayonnaise' a Date?
   * var result = isDate('mayonnaise')
   * //=> false
   */
  function isDate (argument) {
    return argument instanceof Date
  }

  var is_date = isDate;

  var is_date$1 = /*#__PURE__*/Object.freeze({
    default: is_date,
    __moduleExports: is_date
  });

  var getTimezoneOffsetInMilliseconds$2 = ( getTimezoneOffsetInMilliseconds$1 && getTimezoneOffsetInMilliseconds ) || getTimezoneOffsetInMilliseconds$1;

  var isDate$1 = ( is_date$1 && is_date ) || is_date$1;

  var MILLISECONDS_IN_HOUR = 3600000;
  var MILLISECONDS_IN_MINUTE$1 = 60000;
  var DEFAULT_ADDITIONAL_DIGITS = 2;

  var parseTokenDateTimeDelimeter = /[T ]/;
  var parseTokenPlainTime = /:/;

  // year tokens
  var parseTokenYY = /^(\d{2})$/;
  var parseTokensYYY = [
    /^([+-]\d{2})$/, // 0 additional digits
    /^([+-]\d{3})$/, // 1 additional digit
    /^([+-]\d{4})$/ // 2 additional digits
  ];

  var parseTokenYYYY = /^(\d{4})/;
  var parseTokensYYYYY = [
    /^([+-]\d{4})/, // 0 additional digits
    /^([+-]\d{5})/, // 1 additional digit
    /^([+-]\d{6})/ // 2 additional digits
  ];

  // date tokens
  var parseTokenMM = /^-(\d{2})$/;
  var parseTokenDDD = /^-?(\d{3})$/;
  var parseTokenMMDD = /^-?(\d{2})-?(\d{2})$/;
  var parseTokenWww = /^-?W(\d{2})$/;
  var parseTokenWwwD = /^-?W(\d{2})-?(\d{1})$/;

  // time tokens
  var parseTokenHH = /^(\d{2}([.,]\d*)?)$/;
  var parseTokenHHMM = /^(\d{2}):?(\d{2}([.,]\d*)?)$/;
  var parseTokenHHMMSS = /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/;

  // timezone tokens
  var parseTokenTimezone = /([Z+-].*)$/;
  var parseTokenTimezoneZ = /^(Z)$/;
  var parseTokenTimezoneHH = /^([+-])(\d{2})$/;
  var parseTokenTimezoneHHMM = /^([+-])(\d{2}):?(\d{2})$/;

  /**
   * @category Common Helpers
   * @summary Convert the given argument to an instance of Date.
   *
   * @description
   * Convert the given argument to an instance of Date.
   *
   * If the argument is an instance of Date, the function returns its clone.
   *
   * If the argument is a number, it is treated as a timestamp.
   *
   * If an argument is a string, the function tries to parse it.
   * Function accepts complete ISO 8601 formats as well as partial implementations.
   * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
   *
   * If all above fails, the function passes the given argument to Date constructor.
   *
   * @param {Date|String|Number} argument - the value to convert
   * @param {Object} [options] - the object with options
   * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format
   * @returns {Date} the parsed date in the local time zone
   *
   * @example
   * // Convert string '2014-02-11T11:30:30' to date:
   * var result = parse('2014-02-11T11:30:30')
   * //=> Tue Feb 11 2014 11:30:30
   *
   * @example
   * // Parse string '+02014101',
   * // if the additional number of digits in the extended year format is 1:
   * var result = parse('+02014101', {additionalDigits: 1})
   * //=> Fri Apr 11 2014 00:00:00
   */
  function parse (argument, dirtyOptions) {
    if (isDate$1(argument)) {
      // Prevent the date to lose the milliseconds when passed to new Date() in IE10
      return new Date(argument.getTime())
    } else if (typeof argument !== 'string') {
      return new Date(argument)
    }

    var options = dirtyOptions || {};
    var additionalDigits = options.additionalDigits;
    if (additionalDigits == null) {
      additionalDigits = DEFAULT_ADDITIONAL_DIGITS;
    } else {
      additionalDigits = Number(additionalDigits);
    }

    var dateStrings = splitDateString(argument);

    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    var year = parseYearResult.year;
    var restDateString = parseYearResult.restDateString;

    var date = parseDate(restDateString, year);

    if (date) {
      var timestamp = date.getTime();
      var time = 0;
      var offset;

      if (dateStrings.time) {
        time = parseTime(dateStrings.time);
      }

      if (dateStrings.timezone) {
        offset = parseTimezone(dateStrings.timezone) * MILLISECONDS_IN_MINUTE$1;
      } else {
        var fullTime = timestamp + time;
        var fullTimeDate = new Date(fullTime);

        offset = getTimezoneOffsetInMilliseconds$2(fullTimeDate);

        // Adjust time when it's coming from DST
        var fullTimeDateNextDay = new Date(fullTime);
        fullTimeDateNextDay.setDate(fullTimeDate.getDate() + 1);
        var offsetDiff =
          getTimezoneOffsetInMilliseconds$2(fullTimeDateNextDay) -
          getTimezoneOffsetInMilliseconds$2(fullTimeDate);
        if (offsetDiff > 0) {
          offset += offsetDiff;
        }
      }

      return new Date(timestamp + time + offset)
    } else {
      return new Date(argument)
    }
  }

  function splitDateString (dateString) {
    var dateStrings = {};
    var array = dateString.split(parseTokenDateTimeDelimeter);
    var timeString;

    if (parseTokenPlainTime.test(array[0])) {
      dateStrings.date = null;
      timeString = array[0];
    } else {
      dateStrings.date = array[0];
      timeString = array[1];
    }

    if (timeString) {
      var token = parseTokenTimezone.exec(timeString);
      if (token) {
        dateStrings.time = timeString.replace(token[1], '');
        dateStrings.timezone = token[1];
      } else {
        dateStrings.time = timeString;
      }
    }

    return dateStrings
  }

  function parseYear (dateString, additionalDigits) {
    var parseTokenYYY = parseTokensYYY[additionalDigits];
    var parseTokenYYYYY = parseTokensYYYYY[additionalDigits];

    var token;

    // YYYY or ±YYYYY
    token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString);
    if (token) {
      var yearString = token[1];
      return {
        year: parseInt(yearString, 10),
        restDateString: dateString.slice(yearString.length)
      }
    }

    // YY or ±YYY
    token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString);
    if (token) {
      var centuryString = token[1];
      return {
        year: parseInt(centuryString, 10) * 100,
        restDateString: dateString.slice(centuryString.length)
      }
    }

    // Invalid ISO-formatted year
    return {
      year: null
    }
  }

  function parseDate (dateString, year) {
    // Invalid ISO-formatted year
    if (year === null) {
      return null
    }

    var token;
    var date;
    var month;
    var week;

    // YYYY
    if (dateString.length === 0) {
      date = new Date(0);
      date.setUTCFullYear(year);
      return date
    }

    // YYYY-MM
    token = parseTokenMM.exec(dateString);
    if (token) {
      date = new Date(0);
      month = parseInt(token[1], 10) - 1;
      date.setUTCFullYear(year, month);
      return date
    }

    // YYYY-DDD or YYYYDDD
    token = parseTokenDDD.exec(dateString);
    if (token) {
      date = new Date(0);
      var dayOfYear = parseInt(token[1], 10);
      date.setUTCFullYear(year, 0, dayOfYear);
      return date
    }

    // YYYY-MM-DD or YYYYMMDD
    token = parseTokenMMDD.exec(dateString);
    if (token) {
      date = new Date(0);
      month = parseInt(token[1], 10) - 1;
      var day = parseInt(token[2], 10);
      date.setUTCFullYear(year, month, day);
      return date
    }

    // YYYY-Www or YYYYWww
    token = parseTokenWww.exec(dateString);
    if (token) {
      week = parseInt(token[1], 10) - 1;
      return dayOfISOYear(year, week)
    }

    // YYYY-Www-D or YYYYWwwD
    token = parseTokenWwwD.exec(dateString);
    if (token) {
      week = parseInt(token[1], 10) - 1;
      var dayOfWeek = parseInt(token[2], 10) - 1;
      return dayOfISOYear(year, week, dayOfWeek)
    }

    // Invalid ISO-formatted date
    return null
  }

  function parseTime (timeString) {
    var token;
    var hours;
    var minutes;

    // hh
    token = parseTokenHH.exec(timeString);
    if (token) {
      hours = parseFloat(token[1].replace(',', '.'));
      return (hours % 24) * MILLISECONDS_IN_HOUR
    }

    // hh:mm or hhmm
    token = parseTokenHHMM.exec(timeString);
    if (token) {
      hours = parseInt(token[1], 10);
      minutes = parseFloat(token[2].replace(',', '.'));
      return (hours % 24) * MILLISECONDS_IN_HOUR +
        minutes * MILLISECONDS_IN_MINUTE$1
    }

    // hh:mm:ss or hhmmss
    token = parseTokenHHMMSS.exec(timeString);
    if (token) {
      hours = parseInt(token[1], 10);
      minutes = parseInt(token[2], 10);
      var seconds = parseFloat(token[3].replace(',', '.'));
      return (hours % 24) * MILLISECONDS_IN_HOUR +
        minutes * MILLISECONDS_IN_MINUTE$1 +
        seconds * 1000
    }

    // Invalid ISO-formatted time
    return null
  }

  function parseTimezone (timezoneString) {
    var token;
    var absoluteOffset;

    // Z
    token = parseTokenTimezoneZ.exec(timezoneString);
    if (token) {
      return 0
    }

    // ±hh
    token = parseTokenTimezoneHH.exec(timezoneString);
    if (token) {
      absoluteOffset = parseInt(token[2], 10) * 60;
      return (token[1] === '+') ? -absoluteOffset : absoluteOffset
    }

    // ±hh:mm or ±hhmm
    token = parseTokenTimezoneHHMM.exec(timezoneString);
    if (token) {
      absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10);
      return (token[1] === '+') ? -absoluteOffset : absoluteOffset
    }

    return 0
  }

  function dayOfISOYear (isoYear, week, day) {
    week = week || 0;
    day = day || 0;
    var date = new Date(0);
    date.setUTCFullYear(isoYear, 0, 4);
    var fourthOfJanuaryDay = date.getUTCDay() || 7;
    var diff = week * 7 + day + 1 - fourthOfJanuaryDay;
    date.setUTCDate(date.getUTCDate() + diff);
    return date
  }

  var parse_1 = parse;

  var parse$1 = /*#__PURE__*/Object.freeze({
    default: parse_1,
    __moduleExports: parse_1
  });

  var parse$2 = ( parse$1 && parse_1 ) || parse$1;

  /**
   * @category Day Helpers
   * @summary Add the specified number of days to the given date.
   *
   * @description
   * Add the specified number of days to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of days to be added
   * @returns {Date} the new date with the days added
   *
   * @example
   * // Add 10 days to 1 September 2014:
   * var result = addDays(new Date(2014, 8, 1), 10)
   * //=> Thu Sep 11 2014 00:00:00
   */
  function addDays (dirtyDate, dirtyAmount) {
    var date = parse$2(dirtyDate);
    var amount = Number(dirtyAmount);
    date.setDate(date.getDate() + amount);
    return date
  }

  var add_days = addDays;

  var add_days$1 = /*#__PURE__*/Object.freeze({
    default: add_days,
    __moduleExports: add_days
  });

  /**
   * @category Millisecond Helpers
   * @summary Add the specified number of milliseconds to the given date.
   *
   * @description
   * Add the specified number of milliseconds to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of milliseconds to be added
   * @returns {Date} the new date with the milliseconds added
   *
   * @example
   * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
   * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
   * //=> Thu Jul 10 2014 12:45:30.750
   */
  function addMilliseconds (dirtyDate, dirtyAmount) {
    var timestamp = parse$2(dirtyDate).getTime();
    var amount = Number(dirtyAmount);
    return new Date(timestamp + amount)
  }

  var add_milliseconds = addMilliseconds;

  var add_milliseconds$1 = /*#__PURE__*/Object.freeze({
    default: add_milliseconds,
    __moduleExports: add_milliseconds
  });

  var addMilliseconds$1 = ( add_milliseconds$1 && add_milliseconds ) || add_milliseconds$1;

  var MILLISECONDS_IN_HOUR$1 = 3600000;

  /**
   * @category Hour Helpers
   * @summary Add the specified number of hours to the given date.
   *
   * @description
   * Add the specified number of hours to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of hours to be added
   * @returns {Date} the new date with the hours added
   *
   * @example
   * // Add 2 hours to 10 July 2014 23:00:00:
   * var result = addHours(new Date(2014, 6, 10, 23, 0), 2)
   * //=> Fri Jul 11 2014 01:00:00
   */
  function addHours (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addMilliseconds$1(dirtyDate, amount * MILLISECONDS_IN_HOUR$1)
  }

  var add_hours = addHours;

  var add_hours$1 = /*#__PURE__*/Object.freeze({
    default: add_hours,
    __moduleExports: add_hours
  });

  /**
   * @category Week Helpers
   * @summary Return the start of a week for the given date.
   *
   * @description
   * Return the start of a week for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @param {Object} [options] - the object with options
   * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
   * @returns {Date} the start of a week
   *
   * @example
   * // The start of a week for 2 September 2014 11:55:00:
   * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Sun Aug 31 2014 00:00:00
   *
   * @example
   * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
   * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
   * //=> Mon Sep 01 2014 00:00:00
   */
  function startOfWeek (dirtyDate, dirtyOptions) {
    var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0;

    var date = parse$2(dirtyDate);
    var day = date.getDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;

    date.setDate(date.getDate() - diff);
    date.setHours(0, 0, 0, 0);
    return date
  }

  var start_of_week = startOfWeek;

  var start_of_week$1 = /*#__PURE__*/Object.freeze({
    default: start_of_week,
    __moduleExports: start_of_week
  });

  var startOfWeek$1 = ( start_of_week$1 && start_of_week ) || start_of_week$1;

  /**
   * @category ISO Week Helpers
   * @summary Return the start of an ISO week for the given date.
   *
   * @description
   * Return the start of an ISO week for the given date.
   * The result will be in the local timezone.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the start of an ISO week
   *
   * @example
   * // The start of an ISO week for 2 September 2014 11:55:00:
   * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Mon Sep 01 2014 00:00:00
   */
  function startOfISOWeek (dirtyDate) {
    return startOfWeek$1(dirtyDate, {weekStartsOn: 1})
  }

  var start_of_iso_week = startOfISOWeek;

  var start_of_iso_week$1 = /*#__PURE__*/Object.freeze({
    default: start_of_iso_week,
    __moduleExports: start_of_iso_week
  });

  var startOfISOWeek$1 = ( start_of_iso_week$1 && start_of_iso_week ) || start_of_iso_week$1;

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Get the ISO week-numbering year of the given date.
   *
   * @description
   * Get the ISO week-numbering year of the given date,
   * which always starts 3 days before the year's first Thursday.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the ISO week-numbering year
   *
   * @example
   * // Which ISO-week numbering year is 2 January 2005?
   * var result = getISOYear(new Date(2005, 0, 2))
   * //=> 2004
   */
  function getISOYear (dirtyDate) {
    var date = parse$2(dirtyDate);
    var year = date.getFullYear();

    var fourthOfJanuaryOfNextYear = new Date(0);
    fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
    var startOfNextYear = startOfISOWeek$1(fourthOfJanuaryOfNextYear);

    var fourthOfJanuaryOfThisYear = new Date(0);
    fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
    var startOfThisYear = startOfISOWeek$1(fourthOfJanuaryOfThisYear);

    if (date.getTime() >= startOfNextYear.getTime()) {
      return year + 1
    } else if (date.getTime() >= startOfThisYear.getTime()) {
      return year
    } else {
      return year - 1
    }
  }

  var get_iso_year = getISOYear;

  var get_iso_year$1 = /*#__PURE__*/Object.freeze({
    default: get_iso_year,
    __moduleExports: get_iso_year
  });

  var getISOYear$1 = ( get_iso_year$1 && get_iso_year ) || get_iso_year$1;

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Return the start of an ISO week-numbering year for the given date.
   *
   * @description
   * Return the start of an ISO week-numbering year,
   * which always starts 3 days before the year's first Thursday.
   * The result will be in the local timezone.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the start of an ISO year
   *
   * @example
   * // The start of an ISO week-numbering year for 2 July 2005:
   * var result = startOfISOYear(new Date(2005, 6, 2))
   * //=> Mon Jan 03 2005 00:00:00
   */
  function startOfISOYear (dirtyDate) {
    var year = getISOYear$1(dirtyDate);
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setFullYear(year, 0, 4);
    fourthOfJanuary.setHours(0, 0, 0, 0);
    var date = startOfISOWeek$1(fourthOfJanuary);
    return date
  }

  var start_of_iso_year = startOfISOYear;

  var start_of_iso_year$1 = /*#__PURE__*/Object.freeze({
    default: start_of_iso_year,
    __moduleExports: start_of_iso_year
  });

  /**
   * @category Day Helpers
   * @summary Return the start of a day for the given date.
   *
   * @description
   * Return the start of a day for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the start of a day
   *
   * @example
   * // The start of a day for 2 September 2014 11:55:00:
   * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Tue Sep 02 2014 00:00:00
   */
  function startOfDay (dirtyDate) {
    var date = parse$2(dirtyDate);
    date.setHours(0, 0, 0, 0);
    return date
  }

  var start_of_day = startOfDay;

  var start_of_day$1 = /*#__PURE__*/Object.freeze({
    default: start_of_day,
    __moduleExports: start_of_day
  });

  var startOfDay$1 = ( start_of_day$1 && start_of_day ) || start_of_day$1;

  var MILLISECONDS_IN_MINUTE$2 = 60000;
  var MILLISECONDS_IN_DAY = 86400000;

  /**
   * @category Day Helpers
   * @summary Get the number of calendar days between the given dates.
   *
   * @description
   * Get the number of calendar days between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of calendar days
   *
   * @example
   * // How many calendar days are between
   * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
   * var result = differenceInCalendarDays(
   *   new Date(2012, 6, 2, 0, 0),
   *   new Date(2011, 6, 2, 23, 0)
   * )
   * //=> 366
   */
  function differenceInCalendarDays (dirtyDateLeft, dirtyDateRight) {
    var startOfDayLeft = startOfDay$1(dirtyDateLeft);
    var startOfDayRight = startOfDay$1(dirtyDateRight);

    var timestampLeft = startOfDayLeft.getTime() -
      startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$2;
    var timestampRight = startOfDayRight.getTime() -
      startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$2;

    // Round the number of days to the nearest integer
    // because the number of milliseconds in a day is not constant
    // (e.g. it's different in the day of the daylight saving time clock shift)
    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY)
  }

  var difference_in_calendar_days = differenceInCalendarDays;

  var difference_in_calendar_days$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_calendar_days,
    __moduleExports: difference_in_calendar_days
  });

  var startOfISOYear$1 = ( start_of_iso_year$1 && start_of_iso_year ) || start_of_iso_year$1;

  var differenceInCalendarDays$1 = ( difference_in_calendar_days$1 && difference_in_calendar_days ) || difference_in_calendar_days$1;

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Set the ISO week-numbering year to the given date.
   *
   * @description
   * Set the ISO week-numbering year to the given date,
   * saving the week number and the weekday number.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} isoYear - the ISO week-numbering year of the new date
   * @returns {Date} the new date with the ISO week-numbering year setted
   *
   * @example
   * // Set ISO week-numbering year 2007 to 29 December 2008:
   * var result = setISOYear(new Date(2008, 11, 29), 2007)
   * //=> Mon Jan 01 2007 00:00:00
   */
  function setISOYear (dirtyDate, dirtyISOYear) {
    var date = parse$2(dirtyDate);
    var isoYear = Number(dirtyISOYear);
    var diff = differenceInCalendarDays$1(date, startOfISOYear$1(date));
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setFullYear(isoYear, 0, 4);
    fourthOfJanuary.setHours(0, 0, 0, 0);
    date = startOfISOYear$1(fourthOfJanuary);
    date.setDate(date.getDate() + diff);
    return date
  }

  var set_iso_year = setISOYear;

  var set_iso_year$1 = /*#__PURE__*/Object.freeze({
    default: set_iso_year,
    __moduleExports: set_iso_year
  });

  var setISOYear$1 = ( set_iso_year$1 && set_iso_year ) || set_iso_year$1;

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Add the specified number of ISO week-numbering years to the given date.
   *
   * @description
   * Add the specified number of ISO week-numbering years to the given date.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of ISO week-numbering years to be added
   * @returns {Date} the new date with the ISO week-numbering years added
   *
   * @example
   * // Add 5 ISO week-numbering years to 2 July 2010:
   * var result = addISOYears(new Date(2010, 6, 2), 5)
   * //=> Fri Jun 26 2015 00:00:00
   */
  function addISOYears (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return setISOYear$1(dirtyDate, getISOYear$1(dirtyDate) + amount)
  }

  var add_iso_years = addISOYears;

  var add_iso_years$1 = /*#__PURE__*/Object.freeze({
    default: add_iso_years,
    __moduleExports: add_iso_years
  });

  var MILLISECONDS_IN_MINUTE$3 = 60000;

  /**
   * @category Minute Helpers
   * @summary Add the specified number of minutes to the given date.
   *
   * @description
   * Add the specified number of minutes to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of minutes to be added
   * @returns {Date} the new date with the minutes added
   *
   * @example
   * // Add 30 minutes to 10 July 2014 12:00:00:
   * var result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
   * //=> Thu Jul 10 2014 12:30:00
   */
  function addMinutes (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addMilliseconds$1(dirtyDate, amount * MILLISECONDS_IN_MINUTE$3)
  }

  var add_minutes = addMinutes;

  var add_minutes$1 = /*#__PURE__*/Object.freeze({
    default: add_minutes,
    __moduleExports: add_minutes
  });

  /**
   * @category Month Helpers
   * @summary Get the number of days in a month of the given date.
   *
   * @description
   * Get the number of days in a month of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the number of days in a month
   *
   * @example
   * // How many days are in February 2000?
   * var result = getDaysInMonth(new Date(2000, 1))
   * //=> 29
   */
  function getDaysInMonth (dirtyDate) {
    var date = parse$2(dirtyDate);
    var year = date.getFullYear();
    var monthIndex = date.getMonth();
    var lastDayOfMonth = new Date(0);
    lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
    lastDayOfMonth.setHours(0, 0, 0, 0);
    return lastDayOfMonth.getDate()
  }

  var get_days_in_month = getDaysInMonth;

  var get_days_in_month$1 = /*#__PURE__*/Object.freeze({
    default: get_days_in_month,
    __moduleExports: get_days_in_month
  });

  var getDaysInMonth$1 = ( get_days_in_month$1 && get_days_in_month ) || get_days_in_month$1;

  /**
   * @category Month Helpers
   * @summary Add the specified number of months to the given date.
   *
   * @description
   * Add the specified number of months to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of months to be added
   * @returns {Date} the new date with the months added
   *
   * @example
   * // Add 5 months to 1 September 2014:
   * var result = addMonths(new Date(2014, 8, 1), 5)
   * //=> Sun Feb 01 2015 00:00:00
   */
  function addMonths (dirtyDate, dirtyAmount) {
    var date = parse$2(dirtyDate);
    var amount = Number(dirtyAmount);
    var desiredMonth = date.getMonth() + amount;
    var dateWithDesiredMonth = new Date(0);
    dateWithDesiredMonth.setFullYear(date.getFullYear(), desiredMonth, 1);
    dateWithDesiredMonth.setHours(0, 0, 0, 0);
    var daysInMonth = getDaysInMonth$1(dateWithDesiredMonth);
    // Set the last day of the new month
    // if the original date was the last day of the longer month
    date.setMonth(desiredMonth, Math.min(daysInMonth, date.getDate()));
    return date
  }

  var add_months = addMonths;

  var add_months$1 = /*#__PURE__*/Object.freeze({
    default: add_months,
    __moduleExports: add_months
  });

  var addMonths$1 = ( add_months$1 && add_months ) || add_months$1;

  /**
   * @category Quarter Helpers
   * @summary Add the specified number of year quarters to the given date.
   *
   * @description
   * Add the specified number of year quarters to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of quarters to be added
   * @returns {Date} the new date with the quarters added
   *
   * @example
   * // Add 1 quarter to 1 September 2014:
   * var result = addQuarters(new Date(2014, 8, 1), 1)
   * //=> Mon Dec 01 2014 00:00:00
   */
  function addQuarters (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    var months = amount * 3;
    return addMonths$1(dirtyDate, months)
  }

  var add_quarters = addQuarters;

  var add_quarters$1 = /*#__PURE__*/Object.freeze({
    default: add_quarters,
    __moduleExports: add_quarters
  });

  /**
   * @category Second Helpers
   * @summary Add the specified number of seconds to the given date.
   *
   * @description
   * Add the specified number of seconds to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of seconds to be added
   * @returns {Date} the new date with the seconds added
   *
   * @example
   * // Add 30 seconds to 10 July 2014 12:45:00:
   * var result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
   * //=> Thu Jul 10 2014 12:45:30
   */
  function addSeconds (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addMilliseconds$1(dirtyDate, amount * 1000)
  }

  var add_seconds = addSeconds;

  var add_seconds$1 = /*#__PURE__*/Object.freeze({
    default: add_seconds,
    __moduleExports: add_seconds
  });

  var addDays$1 = ( add_days$1 && add_days ) || add_days$1;

  /**
   * @category Week Helpers
   * @summary Add the specified number of weeks to the given date.
   *
   * @description
   * Add the specified number of week to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of weeks to be added
   * @returns {Date} the new date with the weeks added
   *
   * @example
   * // Add 4 weeks to 1 September 2014:
   * var result = addWeeks(new Date(2014, 8, 1), 4)
   * //=> Mon Sep 29 2014 00:00:00
   */
  function addWeeks (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    var days = amount * 7;
    return addDays$1(dirtyDate, days)
  }

  var add_weeks = addWeeks;

  var add_weeks$1 = /*#__PURE__*/Object.freeze({
    default: add_weeks,
    __moduleExports: add_weeks
  });

  /**
   * @category Year Helpers
   * @summary Add the specified number of years to the given date.
   *
   * @description
   * Add the specified number of years to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of years to be added
   * @returns {Date} the new date with the years added
   *
   * @example
   * // Add 5 years to 1 September 2014:
   * var result = addYears(new Date(2014, 8, 1), 5)
   * //=> Sun Sep 01 2019 00:00:00
   */
  function addYears (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addMonths$1(dirtyDate, amount * 12)
  }

  var add_years = addYears;

  var add_years$1 = /*#__PURE__*/Object.freeze({
    default: add_years,
    __moduleExports: add_years
  });

  /**
   * @category Range Helpers
   * @summary Is the given date range overlapping with another date range?
   *
   * @description
   * Is the given date range overlapping with another date range?
   *
   * @param {Date|String|Number} initialRangeStartDate - the start of the initial range
   * @param {Date|String|Number} initialRangeEndDate - the end of the initial range
   * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with
   * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with
   * @returns {Boolean} whether the date ranges are overlapping
   * @throws {Error} startDate of a date range cannot be after its endDate
   *
   * @example
   * // For overlapping date ranges:
   * areRangesOverlapping(
   *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)
   * )
   * //=> true
   *
   * @example
   * // For non-overlapping date ranges:
   * areRangesOverlapping(
   *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)
   * )
   * //=> false
   */
  function areRangesOverlapping (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {
    var initialStartTime = parse$2(dirtyInitialRangeStartDate).getTime();
    var initialEndTime = parse$2(dirtyInitialRangeEndDate).getTime();
    var comparedStartTime = parse$2(dirtyComparedRangeStartDate).getTime();
    var comparedEndTime = parse$2(dirtyComparedRangeEndDate).getTime();

    if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {
      throw new Error('The start of the range cannot be after the end of the range')
    }

    return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime
  }

  var are_ranges_overlapping = areRangesOverlapping;

  var are_ranges_overlapping$1 = /*#__PURE__*/Object.freeze({
    default: are_ranges_overlapping,
    __moduleExports: are_ranges_overlapping
  });

  /**
   * @category Common Helpers
   * @summary Return an index of the closest date from the array comparing to the given date.
   *
   * @description
   * Return an index of the closest date from the array comparing to the given date.
   *
   * @param {Date|String|Number} dateToCompare - the date to compare with
   * @param {Date[]|String[]|Number[]} datesArray - the array to search
   * @returns {Number} an index of the date closest to the given date
   * @throws {TypeError} the second argument must be an instance of Array
   *
   * @example
   * // Which date is closer to 6 September 2015?
   * var dateToCompare = new Date(2015, 8, 6)
   * var datesArray = [
   *   new Date(2015, 0, 1),
   *   new Date(2016, 0, 1),
   *   new Date(2017, 0, 1)
   * ]
   * var result = closestIndexTo(dateToCompare, datesArray)
   * //=> 1
   */
  function closestIndexTo (dirtyDateToCompare, dirtyDatesArray) {
    if (!(dirtyDatesArray instanceof Array)) {
      throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array')
    }

    var dateToCompare = parse$2(dirtyDateToCompare);
    var timeToCompare = dateToCompare.getTime();

    var result;
    var minDistance;

    dirtyDatesArray.forEach(function (dirtyDate, index) {
      var currentDate = parse$2(dirtyDate);
      var distance = Math.abs(timeToCompare - currentDate.getTime());
      if (result === undefined || distance < minDistance) {
        result = index;
        minDistance = distance;
      }
    });

    return result
  }

  var closest_index_to = closestIndexTo;

  var closest_index_to$1 = /*#__PURE__*/Object.freeze({
    default: closest_index_to,
    __moduleExports: closest_index_to
  });

  /**
   * @category Common Helpers
   * @summary Return a date from the array closest to the given date.
   *
   * @description
   * Return a date from the array closest to the given date.
   *
   * @param {Date|String|Number} dateToCompare - the date to compare with
   * @param {Date[]|String[]|Number[]} datesArray - the array to search
   * @returns {Date} the date from the array closest to the given date
   * @throws {TypeError} the second argument must be an instance of Array
   *
   * @example
   * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?
   * var dateToCompare = new Date(2015, 8, 6)
   * var result = closestTo(dateToCompare, [
   *   new Date(2000, 0, 1),
   *   new Date(2030, 0, 1)
   * ])
   * //=> Tue Jan 01 2030 00:00:00
   */
  function closestTo (dirtyDateToCompare, dirtyDatesArray) {
    if (!(dirtyDatesArray instanceof Array)) {
      throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array')
    }

    var dateToCompare = parse$2(dirtyDateToCompare);
    var timeToCompare = dateToCompare.getTime();

    var result;
    var minDistance;

    dirtyDatesArray.forEach(function (dirtyDate) {
      var currentDate = parse$2(dirtyDate);
      var distance = Math.abs(timeToCompare - currentDate.getTime());
      if (result === undefined || distance < minDistance) {
        result = currentDate;
        minDistance = distance;
      }
    });

    return result
  }

  var closest_to = closestTo;

  var closest_to$1 = /*#__PURE__*/Object.freeze({
    default: closest_to,
    __moduleExports: closest_to
  });

  /**
   * @category Common Helpers
   * @summary Compare the two dates and return -1, 0 or 1.
   *
   * @description
   * Compare the two dates and return 1 if the first date is after the second,
   * -1 if the first date is before the second or 0 if dates are equal.
   *
   * @param {Date|String|Number} dateLeft - the first date to compare
   * @param {Date|String|Number} dateRight - the second date to compare
   * @returns {Number} the result of the comparison
   *
   * @example
   * // Compare 11 February 1987 and 10 July 1989:
   * var result = compareAsc(
   *   new Date(1987, 1, 11),
   *   new Date(1989, 6, 10)
   * )
   * //=> -1
   *
   * @example
   * // Sort the array of dates:
   * var result = [
   *   new Date(1995, 6, 2),
   *   new Date(1987, 1, 11),
   *   new Date(1989, 6, 10)
   * ].sort(compareAsc)
   * //=> [
   * //   Wed Feb 11 1987 00:00:00,
   * //   Mon Jul 10 1989 00:00:00,
   * //   Sun Jul 02 1995 00:00:00
   * // ]
   */
  function compareAsc (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var timeLeft = dateLeft.getTime();
    var dateRight = parse$2(dirtyDateRight);
    var timeRight = dateRight.getTime();

    if (timeLeft < timeRight) {
      return -1
    } else if (timeLeft > timeRight) {
      return 1
    } else {
      return 0
    }
  }

  var compare_asc = compareAsc;

  var compare_asc$1 = /*#__PURE__*/Object.freeze({
    default: compare_asc,
    __moduleExports: compare_asc
  });

  /**
   * @category Common Helpers
   * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.
   *
   * @description
   * Compare the two dates and return -1 if the first date is after the second,
   * 1 if the first date is before the second or 0 if dates are equal.
   *
   * @param {Date|String|Number} dateLeft - the first date to compare
   * @param {Date|String|Number} dateRight - the second date to compare
   * @returns {Number} the result of the comparison
   *
   * @example
   * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:
   * var result = compareDesc(
   *   new Date(1987, 1, 11),
   *   new Date(1989, 6, 10)
   * )
   * //=> 1
   *
   * @example
   * // Sort the array of dates in reverse chronological order:
   * var result = [
   *   new Date(1995, 6, 2),
   *   new Date(1987, 1, 11),
   *   new Date(1989, 6, 10)
   * ].sort(compareDesc)
   * //=> [
   * //   Sun Jul 02 1995 00:00:00,
   * //   Mon Jul 10 1989 00:00:00,
   * //   Wed Feb 11 1987 00:00:00
   * // ]
   */
  function compareDesc (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var timeLeft = dateLeft.getTime();
    var dateRight = parse$2(dirtyDateRight);
    var timeRight = dateRight.getTime();

    if (timeLeft > timeRight) {
      return -1
    } else if (timeLeft < timeRight) {
      return 1
    } else {
      return 0
    }
  }

  var compare_desc = compareDesc;

  var compare_desc$1 = /*#__PURE__*/Object.freeze({
    default: compare_desc,
    __moduleExports: compare_desc
  });

  var MILLISECONDS_IN_MINUTE$4 = 60000;
  var MILLISECONDS_IN_WEEK = 604800000;

  /**
   * @category ISO Week Helpers
   * @summary Get the number of calendar ISO weeks between the given dates.
   *
   * @description
   * Get the number of calendar ISO weeks between the given dates.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of calendar ISO weeks
   *
   * @example
   * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?
   * var result = differenceInCalendarISOWeeks(
   *   new Date(2014, 6, 21),
   *   new Date(2014, 6, 6)
   * )
   * //=> 3
   */
  function differenceInCalendarISOWeeks (dirtyDateLeft, dirtyDateRight) {
    var startOfISOWeekLeft = startOfISOWeek$1(dirtyDateLeft);
    var startOfISOWeekRight = startOfISOWeek$1(dirtyDateRight);

    var timestampLeft = startOfISOWeekLeft.getTime() -
      startOfISOWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$4;
    var timestampRight = startOfISOWeekRight.getTime() -
      startOfISOWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$4;

    // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK)
  }

  var difference_in_calendar_iso_weeks = differenceInCalendarISOWeeks;

  var difference_in_calendar_iso_weeks$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_calendar_iso_weeks,
    __moduleExports: difference_in_calendar_iso_weeks
  });

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Get the number of calendar ISO week-numbering years between the given dates.
   *
   * @description
   * Get the number of calendar ISO week-numbering years between the given dates.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of calendar ISO week-numbering years
   *
   * @example
   * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?
   * var result = differenceInCalendarISOYears(
   *   new Date(2012, 0, 1),
   *   new Date(2010, 0, 1)
   * )
   * //=> 2
   */
  function differenceInCalendarISOYears (dirtyDateLeft, dirtyDateRight) {
    return getISOYear$1(dirtyDateLeft) - getISOYear$1(dirtyDateRight)
  }

  var difference_in_calendar_iso_years = differenceInCalendarISOYears;

  var difference_in_calendar_iso_years$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_calendar_iso_years,
    __moduleExports: difference_in_calendar_iso_years
  });

  /**
   * @category Month Helpers
   * @summary Get the number of calendar months between the given dates.
   *
   * @description
   * Get the number of calendar months between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of calendar months
   *
   * @example
   * // How many calendar months are between 31 January 2014 and 1 September 2014?
   * var result = differenceInCalendarMonths(
   *   new Date(2014, 8, 1),
   *   new Date(2014, 0, 31)
   * )
   * //=> 8
   */
  function differenceInCalendarMonths (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var dateRight = parse$2(dirtyDateRight);

    var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
    var monthDiff = dateLeft.getMonth() - dateRight.getMonth();

    return yearDiff * 12 + monthDiff
  }

  var difference_in_calendar_months = differenceInCalendarMonths;

  var difference_in_calendar_months$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_calendar_months,
    __moduleExports: difference_in_calendar_months
  });

  /**
   * @category Quarter Helpers
   * @summary Get the year quarter of the given date.
   *
   * @description
   * Get the year quarter of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the quarter
   *
   * @example
   * // Which quarter is 2 July 2014?
   * var result = getQuarter(new Date(2014, 6, 2))
   * //=> 3
   */
  function getQuarter (dirtyDate) {
    var date = parse$2(dirtyDate);
    var quarter = Math.floor(date.getMonth() / 3) + 1;
    return quarter
  }

  var get_quarter = getQuarter;

  var get_quarter$1 = /*#__PURE__*/Object.freeze({
    default: get_quarter,
    __moduleExports: get_quarter
  });

  var getQuarter$1 = ( get_quarter$1 && get_quarter ) || get_quarter$1;

  /**
   * @category Quarter Helpers
   * @summary Get the number of calendar quarters between the given dates.
   *
   * @description
   * Get the number of calendar quarters between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of calendar quarters
   *
   * @example
   * // How many calendar quarters are between 31 December 2013 and 2 July 2014?
   * var result = differenceInCalendarQuarters(
   *   new Date(2014, 6, 2),
   *   new Date(2013, 11, 31)
   * )
   * //=> 3
   */
  function differenceInCalendarQuarters (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var dateRight = parse$2(dirtyDateRight);

    var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
    var quarterDiff = getQuarter$1(dateLeft) - getQuarter$1(dateRight);

    return yearDiff * 4 + quarterDiff
  }

  var difference_in_calendar_quarters = differenceInCalendarQuarters;

  var difference_in_calendar_quarters$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_calendar_quarters,
    __moduleExports: difference_in_calendar_quarters
  });

  var MILLISECONDS_IN_MINUTE$5 = 60000;
  var MILLISECONDS_IN_WEEK$1 = 604800000;

  /**
   * @category Week Helpers
   * @summary Get the number of calendar weeks between the given dates.
   *
   * @description
   * Get the number of calendar weeks between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @param {Object} [options] - the object with options
   * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
   * @returns {Number} the number of calendar weeks
   *
   * @example
   * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
   * var result = differenceInCalendarWeeks(
   *   new Date(2014, 6, 20),
   *   new Date(2014, 6, 5)
   * )
   * //=> 3
   *
   * @example
   * // If the week starts on Monday,
   * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
   * var result = differenceInCalendarWeeks(
   *   new Date(2014, 6, 20),
   *   new Date(2014, 6, 5),
   *   {weekStartsOn: 1}
   * )
   * //=> 2
   */
  function differenceInCalendarWeeks (dirtyDateLeft, dirtyDateRight, dirtyOptions) {
    var startOfWeekLeft = startOfWeek$1(dirtyDateLeft, dirtyOptions);
    var startOfWeekRight = startOfWeek$1(dirtyDateRight, dirtyOptions);

    var timestampLeft = startOfWeekLeft.getTime() -
      startOfWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$5;
    var timestampRight = startOfWeekRight.getTime() -
      startOfWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$5;

    // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK$1)
  }

  var difference_in_calendar_weeks = differenceInCalendarWeeks;

  var difference_in_calendar_weeks$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_calendar_weeks,
    __moduleExports: difference_in_calendar_weeks
  });

  /**
   * @category Year Helpers
   * @summary Get the number of calendar years between the given dates.
   *
   * @description
   * Get the number of calendar years between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of calendar years
   *
   * @example
   * // How many calendar years are between 31 December 2013 and 11 February 2015?
   * var result = differenceInCalendarYears(
   *   new Date(2015, 1, 11),
   *   new Date(2013, 11, 31)
   * )
   * //=> 2
   */
  function differenceInCalendarYears (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var dateRight = parse$2(dirtyDateRight);

    return dateLeft.getFullYear() - dateRight.getFullYear()
  }

  var difference_in_calendar_years = differenceInCalendarYears;

  var difference_in_calendar_years$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_calendar_years,
    __moduleExports: difference_in_calendar_years
  });

  var compareAsc$1 = ( compare_asc$1 && compare_asc ) || compare_asc$1;

  /**
   * @category Day Helpers
   * @summary Get the number of full days between the given dates.
   *
   * @description
   * Get the number of full days between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of full days
   *
   * @example
   * // How many full days are between
   * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
   * var result = differenceInDays(
   *   new Date(2012, 6, 2, 0, 0),
   *   new Date(2011, 6, 2, 23, 0)
   * )
   * //=> 365
   */
  function differenceInDays (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var dateRight = parse$2(dirtyDateRight);

    var sign = compareAsc$1(dateLeft, dateRight);
    var difference = Math.abs(differenceInCalendarDays$1(dateLeft, dateRight));
    dateLeft.setDate(dateLeft.getDate() - sign * difference);

    // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
    // If so, result must be decreased by 1 in absolute value
    var isLastDayNotFull = compareAsc$1(dateLeft, dateRight) === -sign;
    return sign * (difference - isLastDayNotFull)
  }

  var difference_in_days = differenceInDays;

  var difference_in_days$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_days,
    __moduleExports: difference_in_days
  });

  /**
   * @category Millisecond Helpers
   * @summary Get the number of milliseconds between the given dates.
   *
   * @description
   * Get the number of milliseconds between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of milliseconds
   *
   * @example
   * // How many milliseconds are between
   * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
   * var result = differenceInMilliseconds(
   *   new Date(2014, 6, 2, 12, 30, 21, 700),
   *   new Date(2014, 6, 2, 12, 30, 20, 600)
   * )
   * //=> 1100
   */
  function differenceInMilliseconds (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var dateRight = parse$2(dirtyDateRight);
    return dateLeft.getTime() - dateRight.getTime()
  }

  var difference_in_milliseconds = differenceInMilliseconds;

  var difference_in_milliseconds$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_milliseconds,
    __moduleExports: difference_in_milliseconds
  });

  var differenceInMilliseconds$1 = ( difference_in_milliseconds$1 && difference_in_milliseconds ) || difference_in_milliseconds$1;

  var MILLISECONDS_IN_HOUR$2 = 3600000;

  /**
   * @category Hour Helpers
   * @summary Get the number of hours between the given dates.
   *
   * @description
   * Get the number of hours between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of hours
   *
   * @example
   * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
   * var result = differenceInHours(
   *   new Date(2014, 6, 2, 19, 0),
   *   new Date(2014, 6, 2, 6, 50)
   * )
   * //=> 12
   */
  function differenceInHours (dirtyDateLeft, dirtyDateRight) {
    var diff = differenceInMilliseconds$1(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_HOUR$2;
    return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
  }

  var difference_in_hours = differenceInHours;

  var difference_in_hours$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_hours,
    __moduleExports: difference_in_hours
  });

  var addISOYears$1 = ( add_iso_years$1 && add_iso_years ) || add_iso_years$1;

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Subtract the specified number of ISO week-numbering years from the given date.
   *
   * @description
   * Subtract the specified number of ISO week-numbering years from the given date.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of ISO week-numbering years to be subtracted
   * @returns {Date} the new date with the ISO week-numbering years subtracted
   *
   * @example
   * // Subtract 5 ISO week-numbering years from 1 September 2014:
   * var result = subISOYears(new Date(2014, 8, 1), 5)
   * //=> Mon Aug 31 2009 00:00:00
   */
  function subISOYears (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addISOYears$1(dirtyDate, -amount)
  }

  var sub_iso_years = subISOYears;

  var sub_iso_years$1 = /*#__PURE__*/Object.freeze({
    default: sub_iso_years,
    __moduleExports: sub_iso_years
  });

  var differenceInCalendarISOYears$1 = ( difference_in_calendar_iso_years$1 && difference_in_calendar_iso_years ) || difference_in_calendar_iso_years$1;

  var subISOYears$1 = ( sub_iso_years$1 && sub_iso_years ) || sub_iso_years$1;

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Get the number of full ISO week-numbering years between the given dates.
   *
   * @description
   * Get the number of full ISO week-numbering years between the given dates.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of full ISO week-numbering years
   *
   * @example
   * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?
   * var result = differenceInISOYears(
   *   new Date(2012, 0, 1),
   *   new Date(2010, 0, 1)
   * )
   * //=> 1
   */
  function differenceInISOYears (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var dateRight = parse$2(dirtyDateRight);

    var sign = compareAsc$1(dateLeft, dateRight);
    var difference = Math.abs(differenceInCalendarISOYears$1(dateLeft, dateRight));
    dateLeft = subISOYears$1(dateLeft, sign * difference);

    // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1
    // if last calendar ISO year is not full
    // If so, result must be decreased by 1 in absolute value
    var isLastISOYearNotFull = compareAsc$1(dateLeft, dateRight) === -sign;
    return sign * (difference - isLastISOYearNotFull)
  }

  var difference_in_iso_years = differenceInISOYears;

  var difference_in_iso_years$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_iso_years,
    __moduleExports: difference_in_iso_years
  });

  var MILLISECONDS_IN_MINUTE$6 = 60000;

  /**
   * @category Minute Helpers
   * @summary Get the number of minutes between the given dates.
   *
   * @description
   * Get the number of minutes between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of minutes
   *
   * @example
   * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
   * var result = differenceInMinutes(
   *   new Date(2014, 6, 2, 12, 20, 0),
   *   new Date(2014, 6, 2, 12, 7, 59)
   * )
   * //=> 12
   */
  function differenceInMinutes (dirtyDateLeft, dirtyDateRight) {
    var diff = differenceInMilliseconds$1(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE$6;
    return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
  }

  var difference_in_minutes = differenceInMinutes;

  var difference_in_minutes$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_minutes,
    __moduleExports: difference_in_minutes
  });

  var differenceInCalendarMonths$1 = ( difference_in_calendar_months$1 && difference_in_calendar_months ) || difference_in_calendar_months$1;

  /**
   * @category Month Helpers
   * @summary Get the number of full months between the given dates.
   *
   * @description
   * Get the number of full months between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of full months
   *
   * @example
   * // How many full months are between 31 January 2014 and 1 September 2014?
   * var result = differenceInMonths(
   *   new Date(2014, 8, 1),
   *   new Date(2014, 0, 31)
   * )
   * //=> 7
   */
  function differenceInMonths (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var dateRight = parse$2(dirtyDateRight);

    var sign = compareAsc$1(dateLeft, dateRight);
    var difference = Math.abs(differenceInCalendarMonths$1(dateLeft, dateRight));
    dateLeft.setMonth(dateLeft.getMonth() - sign * difference);

    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
    // If so, result must be decreased by 1 in absolute value
    var isLastMonthNotFull = compareAsc$1(dateLeft, dateRight) === -sign;
    return sign * (difference - isLastMonthNotFull)
  }

  var difference_in_months = differenceInMonths;

  var difference_in_months$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_months,
    __moduleExports: difference_in_months
  });

  var differenceInMonths$1 = ( difference_in_months$1 && difference_in_months ) || difference_in_months$1;

  /**
   * @category Quarter Helpers
   * @summary Get the number of full quarters between the given dates.
   *
   * @description
   * Get the number of full quarters between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of full quarters
   *
   * @example
   * // How many full quarters are between 31 December 2013 and 2 July 2014?
   * var result = differenceInQuarters(
   *   new Date(2014, 6, 2),
   *   new Date(2013, 11, 31)
   * )
   * //=> 2
   */
  function differenceInQuarters (dirtyDateLeft, dirtyDateRight) {
    var diff = differenceInMonths$1(dirtyDateLeft, dirtyDateRight) / 3;
    return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
  }

  var difference_in_quarters = differenceInQuarters;

  var difference_in_quarters$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_quarters,
    __moduleExports: difference_in_quarters
  });

  /**
   * @category Second Helpers
   * @summary Get the number of seconds between the given dates.
   *
   * @description
   * Get the number of seconds between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of seconds
   *
   * @example
   * // How many seconds are between
   * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
   * var result = differenceInSeconds(
   *   new Date(2014, 6, 2, 12, 30, 20, 0),
   *   new Date(2014, 6, 2, 12, 30, 7, 999)
   * )
   * //=> 12
   */
  function differenceInSeconds (dirtyDateLeft, dirtyDateRight) {
    var diff = differenceInMilliseconds$1(dirtyDateLeft, dirtyDateRight) / 1000;
    return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
  }

  var difference_in_seconds = differenceInSeconds;

  var difference_in_seconds$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_seconds,
    __moduleExports: difference_in_seconds
  });

  var differenceInDays$1 = ( difference_in_days$1 && difference_in_days ) || difference_in_days$1;

  /**
   * @category Week Helpers
   * @summary Get the number of full weeks between the given dates.
   *
   * @description
   * Get the number of full weeks between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of full weeks
   *
   * @example
   * // How many full weeks are between 5 July 2014 and 20 July 2014?
   * var result = differenceInWeeks(
   *   new Date(2014, 6, 20),
   *   new Date(2014, 6, 5)
   * )
   * //=> 2
   */
  function differenceInWeeks (dirtyDateLeft, dirtyDateRight) {
    var diff = differenceInDays$1(dirtyDateLeft, dirtyDateRight) / 7;
    return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
  }

  var difference_in_weeks = differenceInWeeks;

  var difference_in_weeks$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_weeks,
    __moduleExports: difference_in_weeks
  });

  var differenceInCalendarYears$1 = ( difference_in_calendar_years$1 && difference_in_calendar_years ) || difference_in_calendar_years$1;

  /**
   * @category Year Helpers
   * @summary Get the number of full years between the given dates.
   *
   * @description
   * Get the number of full years between the given dates.
   *
   * @param {Date|String|Number} dateLeft - the later date
   * @param {Date|String|Number} dateRight - the earlier date
   * @returns {Number} the number of full years
   *
   * @example
   * // How many full years are between 31 December 2013 and 11 February 2015?
   * var result = differenceInYears(
   *   new Date(2015, 1, 11),
   *   new Date(2013, 11, 31)
   * )
   * //=> 1
   */
  function differenceInYears (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var dateRight = parse$2(dirtyDateRight);

    var sign = compareAsc$1(dateLeft, dateRight);
    var difference = Math.abs(differenceInCalendarYears$1(dateLeft, dateRight));
    dateLeft.setFullYear(dateLeft.getFullYear() - sign * difference);

    // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full
    // If so, result must be decreased by 1 in absolute value
    var isLastYearNotFull = compareAsc$1(dateLeft, dateRight) === -sign;
    return sign * (difference - isLastYearNotFull)
  }

  var difference_in_years = differenceInYears;

  var difference_in_years$1 = /*#__PURE__*/Object.freeze({
    default: difference_in_years,
    __moduleExports: difference_in_years
  });

  function buildDistanceInWordsLocale () {
    var distanceInWordsLocale = {
      lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
      },

      xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
      },

      halfAMinute: 'half a minute',

      lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
      },

      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },

      aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
      },

      xHours: {
        one: '1 hour',
        other: '{{count}} hours'
      },

      xDays: {
        one: '1 day',
        other: '{{count}} days'
      },

      aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
      },

      xMonths: {
        one: '1 month',
        other: '{{count}} months'
      },

      aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
      },

      xYears: {
        one: '1 year',
        other: '{{count}} years'
      },

      overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
      },

      almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
      }
    };

    function localize (token, count, options) {
      options = options || {};

      var result;
      if (typeof distanceInWordsLocale[token] === 'string') {
        result = distanceInWordsLocale[token];
      } else if (count === 1) {
        result = distanceInWordsLocale[token].one;
      } else {
        result = distanceInWordsLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'in ' + result
        } else {
          return result + ' ago'
        }
      }

      return result
    }

    return {
      localize: localize
    }
  }

  var build_distance_in_words_locale = buildDistanceInWordsLocale;

  var build_distance_in_words_locale$1 = /*#__PURE__*/Object.freeze({
    default: build_distance_in_words_locale,
    __moduleExports: build_distance_in_words_locale
  });

  var commonFormatterKeys = [
    'M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd',
    'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG',
    'H', 'HH', 'h', 'hh', 'm', 'mm',
    's', 'ss', 'S', 'SS', 'SSS',
    'Z', 'ZZ', 'X', 'x'
  ];

  function buildFormattingTokensRegExp (formatters) {
    var formatterKeys = [];
    for (var key in formatters) {
      if (formatters.hasOwnProperty(key)) {
        formatterKeys.push(key);
      }
    }

    var formattingTokens = commonFormatterKeys
      .concat(formatterKeys)
      .sort()
      .reverse();
    var formattingTokensRegExp = new RegExp(
      '(\\[[^\\[]*\\])|(\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g'
    );

    return formattingTokensRegExp
  }

  var build_formatting_tokens_reg_exp = buildFormattingTokensRegExp;

  var build_formatting_tokens_reg_exp$1 = /*#__PURE__*/Object.freeze({
    default: build_formatting_tokens_reg_exp,
    __moduleExports: build_formatting_tokens_reg_exp
  });

  var buildFormattingTokensRegExp$1 = ( build_formatting_tokens_reg_exp$1 && build_formatting_tokens_reg_exp ) || build_formatting_tokens_reg_exp$1;

  function buildFormatLocale () {
    // Note: in English, the names of days of the week and months are capitalized.
    // If you are making a new locale based on this one, check if the same is true for the language you're working on.
    // Generally, formatted dates should look like they are in the middle of a sentence,
    // e.g. in Spanish language the weekdays and months should be in the lowercase.
    var months3char = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    var monthsFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    var weekdays2char = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
    var weekdays3char = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    var weekdaysFull = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    var meridiemUppercase = ['AM', 'PM'];
    var meridiemLowercase = ['am', 'pm'];
    var meridiemFull = ['a.m.', 'p.m.'];

    var formatters = {
      // Month: Jan, Feb, ..., Dec
      'MMM': function (date) {
        return months3char[date.getMonth()]
      },

      // Month: January, February, ..., December
      'MMMM': function (date) {
        return monthsFull[date.getMonth()]
      },

      // Day of week: Su, Mo, ..., Sa
      'dd': function (date) {
        return weekdays2char[date.getDay()]
      },

      // Day of week: Sun, Mon, ..., Sat
      'ddd': function (date) {
        return weekdays3char[date.getDay()]
      },

      // Day of week: Sunday, Monday, ..., Saturday
      'dddd': function (date) {
        return weekdaysFull[date.getDay()]
      },

      // AM, PM
      'A': function (date) {
        return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]
      },

      // am, pm
      'a': function (date) {
        return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]
      },

      // a.m., p.m.
      'aa': function (date) {
        return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]
      }
    };

    // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.
    var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W'];
    ordinalFormatters.forEach(function (formatterToken) {
      formatters[formatterToken + 'o'] = function (date, formatters) {
        return ordinal(formatters[formatterToken](date))
      };
    });

    return {
      formatters: formatters,
      formattingTokensRegExp: buildFormattingTokensRegExp$1(formatters)
    }
  }

  function ordinal (number) {
    var rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) {
      switch (rem100 % 10) {
        case 1:
          return number + 'st'
        case 2:
          return number + 'nd'
        case 3:
          return number + 'rd'
      }
    }
    return number + 'th'
  }

  var build_format_locale = buildFormatLocale;

  var build_format_locale$1 = /*#__PURE__*/Object.freeze({
    default: build_format_locale,
    __moduleExports: build_format_locale
  });

  var buildDistanceInWordsLocale$1 = ( build_distance_in_words_locale$1 && build_distance_in_words_locale ) || build_distance_in_words_locale$1;

  var buildFormatLocale$1 = ( build_format_locale$1 && build_format_locale ) || build_format_locale$1;

  /**
   * @category Locales
   * @summary English locale.
   */
  var en = {
    distanceInWords: buildDistanceInWordsLocale$1(),
    format: buildFormatLocale$1()
  };
  var en_1 = en.distanceInWords;
  var en_2 = en.format;

  var en$1 = /*#__PURE__*/Object.freeze({
    default: en,
    __moduleExports: en,
    distanceInWords: en_1,
    format: en_2
  });

  var compareDesc$1 = ( compare_desc$1 && compare_desc ) || compare_desc$1;

  var differenceInSeconds$1 = ( difference_in_seconds$1 && difference_in_seconds ) || difference_in_seconds$1;

  var enLocale = ( en$1 && en ) || en$1;

  var MINUTES_IN_DAY = 1440;
  var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
  var MINUTES_IN_MONTH = 43200;
  var MINUTES_IN_TWO_MONTHS = 86400;

  /**
   * @category Common Helpers
   * @summary Return the distance between the given dates in words.
   *
   * @description
   * Return the distance between the given dates in words.
   *
   * | Distance between dates                                            | Result              |
   * |-------------------------------------------------------------------|---------------------|
   * | 0 ... 30 secs                                                     | less than a minute  |
   * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
   * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
   * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
   * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
   * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
   * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
   * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
   * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
   * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
   * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
   * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
   * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
   * | N yrs ... N yrs 3 months                                          | about N years       |
   * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
   * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
   *
   * With `options.includeSeconds == true`:
   * | Distance between dates | Result               |
   * |------------------------|----------------------|
   * | 0 secs ... 5 secs      | less than 5 seconds  |
   * | 5 secs ... 10 secs     | less than 10 seconds |
   * | 10 secs ... 20 secs    | less than 20 seconds |
   * | 20 secs ... 40 secs    | half a minute        |
   * | 40 secs ... 60 secs    | less than a minute   |
   * | 60 secs ... 90 secs    | 1 minute             |
   *
   * @param {Date|String|Number} dateToCompare - the date to compare with
   * @param {Date|String|Number} date - the other date
   * @param {Object} [options] - the object with options
   * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
   * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
   * @param {Object} [options.locale=enLocale] - the locale object
   * @returns {String} the distance in words
   *
   * @example
   * // What is the distance between 2 July 2014 and 1 January 2015?
   * var result = distanceInWords(
   *   new Date(2014, 6, 2),
   *   new Date(2015, 0, 1)
   * )
   * //=> '6 months'
   *
   * @example
   * // What is the distance between 1 January 2015 00:00:15
   * // and 1 January 2015 00:00:00, including seconds?
   * var result = distanceInWords(
   *   new Date(2015, 0, 1, 0, 0, 15),
   *   new Date(2015, 0, 1, 0, 0, 0),
   *   {includeSeconds: true}
   * )
   * //=> 'less than 20 seconds'
   *
   * @example
   * // What is the distance from 1 January 2016
   * // to 1 January 2015, with a suffix?
   * var result = distanceInWords(
   *   new Date(2016, 0, 1),
   *   new Date(2015, 0, 1),
   *   {addSuffix: true}
   * )
   * //=> 'about 1 year ago'
   *
   * @example
   * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
   * var eoLocale = require('date-fns/locale/eo')
   * var result = distanceInWords(
   *   new Date(2016, 7, 1),
   *   new Date(2015, 0, 1),
   *   {locale: eoLocale}
   * )
   * //=> 'pli ol 1 jaro'
   */
  function distanceInWords (dirtyDateToCompare, dirtyDate, dirtyOptions) {
    var options = dirtyOptions || {};

    var comparison = compareDesc$1(dirtyDateToCompare, dirtyDate);

    var locale = options.locale;
    var localize = enLocale.distanceInWords.localize;
    if (locale && locale.distanceInWords && locale.distanceInWords.localize) {
      localize = locale.distanceInWords.localize;
    }

    var localizeOptions = {
      addSuffix: Boolean(options.addSuffix),
      comparison: comparison
    };

    var dateLeft, dateRight;
    if (comparison > 0) {
      dateLeft = parse$2(dirtyDateToCompare);
      dateRight = parse$2(dirtyDate);
    } else {
      dateLeft = parse$2(dirtyDate);
      dateRight = parse$2(dirtyDateToCompare);
    }

    var seconds = differenceInSeconds$1(dateRight, dateLeft);
    var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset();
    var minutes = Math.round(seconds / 60) - offset;
    var months;

    // 0 up to 2 mins
    if (minutes < 2) {
      if (options.includeSeconds) {
        if (seconds < 5) {
          return localize('lessThanXSeconds', 5, localizeOptions)
        } else if (seconds < 10) {
          return localize('lessThanXSeconds', 10, localizeOptions)
        } else if (seconds < 20) {
          return localize('lessThanXSeconds', 20, localizeOptions)
        } else if (seconds < 40) {
          return localize('halfAMinute', null, localizeOptions)
        } else if (seconds < 60) {
          return localize('lessThanXMinutes', 1, localizeOptions)
        } else {
          return localize('xMinutes', 1, localizeOptions)
        }
      } else {
        if (minutes === 0) {
          return localize('lessThanXMinutes', 1, localizeOptions)
        } else {
          return localize('xMinutes', minutes, localizeOptions)
        }
      }

    // 2 mins up to 0.75 hrs
    } else if (minutes < 45) {
      return localize('xMinutes', minutes, localizeOptions)

    // 0.75 hrs up to 1.5 hrs
    } else if (minutes < 90) {
      return localize('aboutXHours', 1, localizeOptions)

    // 1.5 hrs up to 24 hrs
    } else if (minutes < MINUTES_IN_DAY) {
      var hours = Math.round(minutes / 60);
      return localize('aboutXHours', hours, localizeOptions)

    // 1 day up to 1.75 days
    } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
      return localize('xDays', 1, localizeOptions)

    // 1.75 days up to 30 days
    } else if (minutes < MINUTES_IN_MONTH) {
      var days = Math.round(minutes / MINUTES_IN_DAY);
      return localize('xDays', days, localizeOptions)

    // 1 month up to 2 months
    } else if (minutes < MINUTES_IN_TWO_MONTHS) {
      months = Math.round(minutes / MINUTES_IN_MONTH);
      return localize('aboutXMonths', months, localizeOptions)
    }

    months = differenceInMonths$1(dateRight, dateLeft);

    // 2 months up to 12 months
    if (months < 12) {
      var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
      return localize('xMonths', nearestMonth, localizeOptions)

    // 1 year up to max Date
    } else {
      var monthsSinceStartOfYear = months % 12;
      var years = Math.floor(months / 12);

      // N years up to 1 years 3 months
      if (monthsSinceStartOfYear < 3) {
        return localize('aboutXYears', years, localizeOptions)

      // N years 3 months up to N years 9 months
      } else if (monthsSinceStartOfYear < 9) {
        return localize('overXYears', years, localizeOptions)

      // N years 9 months up to N year 12 months
      } else {
        return localize('almostXYears', years + 1, localizeOptions)
      }
    }
  }

  var distance_in_words = distanceInWords;

  var distance_in_words$1 = /*#__PURE__*/Object.freeze({
    default: distance_in_words,
    __moduleExports: distance_in_words
  });

  var MINUTES_IN_DAY$1 = 1440;
  var MINUTES_IN_MONTH$1 = 43200;
  var MINUTES_IN_YEAR = 525600;

  /**
   * @category Common Helpers
   * @summary Return the distance between the given dates in words.
   *
   * @description
   * Return the distance between the given dates in words, using strict units.
   * This is like `distanceInWords`, but does not use helpers like 'almost', 'over',
   * 'less than' and the like.
   *
   * | Distance between dates | Result              |
   * |------------------------|---------------------|
   * | 0 ... 59 secs          | [0..59] seconds     |
   * | 1 ... 59 mins          | [1..59] minutes     |
   * | 1 ... 23 hrs           | [1..23] hours       |
   * | 1 ... 29 days          | [1..29] days        |
   * | 1 ... 11 months        | [1..11] months      |
   * | 1 ... N years          | [1..N]  years       |
   *
   * @param {Date|String|Number} dateToCompare - the date to compare with
   * @param {Date|String|Number} date - the other date
   * @param {Object} [options] - the object with options
   * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
   * @param {'s'|'m'|'h'|'d'|'M'|'Y'} [options.unit] - if specified, will force a unit
   * @param {'floor'|'ceil'|'round'} [options.partialMethod='floor'] - which way to round partial units
   * @param {Object} [options.locale=enLocale] - the locale object
   * @returns {String} the distance in words
   *
   * @example
   * // What is the distance between 2 July 2014 and 1 January 2015?
   * var result = distanceInWordsStrict(
   *   new Date(2014, 6, 2),
   *   new Date(2015, 0, 2)
   * )
   * //=> '6 months'
   *
   * @example
   * // What is the distance between 1 January 2015 00:00:15
   * // and 1 January 2015 00:00:00?
   * var result = distanceInWordsStrict(
   *   new Date(2015, 0, 1, 0, 0, 15),
   *   new Date(2015, 0, 1, 0, 0, 0),
   * )
   * //=> '15 seconds'
   *
   * @example
   * // What is the distance from 1 January 2016
   * // to 1 January 2015, with a suffix?
   * var result = distanceInWordsStrict(
   *   new Date(2016, 0, 1),
   *   new Date(2015, 0, 1),
   *   {addSuffix: true}
   * )
   * //=> '1 year ago'
   *
   * @example
   * // What is the distance from 1 January 2016
   * // to 1 January 2015, in minutes?
   * var result = distanceInWordsStrict(
   *   new Date(2016, 0, 1),
   *   new Date(2015, 0, 1),
   *   {unit: 'm'}
   * )
   * //=> '525600 minutes'
   *
   * @example
   * // What is the distance from 1 January 2016
   * // to 28 January 2015, in months, rounded up?
   * var result = distanceInWordsStrict(
   *   new Date(2015, 0, 28),
   *   new Date(2015, 0, 1),
   *   {unit: 'M', partialMethod: 'ceil'}
   * )
   * //=> '1 month'
   *
   * @example
   * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
   * var eoLocale = require('date-fns/locale/eo')
   * var result = distanceInWordsStrict(
   *   new Date(2016, 7, 1),
   *   new Date(2015, 0, 1),
   *   {locale: eoLocale}
   * )
   * //=> '1 jaro'
   */
  function distanceInWordsStrict (dirtyDateToCompare, dirtyDate, dirtyOptions) {
    var options = dirtyOptions || {};

    var comparison = compareDesc$1(dirtyDateToCompare, dirtyDate);

    var locale = options.locale;
    var localize = enLocale.distanceInWords.localize;
    if (locale && locale.distanceInWords && locale.distanceInWords.localize) {
      localize = locale.distanceInWords.localize;
    }

    var localizeOptions = {
      addSuffix: Boolean(options.addSuffix),
      comparison: comparison
    };

    var dateLeft, dateRight;
    if (comparison > 0) {
      dateLeft = parse$2(dirtyDateToCompare);
      dateRight = parse$2(dirtyDate);
    } else {
      dateLeft = parse$2(dirtyDate);
      dateRight = parse$2(dirtyDateToCompare);
    }

    var unit;
    var mathPartial = Math[options.partialMethod ? String(options.partialMethod) : 'floor'];
    var seconds = differenceInSeconds$1(dateRight, dateLeft);
    var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset();
    var minutes = mathPartial(seconds / 60) - offset;
    var hours, days, months, years;

    if (options.unit) {
      unit = String(options.unit);
    } else {
      if (minutes < 1) {
        unit = 's';
      } else if (minutes < 60) {
        unit = 'm';
      } else if (minutes < MINUTES_IN_DAY$1) {
        unit = 'h';
      } else if (minutes < MINUTES_IN_MONTH$1) {
        unit = 'd';
      } else if (minutes < MINUTES_IN_YEAR) {
        unit = 'M';
      } else {
        unit = 'Y';
      }
    }

    // 0 up to 60 seconds
    if (unit === 's') {
      return localize('xSeconds', seconds, localizeOptions)

    // 1 up to 60 mins
    } else if (unit === 'm') {
      return localize('xMinutes', minutes, localizeOptions)

    // 1 up to 24 hours
    } else if (unit === 'h') {
      hours = mathPartial(minutes / 60);
      return localize('xHours', hours, localizeOptions)

    // 1 up to 30 days
    } else if (unit === 'd') {
      days = mathPartial(minutes / MINUTES_IN_DAY$1);
      return localize('xDays', days, localizeOptions)

    // 1 up to 12 months
    } else if (unit === 'M') {
      months = mathPartial(minutes / MINUTES_IN_MONTH$1);
      return localize('xMonths', months, localizeOptions)

    // 1 year up to max Date
    } else if (unit === 'Y') {
      years = mathPartial(minutes / MINUTES_IN_YEAR);
      return localize('xYears', years, localizeOptions)
    }

    throw new Error('Unknown unit: ' + unit)
  }

  var distance_in_words_strict = distanceInWordsStrict;

  var distance_in_words_strict$1 = /*#__PURE__*/Object.freeze({
    default: distance_in_words_strict,
    __moduleExports: distance_in_words_strict
  });

  var distanceInWords$1 = ( distance_in_words$1 && distance_in_words ) || distance_in_words$1;

  /**
   * @category Common Helpers
   * @summary Return the distance between the given date and now in words.
   *
   * @description
   * Return the distance between the given date and now in words.
   *
   * | Distance to now                                                   | Result              |
   * |-------------------------------------------------------------------|---------------------|
   * | 0 ... 30 secs                                                     | less than a minute  |
   * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
   * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
   * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
   * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
   * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
   * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
   * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
   * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
   * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
   * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
   * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
   * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
   * | N yrs ... N yrs 3 months                                          | about N years       |
   * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
   * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
   *
   * With `options.includeSeconds == true`:
   * | Distance to now     | Result               |
   * |---------------------|----------------------|
   * | 0 secs ... 5 secs   | less than 5 seconds  |
   * | 5 secs ... 10 secs  | less than 10 seconds |
   * | 10 secs ... 20 secs | less than 20 seconds |
   * | 20 secs ... 40 secs | half a minute        |
   * | 40 secs ... 60 secs | less than a minute   |
   * | 60 secs ... 90 secs | 1 minute             |
   *
   * @param {Date|String|Number} date - the given date
   * @param {Object} [options] - the object with options
   * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
   * @param {Boolean} [options.addSuffix=false] - result specifies if the second date is earlier or later than the first
   * @param {Object} [options.locale=enLocale] - the locale object
   * @returns {String} the distance in words
   *
   * @example
   * // If today is 1 January 2015, what is the distance to 2 July 2014?
   * var result = distanceInWordsToNow(
   *   new Date(2014, 6, 2)
   * )
   * //=> '6 months'
   *
   * @example
   * // If now is 1 January 2015 00:00:00,
   * // what is the distance to 1 January 2015 00:00:15, including seconds?
   * var result = distanceInWordsToNow(
   *   new Date(2015, 0, 1, 0, 0, 15),
   *   {includeSeconds: true}
   * )
   * //=> 'less than 20 seconds'
   *
   * @example
   * // If today is 1 January 2015,
   * // what is the distance to 1 January 2016, with a suffix?
   * var result = distanceInWordsToNow(
   *   new Date(2016, 0, 1),
   *   {addSuffix: true}
   * )
   * //=> 'in about 1 year'
   *
   * @example
   * // If today is 1 January 2015,
   * // what is the distance to 1 August 2016 in Esperanto?
   * var eoLocale = require('date-fns/locale/eo')
   * var result = distanceInWordsToNow(
   *   new Date(2016, 7, 1),
   *   {locale: eoLocale}
   * )
   * //=> 'pli ol 1 jaro'
   */
  function distanceInWordsToNow (dirtyDate, dirtyOptions) {
    return distanceInWords$1(Date.now(), dirtyDate, dirtyOptions)
  }

  var distance_in_words_to_now = distanceInWordsToNow;

  var distance_in_words_to_now$1 = /*#__PURE__*/Object.freeze({
    default: distance_in_words_to_now,
    __moduleExports: distance_in_words_to_now
  });

  /**
   * @category Day Helpers
   * @summary Return the array of dates within the specified range.
   *
   * @description
   * Return the array of dates within the specified range.
   *
   * @param {Date|String|Number} startDate - the first date
   * @param {Date|String|Number} endDate - the last date
   * @param {Number} [step=1] - the step between each day
   * @returns {Date[]} the array with starts of days from the day of startDate to the day of endDate
   * @throws {Error} startDate cannot be after endDate
   *
   * @example
   * // Each day between 6 October 2014 and 10 October 2014:
   * var result = eachDay(
   *   new Date(2014, 9, 6),
   *   new Date(2014, 9, 10)
   * )
   * //=> [
   * //   Mon Oct 06 2014 00:00:00,
   * //   Tue Oct 07 2014 00:00:00,
   * //   Wed Oct 08 2014 00:00:00,
   * //   Thu Oct 09 2014 00:00:00,
   * //   Fri Oct 10 2014 00:00:00
   * // ]
   */
  function eachDay (dirtyStartDate, dirtyEndDate, dirtyStep) {
    var startDate = parse$2(dirtyStartDate);
    var endDate = parse$2(dirtyEndDate);
    var step = dirtyStep !== undefined ? dirtyStep : 1;

    var endTime = endDate.getTime();

    if (startDate.getTime() > endTime) {
      throw new Error('The first date cannot be after the second date')
    }

    var dates = [];

    var currentDate = startDate;
    currentDate.setHours(0, 0, 0, 0);

    while (currentDate.getTime() <= endTime) {
      dates.push(parse$2(currentDate));
      currentDate.setDate(currentDate.getDate() + step);
    }

    return dates
  }

  var each_day = eachDay;

  var each_day$1 = /*#__PURE__*/Object.freeze({
    default: each_day,
    __moduleExports: each_day
  });

  /**
   * @category Day Helpers
   * @summary Return the end of a day for the given date.
   *
   * @description
   * Return the end of a day for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the end of a day
   *
   * @example
   * // The end of a day for 2 September 2014 11:55:00:
   * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Tue Sep 02 2014 23:59:59.999
   */
  function endOfDay (dirtyDate) {
    var date = parse$2(dirtyDate);
    date.setHours(23, 59, 59, 999);
    return date
  }

  var end_of_day = endOfDay;

  var end_of_day$1 = /*#__PURE__*/Object.freeze({
    default: end_of_day,
    __moduleExports: end_of_day
  });

  /**
   * @category Hour Helpers
   * @summary Return the end of an hour for the given date.
   *
   * @description
   * Return the end of an hour for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the end of an hour
   *
   * @example
   * // The end of an hour for 2 September 2014 11:55:00:
   * var result = endOfHour(new Date(2014, 8, 2, 11, 55))
   * //=> Tue Sep 02 2014 11:59:59.999
   */
  function endOfHour (dirtyDate) {
    var date = parse$2(dirtyDate);
    date.setMinutes(59, 59, 999);
    return date
  }

  var end_of_hour = endOfHour;

  var end_of_hour$1 = /*#__PURE__*/Object.freeze({
    default: end_of_hour,
    __moduleExports: end_of_hour
  });

  /**
   * @category Week Helpers
   * @summary Return the end of a week for the given date.
   *
   * @description
   * Return the end of a week for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @param {Object} [options] - the object with options
   * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
   * @returns {Date} the end of a week
   *
   * @example
   * // The end of a week for 2 September 2014 11:55:00:
   * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Sat Sep 06 2014 23:59:59.999
   *
   * @example
   * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
   * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
   * //=> Sun Sep 07 2014 23:59:59.999
   */
  function endOfWeek (dirtyDate, dirtyOptions) {
    var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0;

    var date = parse$2(dirtyDate);
    var day = date.getDay();
    var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);

    date.setDate(date.getDate() + diff);
    date.setHours(23, 59, 59, 999);
    return date
  }

  var end_of_week = endOfWeek;

  var end_of_week$1 = /*#__PURE__*/Object.freeze({
    default: end_of_week,
    __moduleExports: end_of_week
  });

  var endOfWeek$1 = ( end_of_week$1 && end_of_week ) || end_of_week$1;

  /**
   * @category ISO Week Helpers
   * @summary Return the end of an ISO week for the given date.
   *
   * @description
   * Return the end of an ISO week for the given date.
   * The result will be in the local timezone.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the end of an ISO week
   *
   * @example
   * // The end of an ISO week for 2 September 2014 11:55:00:
   * var result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Sun Sep 07 2014 23:59:59.999
   */
  function endOfISOWeek (dirtyDate) {
    return endOfWeek$1(dirtyDate, {weekStartsOn: 1})
  }

  var end_of_iso_week = endOfISOWeek;

  var end_of_iso_week$1 = /*#__PURE__*/Object.freeze({
    default: end_of_iso_week,
    __moduleExports: end_of_iso_week
  });

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Return the end of an ISO week-numbering year for the given date.
   *
   * @description
   * Return the end of an ISO week-numbering year,
   * which always starts 3 days before the year's first Thursday.
   * The result will be in the local timezone.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the end of an ISO week-numbering year
   *
   * @example
   * // The end of an ISO week-numbering year for 2 July 2005:
   * var result = endOfISOYear(new Date(2005, 6, 2))
   * //=> Sun Jan 01 2006 23:59:59.999
   */
  function endOfISOYear (dirtyDate) {
    var year = getISOYear$1(dirtyDate);
    var fourthOfJanuaryOfNextYear = new Date(0);
    fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
    var date = startOfISOWeek$1(fourthOfJanuaryOfNextYear);
    date.setMilliseconds(date.getMilliseconds() - 1);
    return date
  }

  var end_of_iso_year = endOfISOYear;

  var end_of_iso_year$1 = /*#__PURE__*/Object.freeze({
    default: end_of_iso_year,
    __moduleExports: end_of_iso_year
  });

  /**
   * @category Minute Helpers
   * @summary Return the end of a minute for the given date.
   *
   * @description
   * Return the end of a minute for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the end of a minute
   *
   * @example
   * // The end of a minute for 1 December 2014 22:15:45.400:
   * var result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
   * //=> Mon Dec 01 2014 22:15:59.999
   */
  function endOfMinute (dirtyDate) {
    var date = parse$2(dirtyDate);
    date.setSeconds(59, 999);
    return date
  }

  var end_of_minute = endOfMinute;

  var end_of_minute$1 = /*#__PURE__*/Object.freeze({
    default: end_of_minute,
    __moduleExports: end_of_minute
  });

  /**
   * @category Month Helpers
   * @summary Return the end of a month for the given date.
   *
   * @description
   * Return the end of a month for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the end of a month
   *
   * @example
   * // The end of a month for 2 September 2014 11:55:00:
   * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Tue Sep 30 2014 23:59:59.999
   */
  function endOfMonth (dirtyDate) {
    var date = parse$2(dirtyDate);
    var month = date.getMonth();
    date.setFullYear(date.getFullYear(), month + 1, 0);
    date.setHours(23, 59, 59, 999);
    return date
  }

  var end_of_month = endOfMonth;

  var end_of_month$1 = /*#__PURE__*/Object.freeze({
    default: end_of_month,
    __moduleExports: end_of_month
  });

  /**
   * @category Quarter Helpers
   * @summary Return the end of a year quarter for the given date.
   *
   * @description
   * Return the end of a year quarter for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the end of a quarter
   *
   * @example
   * // The end of a quarter for 2 September 2014 11:55:00:
   * var result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Tue Sep 30 2014 23:59:59.999
   */
  function endOfQuarter (dirtyDate) {
    var date = parse$2(dirtyDate);
    var currentMonth = date.getMonth();
    var month = currentMonth - currentMonth % 3 + 3;
    date.setMonth(month, 0);
    date.setHours(23, 59, 59, 999);
    return date
  }

  var end_of_quarter = endOfQuarter;

  var end_of_quarter$1 = /*#__PURE__*/Object.freeze({
    default: end_of_quarter,
    __moduleExports: end_of_quarter
  });

  /**
   * @category Second Helpers
   * @summary Return the end of a second for the given date.
   *
   * @description
   * Return the end of a second for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the end of a second
   *
   * @example
   * // The end of a second for 1 December 2014 22:15:45.400:
   * var result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
   * //=> Mon Dec 01 2014 22:15:45.999
   */
  function endOfSecond (dirtyDate) {
    var date = parse$2(dirtyDate);
    date.setMilliseconds(999);
    return date
  }

  var end_of_second = endOfSecond;

  var end_of_second$1 = /*#__PURE__*/Object.freeze({
    default: end_of_second,
    __moduleExports: end_of_second
  });

  var endOfDay$1 = ( end_of_day$1 && end_of_day ) || end_of_day$1;

  /**
   * @category Day Helpers
   * @summary Return the end of today.
   *
   * @description
   * Return the end of today.
   *
   * @returns {Date} the end of today
   *
   * @example
   * // If today is 6 October 2014:
   * var result = endOfToday()
   * //=> Mon Oct 6 2014 23:59:59.999
   */
  function endOfToday () {
    return endOfDay$1(new Date())
  }

  var end_of_today = endOfToday;

  var end_of_today$1 = /*#__PURE__*/Object.freeze({
    default: end_of_today,
    __moduleExports: end_of_today
  });

  /**
   * @category Day Helpers
   * @summary Return the end of tomorrow.
   *
   * @description
   * Return the end of tomorrow.
   *
   * @returns {Date} the end of tomorrow
   *
   * @example
   * // If today is 6 October 2014:
   * var result = endOfTomorrow()
   * //=> Tue Oct 7 2014 23:59:59.999
   */
  function endOfTomorrow () {
    var now = new Date();
    var year = now.getFullYear();
    var month = now.getMonth();
    var day = now.getDate();

    var date = new Date(0);
    date.setFullYear(year, month, day + 1);
    date.setHours(23, 59, 59, 999);
    return date
  }

  var end_of_tomorrow = endOfTomorrow;

  var end_of_tomorrow$1 = /*#__PURE__*/Object.freeze({
    default: end_of_tomorrow,
    __moduleExports: end_of_tomorrow
  });

  /**
   * @category Year Helpers
   * @summary Return the end of a year for the given date.
   *
   * @description
   * Return the end of a year for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the end of a year
   *
   * @example
   * // The end of a year for 2 September 2014 11:55:00:
   * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
   * //=> Wed Dec 31 2014 23:59:59.999
   */
  function endOfYear (dirtyDate) {
    var date = parse$2(dirtyDate);
    var year = date.getFullYear();
    date.setFullYear(year + 1, 0, 0);
    date.setHours(23, 59, 59, 999);
    return date
  }

  var end_of_year = endOfYear;

  var end_of_year$1 = /*#__PURE__*/Object.freeze({
    default: end_of_year,
    __moduleExports: end_of_year
  });

  /**
   * @category Day Helpers
   * @summary Return the end of yesterday.
   *
   * @description
   * Return the end of yesterday.
   *
   * @returns {Date} the end of yesterday
   *
   * @example
   * // If today is 6 October 2014:
   * var result = endOfYesterday()
   * //=> Sun Oct 5 2014 23:59:59.999
   */
  function endOfYesterday () {
    var now = new Date();
    var year = now.getFullYear();
    var month = now.getMonth();
    var day = now.getDate();

    var date = new Date(0);
    date.setFullYear(year, month, day - 1);
    date.setHours(23, 59, 59, 999);
    return date
  }

  var end_of_yesterday = endOfYesterday;

  var end_of_yesterday$1 = /*#__PURE__*/Object.freeze({
    default: end_of_yesterday,
    __moduleExports: end_of_yesterday
  });

  /**
   * @category Year Helpers
   * @summary Return the start of a year for the given date.
   *
   * @description
   * Return the start of a year for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the start of a year
   *
   * @example
   * // The start of a year for 2 September 2014 11:55:00:
   * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
   * //=> Wed Jan 01 2014 00:00:00
   */
  function startOfYear (dirtyDate) {
    var cleanDate = parse$2(dirtyDate);
    var date = new Date(0);
    date.setFullYear(cleanDate.getFullYear(), 0, 1);
    date.setHours(0, 0, 0, 0);
    return date
  }

  var start_of_year = startOfYear;

  var start_of_year$1 = /*#__PURE__*/Object.freeze({
    default: start_of_year,
    __moduleExports: start_of_year
  });

  var startOfYear$1 = ( start_of_year$1 && start_of_year ) || start_of_year$1;

  /**
   * @category Day Helpers
   * @summary Get the day of the year of the given date.
   *
   * @description
   * Get the day of the year of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the day of year
   *
   * @example
   * // Which day of the year is 2 July 2014?
   * var result = getDayOfYear(new Date(2014, 6, 2))
   * //=> 183
   */
  function getDayOfYear (dirtyDate) {
    var date = parse$2(dirtyDate);
    var diff = differenceInCalendarDays$1(date, startOfYear$1(date));
    var dayOfYear = diff + 1;
    return dayOfYear
  }

  var get_day_of_year = getDayOfYear;

  var get_day_of_year$1 = /*#__PURE__*/Object.freeze({
    default: get_day_of_year,
    __moduleExports: get_day_of_year
  });

  var MILLISECONDS_IN_WEEK$2 = 604800000;

  /**
   * @category ISO Week Helpers
   * @summary Get the ISO week of the given date.
   *
   * @description
   * Get the ISO week of the given date.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the ISO week
   *
   * @example
   * // Which week of the ISO-week numbering year is 2 January 2005?
   * var result = getISOWeek(new Date(2005, 0, 2))
   * //=> 53
   */
  function getISOWeek (dirtyDate) {
    var date = parse$2(dirtyDate);
    var diff = startOfISOWeek$1(date).getTime() - startOfISOYear$1(date).getTime();

    // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK$2) + 1
  }

  var get_iso_week = getISOWeek;

  var get_iso_week$1 = /*#__PURE__*/Object.freeze({
    default: get_iso_week,
    __moduleExports: get_iso_week
  });

  /**
   * @category Common Helpers
   * @summary Is the given date valid?
   *
   * @description
   * Returns false if argument is Invalid Date and true otherwise.
   * Invalid Date is a Date, whose time value is NaN.
   *
   * Time value of Date: http://es5.github.io/#x15.9.1.1
   *
   * @param {Date} date - the date to check
   * @returns {Boolean} the date is valid
   * @throws {TypeError} argument must be an instance of Date
   *
   * @example
   * // For the valid date:
   * var result = isValid(new Date(2014, 1, 31))
   * //=> true
   *
   * @example
   * // For the invalid date:
   * var result = isValid(new Date(''))
   * //=> false
   */
  function isValid (dirtyDate) {
    if (isDate$1(dirtyDate)) {
      return !isNaN(dirtyDate)
    } else {
      throw new TypeError(toString.call(dirtyDate) + ' is not an instance of Date')
    }
  }

  var is_valid = isValid;

  var is_valid$1 = /*#__PURE__*/Object.freeze({
    default: is_valid,
    __moduleExports: is_valid
  });

  var getDayOfYear$1 = ( get_day_of_year$1 && get_day_of_year ) || get_day_of_year$1;

  var getISOWeek$1 = ( get_iso_week$1 && get_iso_week ) || get_iso_week$1;

  var isValid$1 = ( is_valid$1 && is_valid ) || is_valid$1;

  /**
   * @category Common Helpers
   * @summary Format the date.
   *
   * @description
   * Return the formatted date string in the given format.
   *
   * Accepted tokens:
   * | Unit                    | Token | Result examples                  |
   * |-------------------------|-------|----------------------------------|
   * | Month                   | M     | 1, 2, ..., 12                    |
   * |                         | Mo    | 1st, 2nd, ..., 12th              |
   * |                         | MM    | 01, 02, ..., 12                  |
   * |                         | MMM   | Jan, Feb, ..., Dec               |
   * |                         | MMMM  | January, February, ..., December |
   * | Quarter                 | Q     | 1, 2, 3, 4                       |
   * |                         | Qo    | 1st, 2nd, 3rd, 4th               |
   * | Day of month            | D     | 1, 2, ..., 31                    |
   * |                         | Do    | 1st, 2nd, ..., 31st              |
   * |                         | DD    | 01, 02, ..., 31                  |
   * | Day of year             | DDD   | 1, 2, ..., 366                   |
   * |                         | DDDo  | 1st, 2nd, ..., 366th             |
   * |                         | DDDD  | 001, 002, ..., 366               |
   * | Day of week             | d     | 0, 1, ..., 6                     |
   * |                         | do    | 0th, 1st, ..., 6th               |
   * |                         | dd    | Su, Mo, ..., Sa                  |
   * |                         | ddd   | Sun, Mon, ..., Sat               |
   * |                         | dddd  | Sunday, Monday, ..., Saturday    |
   * | Day of ISO week         | E     | 1, 2, ..., 7                     |
   * | ISO week                | W     | 1, 2, ..., 53                    |
   * |                         | Wo    | 1st, 2nd, ..., 53rd              |
   * |                         | WW    | 01, 02, ..., 53                  |
   * | Year                    | YY    | 00, 01, ..., 99                  |
   * |                         | YYYY  | 1900, 1901, ..., 2099            |
   * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |
   * |                         | GGGG  | 1900, 1901, ..., 2099            |
   * | AM/PM                   | A     | AM, PM                           |
   * |                         | a     | am, pm                           |
   * |                         | aa    | a.m., p.m.                       |
   * | Hour                    | H     | 0, 1, ... 23                     |
   * |                         | HH    | 00, 01, ... 23                   |
   * |                         | h     | 1, 2, ..., 12                    |
   * |                         | hh    | 01, 02, ..., 12                  |
   * | Minute                  | m     | 0, 1, ..., 59                    |
   * |                         | mm    | 00, 01, ..., 59                  |
   * | Second                  | s     | 0, 1, ..., 59                    |
   * |                         | ss    | 00, 01, ..., 59                  |
   * | 1/10 of second          | S     | 0, 1, ..., 9                     |
   * | 1/100 of second         | SS    | 00, 01, ..., 99                  |
   * | Millisecond             | SSS   | 000, 001, ..., 999               |
   * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |
   * |                         | ZZ    | -0100, +0000, ..., +1200         |
   * | Seconds timestamp       | X     | 512969520                        |
   * | Milliseconds timestamp  | x     | 512969520900                     |
   *
   * The characters wrapped in square brackets are escaped.
   *
   * The result may vary by locale.
   *
   * @param {Date|String|Number} date - the original date
   * @param {String} [format='YYYY-MM-DDTHH:mm:ss.SSSZ'] - the string of tokens
   * @param {Object} [options] - the object with options
   * @param {Object} [options.locale=enLocale] - the locale object
   * @returns {String} the formatted date string
   *
   * @example
   * // Represent 11 February 2014 in middle-endian format:
   * var result = format(
   *   new Date(2014, 1, 11),
   *   'MM/DD/YYYY'
   * )
   * //=> '02/11/2014'
   *
   * @example
   * // Represent 2 July 2014 in Esperanto:
   * var eoLocale = require('date-fns/locale/eo')
   * var result = format(
   *   new Date(2014, 6, 2),
   *   'Do [de] MMMM YYYY',
   *   {locale: eoLocale}
   * )
   * //=> '2-a de julio 2014'
   */
  function format (dirtyDate, dirtyFormatStr, dirtyOptions) {
    var formatStr = dirtyFormatStr ? String(dirtyFormatStr) : 'YYYY-MM-DDTHH:mm:ss.SSSZ';
    var options = dirtyOptions || {};

    var locale = options.locale;
    var localeFormatters = enLocale.format.formatters;
    var formattingTokensRegExp = enLocale.format.formattingTokensRegExp;
    if (locale && locale.format && locale.format.formatters) {
      localeFormatters = locale.format.formatters;

      if (locale.format.formattingTokensRegExp) {
        formattingTokensRegExp = locale.format.formattingTokensRegExp;
      }
    }

    var date = parse$2(dirtyDate);

    if (!isValid$1(date)) {
      return 'Invalid Date'
    }

    var formatFn = buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp);

    return formatFn(date)
  }

  var formatters = {
    // Month: 1, 2, ..., 12
    'M': function (date) {
      return date.getMonth() + 1
    },

    // Month: 01, 02, ..., 12
    'MM': function (date) {
      return addLeadingZeros(date.getMonth() + 1, 2)
    },

    // Quarter: 1, 2, 3, 4
    'Q': function (date) {
      return Math.ceil((date.getMonth() + 1) / 3)
    },

    // Day of month: 1, 2, ..., 31
    'D': function (date) {
      return date.getDate()
    },

    // Day of month: 01, 02, ..., 31
    'DD': function (date) {
      return addLeadingZeros(date.getDate(), 2)
    },

    // Day of year: 1, 2, ..., 366
    'DDD': function (date) {
      return getDayOfYear$1(date)
    },

    // Day of year: 001, 002, ..., 366
    'DDDD': function (date) {
      return addLeadingZeros(getDayOfYear$1(date), 3)
    },

    // Day of week: 0, 1, ..., 6
    'd': function (date) {
      return date.getDay()
    },

    // Day of ISO week: 1, 2, ..., 7
    'E': function (date) {
      return date.getDay() || 7
    },

    // ISO week: 1, 2, ..., 53
    'W': function (date) {
      return getISOWeek$1(date)
    },

    // ISO week: 01, 02, ..., 53
    'WW': function (date) {
      return addLeadingZeros(getISOWeek$1(date), 2)
    },

    // Year: 00, 01, ..., 99
    'YY': function (date) {
      return addLeadingZeros(date.getFullYear(), 4).substr(2)
    },

    // Year: 1900, 1901, ..., 2099
    'YYYY': function (date) {
      return addLeadingZeros(date.getFullYear(), 4)
    },

    // ISO week-numbering year: 00, 01, ..., 99
    'GG': function (date) {
      return String(getISOYear$1(date)).substr(2)
    },

    // ISO week-numbering year: 1900, 1901, ..., 2099
    'GGGG': function (date) {
      return getISOYear$1(date)
    },

    // Hour: 0, 1, ... 23
    'H': function (date) {
      return date.getHours()
    },

    // Hour: 00, 01, ..., 23
    'HH': function (date) {
      return addLeadingZeros(date.getHours(), 2)
    },

    // Hour: 1, 2, ..., 12
    'h': function (date) {
      var hours = date.getHours();
      if (hours === 0) {
        return 12
      } else if (hours > 12) {
        return hours % 12
      } else {
        return hours
      }
    },

    // Hour: 01, 02, ..., 12
    'hh': function (date) {
      return addLeadingZeros(formatters['h'](date), 2)
    },

    // Minute: 0, 1, ..., 59
    'm': function (date) {
      return date.getMinutes()
    },

    // Minute: 00, 01, ..., 59
    'mm': function (date) {
      return addLeadingZeros(date.getMinutes(), 2)
    },

    // Second: 0, 1, ..., 59
    's': function (date) {
      return date.getSeconds()
    },

    // Second: 00, 01, ..., 59
    'ss': function (date) {
      return addLeadingZeros(date.getSeconds(), 2)
    },

    // 1/10 of second: 0, 1, ..., 9
    'S': function (date) {
      return Math.floor(date.getMilliseconds() / 100)
    },

    // 1/100 of second: 00, 01, ..., 99
    'SS': function (date) {
      return addLeadingZeros(Math.floor(date.getMilliseconds() / 10), 2)
    },

    // Millisecond: 000, 001, ..., 999
    'SSS': function (date) {
      return addLeadingZeros(date.getMilliseconds(), 3)
    },

    // Timezone: -01:00, +00:00, ... +12:00
    'Z': function (date) {
      return formatTimezone(date.getTimezoneOffset(), ':')
    },

    // Timezone: -0100, +0000, ... +1200
    'ZZ': function (date) {
      return formatTimezone(date.getTimezoneOffset())
    },

    // Seconds timestamp: 512969520
    'X': function (date) {
      return Math.floor(date.getTime() / 1000)
    },

    // Milliseconds timestamp: 512969520900
    'x': function (date) {
      return date.getTime()
    }
  };

  function buildFormatFn (formatStr, localeFormatters, formattingTokensRegExp) {
    var array = formatStr.match(formattingTokensRegExp);
    var length = array.length;

    var i;
    var formatter;
    for (i = 0; i < length; i++) {
      formatter = localeFormatters[array[i]] || formatters[array[i]];
      if (formatter) {
        array[i] = formatter;
      } else {
        array[i] = removeFormattingTokens(array[i]);
      }
    }

    return function (date) {
      var output = '';
      for (var i = 0; i < length; i++) {
        if (array[i] instanceof Function) {
          output += array[i](date, formatters);
        } else {
          output += array[i];
        }
      }
      return output
    }
  }

  function removeFormattingTokens (input) {
    if (input.match(/\[[\s\S]/)) {
      return input.replace(/^\[|]$/g, '')
    }
    return input.replace(/\\/g, '')
  }

  function formatTimezone (offset, delimeter) {
    delimeter = delimeter || '';
    var sign = offset > 0 ? '-' : '+';
    var absOffset = Math.abs(offset);
    var hours = Math.floor(absOffset / 60);
    var minutes = absOffset % 60;
    return sign + addLeadingZeros(hours, 2) + delimeter + addLeadingZeros(minutes, 2)
  }

  function addLeadingZeros (number, targetLength) {
    var output = Math.abs(number).toString();
    while (output.length < targetLength) {
      output = '0' + output;
    }
    return output
  }

  var format_1 = format;

  var format$1 = /*#__PURE__*/Object.freeze({
    default: format_1,
    __moduleExports: format_1
  });

  /**
   * @category Day Helpers
   * @summary Get the day of the month of the given date.
   *
   * @description
   * Get the day of the month of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the day of month
   *
   * @example
   * // Which day of the month is 29 February 2012?
   * var result = getDate(new Date(2012, 1, 29))
   * //=> 29
   */
  function getDate (dirtyDate) {
    var date = parse$2(dirtyDate);
    var dayOfMonth = date.getDate();
    return dayOfMonth
  }

  var get_date = getDate;

  var get_date$1 = /*#__PURE__*/Object.freeze({
    default: get_date,
    __moduleExports: get_date
  });

  /**
   * @category Weekday Helpers
   * @summary Get the day of the week of the given date.
   *
   * @description
   * Get the day of the week of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the day of week
   *
   * @example
   * // Which day of the week is 29 February 2012?
   * var result = getDay(new Date(2012, 1, 29))
   * //=> 3
   */
  function getDay (dirtyDate) {
    var date = parse$2(dirtyDate);
    var day = date.getDay();
    return day
  }

  var get_day = getDay;

  var get_day$1 = /*#__PURE__*/Object.freeze({
    default: get_day,
    __moduleExports: get_day
  });

  /**
   * @category Year Helpers
   * @summary Is the given date in the leap year?
   *
   * @description
   * Is the given date in the leap year?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is in the leap year
   *
   * @example
   * // Is 1 September 2012 in the leap year?
   * var result = isLeapYear(new Date(2012, 8, 1))
   * //=> true
   */
  function isLeapYear (dirtyDate) {
    var date = parse$2(dirtyDate);
    var year = date.getFullYear();
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0
  }

  var is_leap_year = isLeapYear;

  var is_leap_year$1 = /*#__PURE__*/Object.freeze({
    default: is_leap_year,
    __moduleExports: is_leap_year
  });

  var isLeapYear$1 = ( is_leap_year$1 && is_leap_year ) || is_leap_year$1;

  /**
   * @category Year Helpers
   * @summary Get the number of days in a year of the given date.
   *
   * @description
   * Get the number of days in a year of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the number of days in a year
   *
   * @example
   * // How many days are in 2012?
   * var result = getDaysInYear(new Date(2012, 0, 1))
   * //=> 366
   */
  function getDaysInYear (dirtyDate) {
    return isLeapYear$1(dirtyDate) ? 366 : 365
  }

  var get_days_in_year = getDaysInYear;

  var get_days_in_year$1 = /*#__PURE__*/Object.freeze({
    default: get_days_in_year,
    __moduleExports: get_days_in_year
  });

  /**
   * @category Hour Helpers
   * @summary Get the hours of the given date.
   *
   * @description
   * Get the hours of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the hours
   *
   * @example
   * // Get the hours of 29 February 2012 11:45:00:
   * var result = getHours(new Date(2012, 1, 29, 11, 45))
   * //=> 11
   */
  function getHours (dirtyDate) {
    var date = parse$2(dirtyDate);
    var hours = date.getHours();
    return hours
  }

  var get_hours = getHours;

  var get_hours$1 = /*#__PURE__*/Object.freeze({
    default: get_hours,
    __moduleExports: get_hours
  });

  /**
   * @category Weekday Helpers
   * @summary Get the day of the ISO week of the given date.
   *
   * @description
   * Get the day of the ISO week of the given date,
   * which is 7 for Sunday, 1 for Monday etc.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the day of ISO week
   *
   * @example
   * // Which day of the ISO week is 26 February 2012?
   * var result = getISODay(new Date(2012, 1, 26))
   * //=> 7
   */
  function getISODay (dirtyDate) {
    var date = parse$2(dirtyDate);
    var day = date.getDay();

    if (day === 0) {
      day = 7;
    }

    return day
  }

  var get_iso_day = getISODay;

  var get_iso_day$1 = /*#__PURE__*/Object.freeze({
    default: get_iso_day,
    __moduleExports: get_iso_day
  });

  var addWeeks$1 = ( add_weeks$1 && add_weeks ) || add_weeks$1;

  var MILLISECONDS_IN_WEEK$3 = 604800000;

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Get the number of weeks in an ISO week-numbering year of the given date.
   *
   * @description
   * Get the number of weeks in an ISO week-numbering year of the given date.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the number of ISO weeks in a year
   *
   * @example
   * // How many weeks are in ISO week-numbering year 2015?
   * var result = getISOWeeksInYear(new Date(2015, 1, 11))
   * //=> 53
   */
  function getISOWeeksInYear (dirtyDate) {
    var thisYear = startOfISOYear$1(dirtyDate);
    var nextYear = startOfISOYear$1(addWeeks$1(thisYear, 60));
    var diff = nextYear.valueOf() - thisYear.valueOf();
    // Round the number of weeks to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK$3)
  }

  var get_iso_weeks_in_year = getISOWeeksInYear;

  var get_iso_weeks_in_year$1 = /*#__PURE__*/Object.freeze({
    default: get_iso_weeks_in_year,
    __moduleExports: get_iso_weeks_in_year
  });

  /**
   * @category Millisecond Helpers
   * @summary Get the milliseconds of the given date.
   *
   * @description
   * Get the milliseconds of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the milliseconds
   *
   * @example
   * // Get the milliseconds of 29 February 2012 11:45:05.123:
   * var result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))
   * //=> 123
   */
  function getMilliseconds (dirtyDate) {
    var date = parse$2(dirtyDate);
    var milliseconds = date.getMilliseconds();
    return milliseconds
  }

  var get_milliseconds = getMilliseconds;

  var get_milliseconds$1 = /*#__PURE__*/Object.freeze({
    default: get_milliseconds,
    __moduleExports: get_milliseconds
  });

  /**
   * @category Minute Helpers
   * @summary Get the minutes of the given date.
   *
   * @description
   * Get the minutes of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the minutes
   *
   * @example
   * // Get the minutes of 29 February 2012 11:45:05:
   * var result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
   * //=> 45
   */
  function getMinutes (dirtyDate) {
    var date = parse$2(dirtyDate);
    var minutes = date.getMinutes();
    return minutes
  }

  var get_minutes = getMinutes;

  var get_minutes$1 = /*#__PURE__*/Object.freeze({
    default: get_minutes,
    __moduleExports: get_minutes
  });

  /**
   * @category Month Helpers
   * @summary Get the month of the given date.
   *
   * @description
   * Get the month of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the month
   *
   * @example
   * // Which month is 29 February 2012?
   * var result = getMonth(new Date(2012, 1, 29))
   * //=> 1
   */
  function getMonth (dirtyDate) {
    var date = parse$2(dirtyDate);
    var month = date.getMonth();
    return month
  }

  var get_month = getMonth;

  var get_month$1 = /*#__PURE__*/Object.freeze({
    default: get_month,
    __moduleExports: get_month
  });

  var MILLISECONDS_IN_DAY$1 = 24 * 60 * 60 * 1000;

  /**
   * @category Range Helpers
   * @summary Get the number of days that overlap in two date ranges
   *
   * @description
   * Get the number of days that overlap in two date ranges
   *
   * @param {Date|String|Number} initialRangeStartDate - the start of the initial range
   * @param {Date|String|Number} initialRangeEndDate - the end of the initial range
   * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with
   * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with
   * @returns {Number} the number of days that overlap in two date ranges
   * @throws {Error} startDate of a date range cannot be after its endDate
   *
   * @example
   * // For overlapping date ranges adds 1 for each started overlapping day:
   * getOverlappingDaysInRanges(
   *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)
   * )
   * //=> 3
   *
   * @example
   * // For non-overlapping date ranges returns 0:
   * getOverlappingDaysInRanges(
   *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)
   * )
   * //=> 0
   */
  function getOverlappingDaysInRanges (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {
    var initialStartTime = parse$2(dirtyInitialRangeStartDate).getTime();
    var initialEndTime = parse$2(dirtyInitialRangeEndDate).getTime();
    var comparedStartTime = parse$2(dirtyComparedRangeStartDate).getTime();
    var comparedEndTime = parse$2(dirtyComparedRangeEndDate).getTime();

    if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {
      throw new Error('The start of the range cannot be after the end of the range')
    }

    var isOverlapping = initialStartTime < comparedEndTime && comparedStartTime < initialEndTime;

    if (!isOverlapping) {
      return 0
    }

    var overlapStartDate = comparedStartTime < initialStartTime
      ? initialStartTime
      : comparedStartTime;

    var overlapEndDate = comparedEndTime > initialEndTime
      ? initialEndTime
      : comparedEndTime;

    var differenceInMs = overlapEndDate - overlapStartDate;

    return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY$1)
  }

  var get_overlapping_days_in_ranges = getOverlappingDaysInRanges;

  var get_overlapping_days_in_ranges$1 = /*#__PURE__*/Object.freeze({
    default: get_overlapping_days_in_ranges,
    __moduleExports: get_overlapping_days_in_ranges
  });

  /**
   * @category Second Helpers
   * @summary Get the seconds of the given date.
   *
   * @description
   * Get the seconds of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the seconds
   *
   * @example
   * // Get the seconds of 29 February 2012 11:45:05.123:
   * var result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
   * //=> 5
   */
  function getSeconds (dirtyDate) {
    var date = parse$2(dirtyDate);
    var seconds = date.getSeconds();
    return seconds
  }

  var get_seconds = getSeconds;

  var get_seconds$1 = /*#__PURE__*/Object.freeze({
    default: get_seconds,
    __moduleExports: get_seconds
  });

  /**
   * @category Timestamp Helpers
   * @summary Get the milliseconds timestamp of the given date.
   *
   * @description
   * Get the milliseconds timestamp of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the timestamp
   *
   * @example
   * // Get the timestamp of 29 February 2012 11:45:05.123:
   * var result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
   * //=> 1330515905123
   */
  function getTime (dirtyDate) {
    var date = parse$2(dirtyDate);
    var timestamp = date.getTime();
    return timestamp
  }

  var get_time = getTime;

  var get_time$1 = /*#__PURE__*/Object.freeze({
    default: get_time,
    __moduleExports: get_time
  });

  /**
   * @category Year Helpers
   * @summary Get the year of the given date.
   *
   * @description
   * Get the year of the given date.
   *
   * @param {Date|String|Number} date - the given date
   * @returns {Number} the year
   *
   * @example
   * // Which year is 2 July 2014?
   * var result = getYear(new Date(2014, 6, 2))
   * //=> 2014
   */
  function getYear (dirtyDate) {
    var date = parse$2(dirtyDate);
    var year = date.getFullYear();
    return year
  }

  var get_year = getYear;

  var get_year$1 = /*#__PURE__*/Object.freeze({
    default: get_year,
    __moduleExports: get_year
  });

  /**
   * @category Common Helpers
   * @summary Is the first date after the second one?
   *
   * @description
   * Is the first date after the second one?
   *
   * @param {Date|String|Number} date - the date that should be after the other one to return true
   * @param {Date|String|Number} dateToCompare - the date to compare with
   * @returns {Boolean} the first date is after the second date
   *
   * @example
   * // Is 10 July 1989 after 11 February 1987?
   * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
   * //=> true
   */
  function isAfter (dirtyDate, dirtyDateToCompare) {
    var date = parse$2(dirtyDate);
    var dateToCompare = parse$2(dirtyDateToCompare);
    return date.getTime() > dateToCompare.getTime()
  }

  var is_after = isAfter;

  var is_after$1 = /*#__PURE__*/Object.freeze({
    default: is_after,
    __moduleExports: is_after
  });

  /**
   * @category Common Helpers
   * @summary Is the first date before the second one?
   *
   * @description
   * Is the first date before the second one?
   *
   * @param {Date|String|Number} date - the date that should be before the other one to return true
   * @param {Date|String|Number} dateToCompare - the date to compare with
   * @returns {Boolean} the first date is before the second date
   *
   * @example
   * // Is 10 July 1989 before 11 February 1987?
   * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
   * //=> false
   */
  function isBefore (dirtyDate, dirtyDateToCompare) {
    var date = parse$2(dirtyDate);
    var dateToCompare = parse$2(dirtyDateToCompare);
    return date.getTime() < dateToCompare.getTime()
  }

  var is_before = isBefore;

  var is_before$1 = /*#__PURE__*/Object.freeze({
    default: is_before,
    __moduleExports: is_before
  });

  /**
   * @category Common Helpers
   * @summary Are the given dates equal?
   *
   * @description
   * Are the given dates equal?
   *
   * @param {Date|String|Number} dateLeft - the first date to compare
   * @param {Date|String|Number} dateRight - the second date to compare
   * @returns {Boolean} the dates are equal
   *
   * @example
   * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
   * var result = isEqual(
   *   new Date(2014, 6, 2, 6, 30, 45, 0)
   *   new Date(2014, 6, 2, 6, 30, 45, 500)
   * )
   * //=> false
   */
  function isEqual (dirtyLeftDate, dirtyRightDate) {
    var dateLeft = parse$2(dirtyLeftDate);
    var dateRight = parse$2(dirtyRightDate);
    return dateLeft.getTime() === dateRight.getTime()
  }

  var is_equal = isEqual;

  var is_equal$1 = /*#__PURE__*/Object.freeze({
    default: is_equal,
    __moduleExports: is_equal
  });

  /**
   * @category Month Helpers
   * @summary Is the given date the first day of a month?
   *
   * @description
   * Is the given date the first day of a month?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is the first day of a month
   *
   * @example
   * // Is 1 September 2014 the first day of a month?
   * var result = isFirstDayOfMonth(new Date(2014, 8, 1))
   * //=> true
   */
  function isFirstDayOfMonth (dirtyDate) {
    return parse$2(dirtyDate).getDate() === 1
  }

  var is_first_day_of_month = isFirstDayOfMonth;

  var is_first_day_of_month$1 = /*#__PURE__*/Object.freeze({
    default: is_first_day_of_month,
    __moduleExports: is_first_day_of_month
  });

  /**
   * @category Weekday Helpers
   * @summary Is the given date Friday?
   *
   * @description
   * Is the given date Friday?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is Friday
   *
   * @example
   * // Is 26 September 2014 Friday?
   * var result = isFriday(new Date(2014, 8, 26))
   * //=> true
   */
  function isFriday (dirtyDate) {
    return parse$2(dirtyDate).getDay() === 5
  }

  var is_friday = isFriday;

  var is_friday$1 = /*#__PURE__*/Object.freeze({
    default: is_friday,
    __moduleExports: is_friday
  });

  /**
   * @category Common Helpers
   * @summary Is the given date in the future?
   *
   * @description
   * Is the given date in the future?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is in the future
   *
   * @example
   * // If today is 6 October 2014, is 31 December 2014 in the future?
   * var result = isFuture(new Date(2014, 11, 31))
   * //=> true
   */
  function isFuture (dirtyDate) {
    return parse$2(dirtyDate).getTime() > new Date().getTime()
  }

  var is_future = isFuture;

  var is_future$1 = /*#__PURE__*/Object.freeze({
    default: is_future,
    __moduleExports: is_future
  });

  var endOfMonth$1 = ( end_of_month$1 && end_of_month ) || end_of_month$1;

  /**
   * @category Month Helpers
   * @summary Is the given date the last day of a month?
   *
   * @description
   * Is the given date the last day of a month?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is the last day of a month
   *
   * @example
   * // Is 28 February 2014 the last day of a month?
   * var result = isLastDayOfMonth(new Date(2014, 1, 28))
   * //=> true
   */
  function isLastDayOfMonth (dirtyDate) {
    var date = parse$2(dirtyDate);
    return endOfDay$1(date).getTime() === endOfMonth$1(date).getTime()
  }

  var is_last_day_of_month = isLastDayOfMonth;

  var is_last_day_of_month$1 = /*#__PURE__*/Object.freeze({
    default: is_last_day_of_month,
    __moduleExports: is_last_day_of_month
  });

  /**
   * @category Weekday Helpers
   * @summary Is the given date Monday?
   *
   * @description
   * Is the given date Monday?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is Monday
   *
   * @example
   * // Is 22 September 2014 Monday?
   * var result = isMonday(new Date(2014, 8, 22))
   * //=> true
   */
  function isMonday (dirtyDate) {
    return parse$2(dirtyDate).getDay() === 1
  }

  var is_monday = isMonday;

  var is_monday$1 = /*#__PURE__*/Object.freeze({
    default: is_monday,
    __moduleExports: is_monday
  });

  /**
   * @category Common Helpers
   * @summary Is the given date in the past?
   *
   * @description
   * Is the given date in the past?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is in the past
   *
   * @example
   * // If today is 6 October 2014, is 2 July 2014 in the past?
   * var result = isPast(new Date(2014, 6, 2))
   * //=> true
   */
  function isPast (dirtyDate) {
    return parse$2(dirtyDate).getTime() < new Date().getTime()
  }

  var is_past = isPast;

  var is_past$1 = /*#__PURE__*/Object.freeze({
    default: is_past,
    __moduleExports: is_past
  });

  /**
   * @category Day Helpers
   * @summary Are the given dates in the same day?
   *
   * @description
   * Are the given dates in the same day?
   *
   * @param {Date|String|Number} dateLeft - the first date to check
   * @param {Date|String|Number} dateRight - the second date to check
   * @returns {Boolean} the dates are in the same day
   *
   * @example
   * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
   * var result = isSameDay(
   *   new Date(2014, 8, 4, 6, 0),
   *   new Date(2014, 8, 4, 18, 0)
   * )
   * //=> true
   */
  function isSameDay (dirtyDateLeft, dirtyDateRight) {
    var dateLeftStartOfDay = startOfDay$1(dirtyDateLeft);
    var dateRightStartOfDay = startOfDay$1(dirtyDateRight);

    return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime()
  }

  var is_same_day = isSameDay;

  var is_same_day$1 = /*#__PURE__*/Object.freeze({
    default: is_same_day,
    __moduleExports: is_same_day
  });

  /**
   * @category Hour Helpers
   * @summary Return the start of an hour for the given date.
   *
   * @description
   * Return the start of an hour for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the start of an hour
   *
   * @example
   * // The start of an hour for 2 September 2014 11:55:00:
   * var result = startOfHour(new Date(2014, 8, 2, 11, 55))
   * //=> Tue Sep 02 2014 11:00:00
   */
  function startOfHour (dirtyDate) {
    var date = parse$2(dirtyDate);
    date.setMinutes(0, 0, 0);
    return date
  }

  var start_of_hour = startOfHour;

  var start_of_hour$1 = /*#__PURE__*/Object.freeze({
    default: start_of_hour,
    __moduleExports: start_of_hour
  });

  var startOfHour$1 = ( start_of_hour$1 && start_of_hour ) || start_of_hour$1;

  /**
   * @category Hour Helpers
   * @summary Are the given dates in the same hour?
   *
   * @description
   * Are the given dates in the same hour?
   *
   * @param {Date|String|Number} dateLeft - the first date to check
   * @param {Date|String|Number} dateRight - the second date to check
   * @returns {Boolean} the dates are in the same hour
   *
   * @example
   * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?
   * var result = isSameHour(
   *   new Date(2014, 8, 4, 6, 0),
   *   new Date(2014, 8, 4, 6, 30)
   * )
   * //=> true
   */
  function isSameHour (dirtyDateLeft, dirtyDateRight) {
    var dateLeftStartOfHour = startOfHour$1(dirtyDateLeft);
    var dateRightStartOfHour = startOfHour$1(dirtyDateRight);

    return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime()
  }

  var is_same_hour = isSameHour;

  var is_same_hour$1 = /*#__PURE__*/Object.freeze({
    default: is_same_hour,
    __moduleExports: is_same_hour
  });

  /**
   * @category Week Helpers
   * @summary Are the given dates in the same week?
   *
   * @description
   * Are the given dates in the same week?
   *
   * @param {Date|String|Number} dateLeft - the first date to check
   * @param {Date|String|Number} dateRight - the second date to check
   * @param {Object} [options] - the object with options
   * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
   * @returns {Boolean} the dates are in the same week
   *
   * @example
   * // Are 31 August 2014 and 4 September 2014 in the same week?
   * var result = isSameWeek(
   *   new Date(2014, 7, 31),
   *   new Date(2014, 8, 4)
   * )
   * //=> true
   *
   * @example
   * // If week starts with Monday,
   * // are 31 August 2014 and 4 September 2014 in the same week?
   * var result = isSameWeek(
   *   new Date(2014, 7, 31),
   *   new Date(2014, 8, 4),
   *   {weekStartsOn: 1}
   * )
   * //=> false
   */
  function isSameWeek (dirtyDateLeft, dirtyDateRight, dirtyOptions) {
    var dateLeftStartOfWeek = startOfWeek$1(dirtyDateLeft, dirtyOptions);
    var dateRightStartOfWeek = startOfWeek$1(dirtyDateRight, dirtyOptions);

    return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime()
  }

  var is_same_week = isSameWeek;

  var is_same_week$1 = /*#__PURE__*/Object.freeze({
    default: is_same_week,
    __moduleExports: is_same_week
  });

  var isSameWeek$1 = ( is_same_week$1 && is_same_week ) || is_same_week$1;

  /**
   * @category ISO Week Helpers
   * @summary Are the given dates in the same ISO week?
   *
   * @description
   * Are the given dates in the same ISO week?
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} dateLeft - the first date to check
   * @param {Date|String|Number} dateRight - the second date to check
   * @returns {Boolean} the dates are in the same ISO week
   *
   * @example
   * // Are 1 September 2014 and 7 September 2014 in the same ISO week?
   * var result = isSameISOWeek(
   *   new Date(2014, 8, 1),
   *   new Date(2014, 8, 7)
   * )
   * //=> true
   */
  function isSameISOWeek (dirtyDateLeft, dirtyDateRight) {
    return isSameWeek$1(dirtyDateLeft, dirtyDateRight, {weekStartsOn: 1})
  }

  var is_same_iso_week = isSameISOWeek;

  var is_same_iso_week$1 = /*#__PURE__*/Object.freeze({
    default: is_same_iso_week,
    __moduleExports: is_same_iso_week
  });

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Are the given dates in the same ISO week-numbering year?
   *
   * @description
   * Are the given dates in the same ISO week-numbering year?
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} dateLeft - the first date to check
   * @param {Date|String|Number} dateRight - the second date to check
   * @returns {Boolean} the dates are in the same ISO week-numbering year
   *
   * @example
   * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?
   * var result = isSameISOYear(
   *   new Date(2003, 11, 29),
   *   new Date(2005, 0, 2)
   * )
   * //=> true
   */
  function isSameISOYear (dirtyDateLeft, dirtyDateRight) {
    var dateLeftStartOfYear = startOfISOYear$1(dirtyDateLeft);
    var dateRightStartOfYear = startOfISOYear$1(dirtyDateRight);

    return dateLeftStartOfYear.getTime() === dateRightStartOfYear.getTime()
  }

  var is_same_iso_year = isSameISOYear;

  var is_same_iso_year$1 = /*#__PURE__*/Object.freeze({
    default: is_same_iso_year,
    __moduleExports: is_same_iso_year
  });

  /**
   * @category Minute Helpers
   * @summary Return the start of a minute for the given date.
   *
   * @description
   * Return the start of a minute for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the start of a minute
   *
   * @example
   * // The start of a minute for 1 December 2014 22:15:45.400:
   * var result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
   * //=> Mon Dec 01 2014 22:15:00
   */
  function startOfMinute (dirtyDate) {
    var date = parse$2(dirtyDate);
    date.setSeconds(0, 0);
    return date
  }

  var start_of_minute = startOfMinute;

  var start_of_minute$1 = /*#__PURE__*/Object.freeze({
    default: start_of_minute,
    __moduleExports: start_of_minute
  });

  var startOfMinute$1 = ( start_of_minute$1 && start_of_minute ) || start_of_minute$1;

  /**
   * @category Minute Helpers
   * @summary Are the given dates in the same minute?
   *
   * @description
   * Are the given dates in the same minute?
   *
   * @param {Date|String|Number} dateLeft - the first date to check
   * @param {Date|String|Number} dateRight - the second date to check
   * @returns {Boolean} the dates are in the same minute
   *
   * @example
   * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15
   * // in the same minute?
   * var result = isSameMinute(
   *   new Date(2014, 8, 4, 6, 30),
   *   new Date(2014, 8, 4, 6, 30, 15)
   * )
   * //=> true
   */
  function isSameMinute (dirtyDateLeft, dirtyDateRight) {
    var dateLeftStartOfMinute = startOfMinute$1(dirtyDateLeft);
    var dateRightStartOfMinute = startOfMinute$1(dirtyDateRight);

    return dateLeftStartOfMinute.getTime() === dateRightStartOfMinute.getTime()
  }

  var is_same_minute = isSameMinute;

  var is_same_minute$1 = /*#__PURE__*/Object.freeze({
    default: is_same_minute,
    __moduleExports: is_same_minute
  });

  /**
   * @category Month Helpers
   * @summary Are the given dates in the same month?
   *
   * @description
   * Are the given dates in the same month?
   *
   * @param {Date|String|Number} dateLeft - the first date to check
   * @param {Date|String|Number} dateRight - the second date to check
   * @returns {Boolean} the dates are in the same month
   *
   * @example
   * // Are 2 September 2014 and 25 September 2014 in the same month?
   * var result = isSameMonth(
   *   new Date(2014, 8, 2),
   *   new Date(2014, 8, 25)
   * )
   * //=> true
   */
  function isSameMonth (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var dateRight = parse$2(dirtyDateRight);
    return dateLeft.getFullYear() === dateRight.getFullYear() &&
      dateLeft.getMonth() === dateRight.getMonth()
  }

  var is_same_month = isSameMonth;

  var is_same_month$1 = /*#__PURE__*/Object.freeze({
    default: is_same_month,
    __moduleExports: is_same_month
  });

  /**
   * @category Quarter Helpers
   * @summary Return the start of a year quarter for the given date.
   *
   * @description
   * Return the start of a year quarter for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the start of a quarter
   *
   * @example
   * // The start of a quarter for 2 September 2014 11:55:00:
   * var result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Tue Jul 01 2014 00:00:00
   */
  function startOfQuarter (dirtyDate) {
    var date = parse$2(dirtyDate);
    var currentMonth = date.getMonth();
    var month = currentMonth - currentMonth % 3;
    date.setMonth(month, 1);
    date.setHours(0, 0, 0, 0);
    return date
  }

  var start_of_quarter = startOfQuarter;

  var start_of_quarter$1 = /*#__PURE__*/Object.freeze({
    default: start_of_quarter,
    __moduleExports: start_of_quarter
  });

  var startOfQuarter$1 = ( start_of_quarter$1 && start_of_quarter ) || start_of_quarter$1;

  /**
   * @category Quarter Helpers
   * @summary Are the given dates in the same year quarter?
   *
   * @description
   * Are the given dates in the same year quarter?
   *
   * @param {Date|String|Number} dateLeft - the first date to check
   * @param {Date|String|Number} dateRight - the second date to check
   * @returns {Boolean} the dates are in the same quarter
   *
   * @example
   * // Are 1 January 2014 and 8 March 2014 in the same quarter?
   * var result = isSameQuarter(
   *   new Date(2014, 0, 1),
   *   new Date(2014, 2, 8)
   * )
   * //=> true
   */
  function isSameQuarter (dirtyDateLeft, dirtyDateRight) {
    var dateLeftStartOfQuarter = startOfQuarter$1(dirtyDateLeft);
    var dateRightStartOfQuarter = startOfQuarter$1(dirtyDateRight);

    return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime()
  }

  var is_same_quarter = isSameQuarter;

  var is_same_quarter$1 = /*#__PURE__*/Object.freeze({
    default: is_same_quarter,
    __moduleExports: is_same_quarter
  });

  /**
   * @category Second Helpers
   * @summary Return the start of a second for the given date.
   *
   * @description
   * Return the start of a second for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the start of a second
   *
   * @example
   * // The start of a second for 1 December 2014 22:15:45.400:
   * var result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
   * //=> Mon Dec 01 2014 22:15:45.000
   */
  function startOfSecond (dirtyDate) {
    var date = parse$2(dirtyDate);
    date.setMilliseconds(0);
    return date
  }

  var start_of_second = startOfSecond;

  var start_of_second$1 = /*#__PURE__*/Object.freeze({
    default: start_of_second,
    __moduleExports: start_of_second
  });

  var startOfSecond$1 = ( start_of_second$1 && start_of_second ) || start_of_second$1;

  /**
   * @category Second Helpers
   * @summary Are the given dates in the same second?
   *
   * @description
   * Are the given dates in the same second?
   *
   * @param {Date|String|Number} dateLeft - the first date to check
   * @param {Date|String|Number} dateRight - the second date to check
   * @returns {Boolean} the dates are in the same second
   *
   * @example
   * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500
   * // in the same second?
   * var result = isSameSecond(
   *   new Date(2014, 8, 4, 6, 30, 15),
   *   new Date(2014, 8, 4, 6, 30, 15, 500)
   * )
   * //=> true
   */
  function isSameSecond (dirtyDateLeft, dirtyDateRight) {
    var dateLeftStartOfSecond = startOfSecond$1(dirtyDateLeft);
    var dateRightStartOfSecond = startOfSecond$1(dirtyDateRight);

    return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime()
  }

  var is_same_second = isSameSecond;

  var is_same_second$1 = /*#__PURE__*/Object.freeze({
    default: is_same_second,
    __moduleExports: is_same_second
  });

  /**
   * @category Year Helpers
   * @summary Are the given dates in the same year?
   *
   * @description
   * Are the given dates in the same year?
   *
   * @param {Date|String|Number} dateLeft - the first date to check
   * @param {Date|String|Number} dateRight - the second date to check
   * @returns {Boolean} the dates are in the same year
   *
   * @example
   * // Are 2 September 2014 and 25 September 2014 in the same year?
   * var result = isSameYear(
   *   new Date(2014, 8, 2),
   *   new Date(2014, 8, 25)
   * )
   * //=> true
   */
  function isSameYear (dirtyDateLeft, dirtyDateRight) {
    var dateLeft = parse$2(dirtyDateLeft);
    var dateRight = parse$2(dirtyDateRight);
    return dateLeft.getFullYear() === dateRight.getFullYear()
  }

  var is_same_year = isSameYear;

  var is_same_year$1 = /*#__PURE__*/Object.freeze({
    default: is_same_year,
    __moduleExports: is_same_year
  });

  /**
   * @category Weekday Helpers
   * @summary Is the given date Saturday?
   *
   * @description
   * Is the given date Saturday?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is Saturday
   *
   * @example
   * // Is 27 September 2014 Saturday?
   * var result = isSaturday(new Date(2014, 8, 27))
   * //=> true
   */
  function isSaturday (dirtyDate) {
    return parse$2(dirtyDate).getDay() === 6
  }

  var is_saturday = isSaturday;

  var is_saturday$1 = /*#__PURE__*/Object.freeze({
    default: is_saturday,
    __moduleExports: is_saturday
  });

  /**
   * @category Weekday Helpers
   * @summary Is the given date Sunday?
   *
   * @description
   * Is the given date Sunday?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is Sunday
   *
   * @example
   * // Is 21 September 2014 Sunday?
   * var result = isSunday(new Date(2014, 8, 21))
   * //=> true
   */
  function isSunday (dirtyDate) {
    return parse$2(dirtyDate).getDay() === 0
  }

  var is_sunday = isSunday;

  var is_sunday$1 = /*#__PURE__*/Object.freeze({
    default: is_sunday,
    __moduleExports: is_sunday
  });

  var isSameHour$1 = ( is_same_hour$1 && is_same_hour ) || is_same_hour$1;

  /**
   * @category Hour Helpers
   * @summary Is the given date in the same hour as the current date?
   *
   * @description
   * Is the given date in the same hour as the current date?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is in this hour
   *
   * @example
   * // If now is 25 September 2014 18:30:15.500,
   * // is 25 September 2014 18:00:00 in this hour?
   * var result = isThisHour(new Date(2014, 8, 25, 18))
   * //=> true
   */
  function isThisHour (dirtyDate) {
    return isSameHour$1(new Date(), dirtyDate)
  }

  var is_this_hour = isThisHour;

  var is_this_hour$1 = /*#__PURE__*/Object.freeze({
    default: is_this_hour,
    __moduleExports: is_this_hour
  });

  var isSameISOWeek$1 = ( is_same_iso_week$1 && is_same_iso_week ) || is_same_iso_week$1;

  /**
   * @category ISO Week Helpers
   * @summary Is the given date in the same ISO week as the current date?
   *
   * @description
   * Is the given date in the same ISO week as the current date?
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is in this ISO week
   *
   * @example
   * // If today is 25 September 2014, is 22 September 2014 in this ISO week?
   * var result = isThisISOWeek(new Date(2014, 8, 22))
   * //=> true
   */
  function isThisISOWeek (dirtyDate) {
    return isSameISOWeek$1(new Date(), dirtyDate)
  }

  var is_this_iso_week = isThisISOWeek;

  var is_this_iso_week$1 = /*#__PURE__*/Object.freeze({
    default: is_this_iso_week,
    __moduleExports: is_this_iso_week
  });

  var isSameISOYear$1 = ( is_same_iso_year$1 && is_same_iso_year ) || is_same_iso_year$1;

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Is the given date in the same ISO week-numbering year as the current date?
   *
   * @description
   * Is the given date in the same ISO week-numbering year as the current date?
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is in this ISO week-numbering year
   *
   * @example
   * // If today is 25 September 2014,
   * // is 30 December 2013 in this ISO week-numbering year?
   * var result = isThisISOYear(new Date(2013, 11, 30))
   * //=> true
   */
  function isThisISOYear (dirtyDate) {
    return isSameISOYear$1(new Date(), dirtyDate)
  }

  var is_this_iso_year = isThisISOYear;

  var is_this_iso_year$1 = /*#__PURE__*/Object.freeze({
    default: is_this_iso_year,
    __moduleExports: is_this_iso_year
  });

  var isSameMinute$1 = ( is_same_minute$1 && is_same_minute ) || is_same_minute$1;

  /**
   * @category Minute Helpers
   * @summary Is the given date in the same minute as the current date?
   *
   * @description
   * Is the given date in the same minute as the current date?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is in this minute
   *
   * @example
   * // If now is 25 September 2014 18:30:15.500,
   * // is 25 September 2014 18:30:00 in this minute?
   * var result = isThisMinute(new Date(2014, 8, 25, 18, 30))
   * //=> true
   */
  function isThisMinute (dirtyDate) {
    return isSameMinute$1(new Date(), dirtyDate)
  }

  var is_this_minute = isThisMinute;

  var is_this_minute$1 = /*#__PURE__*/Object.freeze({
    default: is_this_minute,
    __moduleExports: is_this_minute
  });

  var isSameMonth$1 = ( is_same_month$1 && is_same_month ) || is_same_month$1;

  /**
   * @category Month Helpers
   * @summary Is the given date in the same month as the current date?
   *
   * @description
   * Is the given date in the same month as the current date?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is in this month
   *
   * @example
   * // If today is 25 September 2014, is 15 September 2014 in this month?
   * var result = isThisMonth(new Date(2014, 8, 15))
   * //=> true
   */
  function isThisMonth (dirtyDate) {
    return isSameMonth$1(new Date(), dirtyDate)
  }

  var is_this_month = isThisMonth;

  var is_this_month$1 = /*#__PURE__*/Object.freeze({
    default: is_this_month,
    __moduleExports: is_this_month
  });

  var isSameQuarter$1 = ( is_same_quarter$1 && is_same_quarter ) || is_same_quarter$1;

  /**
   * @category Quarter Helpers
   * @summary Is the given date in the same quarter as the current date?
   *
   * @description
   * Is the given date in the same quarter as the current date?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is in this quarter
   *
   * @example
   * // If today is 25 September 2014, is 2 July 2014 in this quarter?
   * var result = isThisQuarter(new Date(2014, 6, 2))
   * //=> true
   */
  function isThisQuarter (dirtyDate) {
    return isSameQuarter$1(new Date(), dirtyDate)
  }

  var is_this_quarter = isThisQuarter;

  var is_this_quarter$1 = /*#__PURE__*/Object.freeze({
    default: is_this_quarter,
    __moduleExports: is_this_quarter
  });

  var isSameSecond$1 = ( is_same_second$1 && is_same_second ) || is_same_second$1;

  /**
   * @category Second Helpers
   * @summary Is the given date in the same second as the current date?
   *
   * @description
   * Is the given date in the same second as the current date?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is in this second
   *
   * @example
   * // If now is 25 September 2014 18:30:15.500,
   * // is 25 September 2014 18:30:15.000 in this second?
   * var result = isThisSecond(new Date(2014, 8, 25, 18, 30, 15))
   * //=> true
   */
  function isThisSecond (dirtyDate) {
    return isSameSecond$1(new Date(), dirtyDate)
  }

  var is_this_second = isThisSecond;

  var is_this_second$1 = /*#__PURE__*/Object.freeze({
    default: is_this_second,
    __moduleExports: is_this_second
  });

  /**
   * @category Week Helpers
   * @summary Is the given date in the same week as the current date?
   *
   * @description
   * Is the given date in the same week as the current date?
   *
   * @param {Date|String|Number} date - the date to check
   * @param {Object} [options] - the object with options
   * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
   * @returns {Boolean} the date is in this week
   *
   * @example
   * // If today is 25 September 2014, is 21 September 2014 in this week?
   * var result = isThisWeek(new Date(2014, 8, 21))
   * //=> true
   *
   * @example
   * // If today is 25 September 2014 and week starts with Monday
   * // is 21 September 2014 in this week?
   * var result = isThisWeek(new Date(2014, 8, 21), {weekStartsOn: 1})
   * //=> false
   */
  function isThisWeek (dirtyDate, dirtyOptions) {
    return isSameWeek$1(new Date(), dirtyDate, dirtyOptions)
  }

  var is_this_week = isThisWeek;

  var is_this_week$1 = /*#__PURE__*/Object.freeze({
    default: is_this_week,
    __moduleExports: is_this_week
  });

  var isSameYear$1 = ( is_same_year$1 && is_same_year ) || is_same_year$1;

  /**
   * @category Year Helpers
   * @summary Is the given date in the same year as the current date?
   *
   * @description
   * Is the given date in the same year as the current date?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is in this year
   *
   * @example
   * // If today is 25 September 2014, is 2 July 2014 in this year?
   * var result = isThisYear(new Date(2014, 6, 2))
   * //=> true
   */
  function isThisYear (dirtyDate) {
    return isSameYear$1(new Date(), dirtyDate)
  }

  var is_this_year = isThisYear;

  var is_this_year$1 = /*#__PURE__*/Object.freeze({
    default: is_this_year,
    __moduleExports: is_this_year
  });

  /**
   * @category Weekday Helpers
   * @summary Is the given date Thursday?
   *
   * @description
   * Is the given date Thursday?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is Thursday
   *
   * @example
   * // Is 25 September 2014 Thursday?
   * var result = isThursday(new Date(2014, 8, 25))
   * //=> true
   */
  function isThursday (dirtyDate) {
    return parse$2(dirtyDate).getDay() === 4
  }

  var is_thursday = isThursday;

  var is_thursday$1 = /*#__PURE__*/Object.freeze({
    default: is_thursday,
    __moduleExports: is_thursday
  });

  /**
   * @category Day Helpers
   * @summary Is the given date today?
   *
   * @description
   * Is the given date today?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is today
   *
   * @example
   * // If today is 6 October 2014, is 6 October 14:00:00 today?
   * var result = isToday(new Date(2014, 9, 6, 14, 0))
   * //=> true
   */
  function isToday (dirtyDate) {
    return startOfDay$1(dirtyDate).getTime() === startOfDay$1(new Date()).getTime()
  }

  var is_today = isToday;

  var is_today$1 = /*#__PURE__*/Object.freeze({
    default: is_today,
    __moduleExports: is_today
  });

  /**
   * @category Day Helpers
   * @summary Is the given date tomorrow?
   *
   * @description
   * Is the given date tomorrow?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is tomorrow
   *
   * @example
   * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?
   * var result = isTomorrow(new Date(2014, 9, 7, 14, 0))
   * //=> true
   */
  function isTomorrow (dirtyDate) {
    var tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return startOfDay$1(dirtyDate).getTime() === startOfDay$1(tomorrow).getTime()
  }

  var is_tomorrow = isTomorrow;

  var is_tomorrow$1 = /*#__PURE__*/Object.freeze({
    default: is_tomorrow,
    __moduleExports: is_tomorrow
  });

  /**
   * @category Weekday Helpers
   * @summary Is the given date Tuesday?
   *
   * @description
   * Is the given date Tuesday?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is Tuesday
   *
   * @example
   * // Is 23 September 2014 Tuesday?
   * var result = isTuesday(new Date(2014, 8, 23))
   * //=> true
   */
  function isTuesday (dirtyDate) {
    return parse$2(dirtyDate).getDay() === 2
  }

  var is_tuesday = isTuesday;

  var is_tuesday$1 = /*#__PURE__*/Object.freeze({
    default: is_tuesday,
    __moduleExports: is_tuesday
  });

  /**
   * @category Weekday Helpers
   * @summary Is the given date Wednesday?
   *
   * @description
   * Is the given date Wednesday?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is Wednesday
   *
   * @example
   * // Is 24 September 2014 Wednesday?
   * var result = isWednesday(new Date(2014, 8, 24))
   * //=> true
   */
  function isWednesday (dirtyDate) {
    return parse$2(dirtyDate).getDay() === 3
  }

  var is_wednesday = isWednesday;

  var is_wednesday$1 = /*#__PURE__*/Object.freeze({
    default: is_wednesday,
    __moduleExports: is_wednesday
  });

  /**
   * @category Weekday Helpers
   * @summary Does the given date fall on a weekend?
   *
   * @description
   * Does the given date fall on a weekend?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date falls on a weekend
   *
   * @example
   * // Does 5 October 2014 fall on a weekend?
   * var result = isWeekend(new Date(2014, 9, 5))
   * //=> true
   */
  function isWeekend (dirtyDate) {
    var date = parse$2(dirtyDate);
    var day = date.getDay();
    return day === 0 || day === 6
  }

  var is_weekend = isWeekend;

  var is_weekend$1 = /*#__PURE__*/Object.freeze({
    default: is_weekend,
    __moduleExports: is_weekend
  });

  /**
   * @category Range Helpers
   * @summary Is the given date within the range?
   *
   * @description
   * Is the given date within the range?
   *
   * @param {Date|String|Number} date - the date to check
   * @param {Date|String|Number} startDate - the start of range
   * @param {Date|String|Number} endDate - the end of range
   * @returns {Boolean} the date is within the range
   * @throws {Error} startDate cannot be after endDate
   *
   * @example
   * // For the date within the range:
   * isWithinRange(
   *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)
   * )
   * //=> true
   *
   * @example
   * // For the date outside of the range:
   * isWithinRange(
   *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)
   * )
   * //=> false
   */
  function isWithinRange (dirtyDate, dirtyStartDate, dirtyEndDate) {
    var time = parse$2(dirtyDate).getTime();
    var startTime = parse$2(dirtyStartDate).getTime();
    var endTime = parse$2(dirtyEndDate).getTime();

    if (startTime > endTime) {
      throw new Error('The start of the range cannot be after the end of the range')
    }

    return time >= startTime && time <= endTime
  }

  var is_within_range = isWithinRange;

  var is_within_range$1 = /*#__PURE__*/Object.freeze({
    default: is_within_range,
    __moduleExports: is_within_range
  });

  /**
   * @category Day Helpers
   * @summary Is the given date yesterday?
   *
   * @description
   * Is the given date yesterday?
   *
   * @param {Date|String|Number} date - the date to check
   * @returns {Boolean} the date is yesterday
   *
   * @example
   * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?
   * var result = isYesterday(new Date(2014, 9, 5, 14, 0))
   * //=> true
   */
  function isYesterday (dirtyDate) {
    var yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    return startOfDay$1(dirtyDate).getTime() === startOfDay$1(yesterday).getTime()
  }

  var is_yesterday = isYesterday;

  var is_yesterday$1 = /*#__PURE__*/Object.freeze({
    default: is_yesterday,
    __moduleExports: is_yesterday
  });

  /**
   * @category Week Helpers
   * @summary Return the last day of a week for the given date.
   *
   * @description
   * Return the last day of a week for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @param {Object} [options] - the object with options
   * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
   * @returns {Date} the last day of a week
   *
   * @example
   * // The last day of a week for 2 September 2014 11:55:00:
   * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Sat Sep 06 2014 00:00:00
   *
   * @example
   * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:
   * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
   * //=> Sun Sep 07 2014 00:00:00
   */
  function lastDayOfWeek (dirtyDate, dirtyOptions) {
    var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0;

    var date = parse$2(dirtyDate);
    var day = date.getDay();
    var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);

    date.setHours(0, 0, 0, 0);
    date.setDate(date.getDate() + diff);
    return date
  }

  var last_day_of_week = lastDayOfWeek;

  var last_day_of_week$1 = /*#__PURE__*/Object.freeze({
    default: last_day_of_week,
    __moduleExports: last_day_of_week
  });

  var lastDayOfWeek$1 = ( last_day_of_week$1 && last_day_of_week ) || last_day_of_week$1;

  /**
   * @category ISO Week Helpers
   * @summary Return the last day of an ISO week for the given date.
   *
   * @description
   * Return the last day of an ISO week for the given date.
   * The result will be in the local timezone.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the last day of an ISO week
   *
   * @example
   * // The last day of an ISO week for 2 September 2014 11:55:00:
   * var result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Sun Sep 07 2014 00:00:00
   */
  function lastDayOfISOWeek (dirtyDate) {
    return lastDayOfWeek$1(dirtyDate, {weekStartsOn: 1})
  }

  var last_day_of_iso_week = lastDayOfISOWeek;

  var last_day_of_iso_week$1 = /*#__PURE__*/Object.freeze({
    default: last_day_of_iso_week,
    __moduleExports: last_day_of_iso_week
  });

  /**
   * @category ISO Week-Numbering Year Helpers
   * @summary Return the last day of an ISO week-numbering year for the given date.
   *
   * @description
   * Return the last day of an ISO week-numbering year,
   * which always starts 3 days before the year's first Thursday.
   * The result will be in the local timezone.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the end of an ISO week-numbering year
   *
   * @example
   * // The last day of an ISO week-numbering year for 2 July 2005:
   * var result = lastDayOfISOYear(new Date(2005, 6, 2))
   * //=> Sun Jan 01 2006 00:00:00
   */
  function lastDayOfISOYear (dirtyDate) {
    var year = getISOYear$1(dirtyDate);
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setFullYear(year + 1, 0, 4);
    fourthOfJanuary.setHours(0, 0, 0, 0);
    var date = startOfISOWeek$1(fourthOfJanuary);
    date.setDate(date.getDate() - 1);
    return date
  }

  var last_day_of_iso_year = lastDayOfISOYear;

  var last_day_of_iso_year$1 = /*#__PURE__*/Object.freeze({
    default: last_day_of_iso_year,
    __moduleExports: last_day_of_iso_year
  });

  /**
   * @category Month Helpers
   * @summary Return the last day of a month for the given date.
   *
   * @description
   * Return the last day of a month for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the last day of a month
   *
   * @example
   * // The last day of a month for 2 September 2014 11:55:00:
   * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Tue Sep 30 2014 00:00:00
   */
  function lastDayOfMonth (dirtyDate) {
    var date = parse$2(dirtyDate);
    var month = date.getMonth();
    date.setFullYear(date.getFullYear(), month + 1, 0);
    date.setHours(0, 0, 0, 0);
    return date
  }

  var last_day_of_month = lastDayOfMonth;

  var last_day_of_month$1 = /*#__PURE__*/Object.freeze({
    default: last_day_of_month,
    __moduleExports: last_day_of_month
  });

  /**
   * @category Quarter Helpers
   * @summary Return the last day of a year quarter for the given date.
   *
   * @description
   * Return the last day of a year quarter for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the last day of a quarter
   *
   * @example
   * // The last day of a quarter for 2 September 2014 11:55:00:
   * var result = lastDayOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Tue Sep 30 2014 00:00:00
   */
  function lastDayOfQuarter (dirtyDate) {
    var date = parse$2(dirtyDate);
    var currentMonth = date.getMonth();
    var month = currentMonth - currentMonth % 3 + 3;
    date.setMonth(month, 0);
    date.setHours(0, 0, 0, 0);
    return date
  }

  var last_day_of_quarter = lastDayOfQuarter;

  var last_day_of_quarter$1 = /*#__PURE__*/Object.freeze({
    default: last_day_of_quarter,
    __moduleExports: last_day_of_quarter
  });

  /**
   * @category Year Helpers
   * @summary Return the last day of a year for the given date.
   *
   * @description
   * Return the last day of a year for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the last day of a year
   *
   * @example
   * // The last day of a year for 2 September 2014 11:55:00:
   * var result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))
   * //=> Wed Dec 31 2014 00:00:00
   */
  function lastDayOfYear (dirtyDate) {
    var date = parse$2(dirtyDate);
    var year = date.getFullYear();
    date.setFullYear(year + 1, 0, 0);
    date.setHours(0, 0, 0, 0);
    return date
  }

  var last_day_of_year = lastDayOfYear;

  var last_day_of_year$1 = /*#__PURE__*/Object.freeze({
    default: last_day_of_year,
    __moduleExports: last_day_of_year
  });

  /**
   * @category Common Helpers
   * @summary Return the latest of the given dates.
   *
   * @description
   * Return the latest of the given dates.
   *
   * @param {...(Date|String|Number)} dates - the dates to compare
   * @returns {Date} the latest of the dates
   *
   * @example
   * // Which of these dates is the latest?
   * var result = max(
   *   new Date(1989, 6, 10),
   *   new Date(1987, 1, 11),
   *   new Date(1995, 6, 2),
   *   new Date(1990, 0, 1)
   * )
   * //=> Sun Jul 02 1995 00:00:00
   */
  function max () {
    var dirtyDates = Array.prototype.slice.call(arguments);
    var dates = dirtyDates.map(function (dirtyDate) {
      return parse$2(dirtyDate)
    });
    var latestTimestamp = Math.max.apply(null, dates);
    return new Date(latestTimestamp)
  }

  var max_1 = max;

  var max$1 = /*#__PURE__*/Object.freeze({
    default: max_1,
    __moduleExports: max_1
  });

  /**
   * @category Common Helpers
   * @summary Return the earliest of the given dates.
   *
   * @description
   * Return the earliest of the given dates.
   *
   * @param {...(Date|String|Number)} dates - the dates to compare
   * @returns {Date} the earliest of the dates
   *
   * @example
   * // Which of these dates is the earliest?
   * var result = min(
   *   new Date(1989, 6, 10),
   *   new Date(1987, 1, 11),
   *   new Date(1995, 6, 2),
   *   new Date(1990, 0, 1)
   * )
   * //=> Wed Feb 11 1987 00:00:00
   */
  function min () {
    var dirtyDates = Array.prototype.slice.call(arguments);
    var dates = dirtyDates.map(function (dirtyDate) {
      return parse$2(dirtyDate)
    });
    var earliestTimestamp = Math.min.apply(null, dates);
    return new Date(earliestTimestamp)
  }

  var min_1 = min;

  var min$1 = /*#__PURE__*/Object.freeze({
    default: min_1,
    __moduleExports: min_1
  });

  /**
   * @category Day Helpers
   * @summary Set the day of the month to the given date.
   *
   * @description
   * Set the day of the month to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} dayOfMonth - the day of the month of the new date
   * @returns {Date} the new date with the day of the month setted
   *
   * @example
   * // Set the 30th day of the month to 1 September 2014:
   * var result = setDate(new Date(2014, 8, 1), 30)
   * //=> Tue Sep 30 2014 00:00:00
   */
  function setDate (dirtyDate, dirtyDayOfMonth) {
    var date = parse$2(dirtyDate);
    var dayOfMonth = Number(dirtyDayOfMonth);
    date.setDate(dayOfMonth);
    return date
  }

  var set_date = setDate;

  var set_date$1 = /*#__PURE__*/Object.freeze({
    default: set_date,
    __moduleExports: set_date
  });

  /**
   * @category Weekday Helpers
   * @summary Set the day of the week to the given date.
   *
   * @description
   * Set the day of the week to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} day - the day of the week of the new date
   * @param {Object} [options] - the object with options
   * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
   * @returns {Date} the new date with the day of the week setted
   *
   * @example
   * // Set Sunday to 1 September 2014:
   * var result = setDay(new Date(2014, 8, 1), 0)
   * //=> Sun Aug 31 2014 00:00:00
   *
   * @example
   * // If week starts with Monday, set Sunday to 1 September 2014:
   * var result = setDay(new Date(2014, 8, 1), 0, {weekStartsOn: 1})
   * //=> Sun Sep 07 2014 00:00:00
   */
  function setDay (dirtyDate, dirtyDay, dirtyOptions) {
    var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0;
    var date = parse$2(dirtyDate);
    var day = Number(dirtyDay);
    var currentDay = date.getDay();

    var remainder = day % 7;
    var dayIndex = (remainder + 7) % 7;

    var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
    return addDays$1(date, diff)
  }

  var set_day = setDay;

  var set_day$1 = /*#__PURE__*/Object.freeze({
    default: set_day,
    __moduleExports: set_day
  });

  /**
   * @category Day Helpers
   * @summary Set the day of the year to the given date.
   *
   * @description
   * Set the day of the year to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} dayOfYear - the day of the year of the new date
   * @returns {Date} the new date with the day of the year setted
   *
   * @example
   * // Set the 2nd day of the year to 2 July 2014:
   * var result = setDayOfYear(new Date(2014, 6, 2), 2)
   * //=> Thu Jan 02 2014 00:00:00
   */
  function setDayOfYear (dirtyDate, dirtyDayOfYear) {
    var date = parse$2(dirtyDate);
    var dayOfYear = Number(dirtyDayOfYear);
    date.setMonth(0);
    date.setDate(dayOfYear);
    return date
  }

  var set_day_of_year = setDayOfYear;

  var set_day_of_year$1 = /*#__PURE__*/Object.freeze({
    default: set_day_of_year,
    __moduleExports: set_day_of_year
  });

  /**
   * @category Hour Helpers
   * @summary Set the hours to the given date.
   *
   * @description
   * Set the hours to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} hours - the hours of the new date
   * @returns {Date} the new date with the hours setted
   *
   * @example
   * // Set 4 hours to 1 September 2014 11:30:00:
   * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)
   * //=> Mon Sep 01 2014 04:30:00
   */
  function setHours (dirtyDate, dirtyHours) {
    var date = parse$2(dirtyDate);
    var hours = Number(dirtyHours);
    date.setHours(hours);
    return date
  }

  var set_hours = setHours;

  var set_hours$1 = /*#__PURE__*/Object.freeze({
    default: set_hours,
    __moduleExports: set_hours
  });

  var getISODay$1 = ( get_iso_day$1 && get_iso_day ) || get_iso_day$1;

  /**
   * @category Weekday Helpers
   * @summary Set the day of the ISO week to the given date.
   *
   * @description
   * Set the day of the ISO week to the given date.
   * ISO week starts with Monday.
   * 7 is the index of Sunday, 1 is the index of Monday etc.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} day - the day of the ISO week of the new date
   * @returns {Date} the new date with the day of the ISO week setted
   *
   * @example
   * // Set Sunday to 1 September 2014:
   * var result = setISODay(new Date(2014, 8, 1), 7)
   * //=> Sun Sep 07 2014 00:00:00
   */
  function setISODay (dirtyDate, dirtyDay) {
    var date = parse$2(dirtyDate);
    var day = Number(dirtyDay);
    var currentDay = getISODay$1(date);
    var diff = day - currentDay;
    return addDays$1(date, diff)
  }

  var set_iso_day = setISODay;

  var set_iso_day$1 = /*#__PURE__*/Object.freeze({
    default: set_iso_day,
    __moduleExports: set_iso_day
  });

  /**
   * @category ISO Week Helpers
   * @summary Set the ISO week to the given date.
   *
   * @description
   * Set the ISO week to the given date, saving the weekday number.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} isoWeek - the ISO week of the new date
   * @returns {Date} the new date with the ISO week setted
   *
   * @example
   * // Set the 53rd ISO week to 7 August 2004:
   * var result = setISOWeek(new Date(2004, 7, 7), 53)
   * //=> Sat Jan 01 2005 00:00:00
   */
  function setISOWeek (dirtyDate, dirtyISOWeek) {
    var date = parse$2(dirtyDate);
    var isoWeek = Number(dirtyISOWeek);
    var diff = getISOWeek$1(date) - isoWeek;
    date.setDate(date.getDate() - diff * 7);
    return date
  }

  var set_iso_week = setISOWeek;

  var set_iso_week$1 = /*#__PURE__*/Object.freeze({
    default: set_iso_week,
    __moduleExports: set_iso_week
  });

  /**
   * @category Millisecond Helpers
   * @summary Set the milliseconds to the given date.
   *
   * @description
   * Set the milliseconds to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} milliseconds - the milliseconds of the new date
   * @returns {Date} the new date with the milliseconds setted
   *
   * @example
   * // Set 300 milliseconds to 1 September 2014 11:30:40.500:
   * var result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)
   * //=> Mon Sep 01 2014 11:30:40.300
   */
  function setMilliseconds (dirtyDate, dirtyMilliseconds) {
    var date = parse$2(dirtyDate);
    var milliseconds = Number(dirtyMilliseconds);
    date.setMilliseconds(milliseconds);
    return date
  }

  var set_milliseconds = setMilliseconds;

  var set_milliseconds$1 = /*#__PURE__*/Object.freeze({
    default: set_milliseconds,
    __moduleExports: set_milliseconds
  });

  /**
   * @category Minute Helpers
   * @summary Set the minutes to the given date.
   *
   * @description
   * Set the minutes to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} minutes - the minutes of the new date
   * @returns {Date} the new date with the minutes setted
   *
   * @example
   * // Set 45 minutes to 1 September 2014 11:30:40:
   * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)
   * //=> Mon Sep 01 2014 11:45:40
   */
  function setMinutes (dirtyDate, dirtyMinutes) {
    var date = parse$2(dirtyDate);
    var minutes = Number(dirtyMinutes);
    date.setMinutes(minutes);
    return date
  }

  var set_minutes = setMinutes;

  var set_minutes$1 = /*#__PURE__*/Object.freeze({
    default: set_minutes,
    __moduleExports: set_minutes
  });

  /**
   * @category Month Helpers
   * @summary Set the month to the given date.
   *
   * @description
   * Set the month to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} month - the month of the new date
   * @returns {Date} the new date with the month setted
   *
   * @example
   * // Set February to 1 September 2014:
   * var result = setMonth(new Date(2014, 8, 1), 1)
   * //=> Sat Feb 01 2014 00:00:00
   */
  function setMonth (dirtyDate, dirtyMonth) {
    var date = parse$2(dirtyDate);
    var month = Number(dirtyMonth);
    var year = date.getFullYear();
    var day = date.getDate();

    var dateWithDesiredMonth = new Date(0);
    dateWithDesiredMonth.setFullYear(year, month, 15);
    dateWithDesiredMonth.setHours(0, 0, 0, 0);
    var daysInMonth = getDaysInMonth$1(dateWithDesiredMonth);
    // Set the last day of the new month
    // if the original date was the last day of the longer month
    date.setMonth(month, Math.min(day, daysInMonth));
    return date
  }

  var set_month = setMonth;

  var set_month$1 = /*#__PURE__*/Object.freeze({
    default: set_month,
    __moduleExports: set_month
  });

  var setMonth$1 = ( set_month$1 && set_month ) || set_month$1;

  /**
   * @category Quarter Helpers
   * @summary Set the year quarter to the given date.
   *
   * @description
   * Set the year quarter to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} quarter - the quarter of the new date
   * @returns {Date} the new date with the quarter setted
   *
   * @example
   * // Set the 2nd quarter to 2 July 2014:
   * var result = setQuarter(new Date(2014, 6, 2), 2)
   * //=> Wed Apr 02 2014 00:00:00
   */
  function setQuarter (dirtyDate, dirtyQuarter) {
    var date = parse$2(dirtyDate);
    var quarter = Number(dirtyQuarter);
    var oldQuarter = Math.floor(date.getMonth() / 3) + 1;
    var diff = quarter - oldQuarter;
    return setMonth$1(date, date.getMonth() + diff * 3)
  }

  var set_quarter = setQuarter;

  var set_quarter$1 = /*#__PURE__*/Object.freeze({
    default: set_quarter,
    __moduleExports: set_quarter
  });

  /**
   * @category Second Helpers
   * @summary Set the seconds to the given date.
   *
   * @description
   * Set the seconds to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} seconds - the seconds of the new date
   * @returns {Date} the new date with the seconds setted
   *
   * @example
   * // Set 45 seconds to 1 September 2014 11:30:40:
   * var result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)
   * //=> Mon Sep 01 2014 11:30:45
   */
  function setSeconds (dirtyDate, dirtySeconds) {
    var date = parse$2(dirtyDate);
    var seconds = Number(dirtySeconds);
    date.setSeconds(seconds);
    return date
  }

  var set_seconds = setSeconds;

  var set_seconds$1 = /*#__PURE__*/Object.freeze({
    default: set_seconds,
    __moduleExports: set_seconds
  });

  /**
   * @category Year Helpers
   * @summary Set the year to the given date.
   *
   * @description
   * Set the year to the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} year - the year of the new date
   * @returns {Date} the new date with the year setted
   *
   * @example
   * // Set year 2013 to 1 September 2014:
   * var result = setYear(new Date(2014, 8, 1), 2013)
   * //=> Sun Sep 01 2013 00:00:00
   */
  function setYear (dirtyDate, dirtyYear) {
    var date = parse$2(dirtyDate);
    var year = Number(dirtyYear);
    date.setFullYear(year);
    return date
  }

  var set_year = setYear;

  var set_year$1 = /*#__PURE__*/Object.freeze({
    default: set_year,
    __moduleExports: set_year
  });

  /**
   * @category Month Helpers
   * @summary Return the start of a month for the given date.
   *
   * @description
   * Return the start of a month for the given date.
   * The result will be in the local timezone.
   *
   * @param {Date|String|Number} date - the original date
   * @returns {Date} the start of a month
   *
   * @example
   * // The start of a month for 2 September 2014 11:55:00:
   * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Mon Sep 01 2014 00:00:00
   */
  function startOfMonth (dirtyDate) {
    var date = parse$2(dirtyDate);
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
    return date
  }

  var start_of_month = startOfMonth;

  var start_of_month$1 = /*#__PURE__*/Object.freeze({
    default: start_of_month,
    __moduleExports: start_of_month
  });

  /**
   * @category Day Helpers
   * @summary Return the start of today.
   *
   * @description
   * Return the start of today.
   *
   * @returns {Date} the start of today
   *
   * @example
   * // If today is 6 October 2014:
   * var result = startOfToday()
   * //=> Mon Oct 6 2014 00:00:00
   */
  function startOfToday () {
    return startOfDay$1(new Date())
  }

  var start_of_today = startOfToday;

  var start_of_today$1 = /*#__PURE__*/Object.freeze({
    default: start_of_today,
    __moduleExports: start_of_today
  });

  /**
   * @category Day Helpers
   * @summary Return the start of tomorrow.
   *
   * @description
   * Return the start of tomorrow.
   *
   * @returns {Date} the start of tomorrow
   *
   * @example
   * // If today is 6 October 2014:
   * var result = startOfTomorrow()
   * //=> Tue Oct 7 2014 00:00:00
   */
  function startOfTomorrow () {
    var now = new Date();
    var year = now.getFullYear();
    var month = now.getMonth();
    var day = now.getDate();

    var date = new Date(0);
    date.setFullYear(year, month, day + 1);
    date.setHours(0, 0, 0, 0);
    return date
  }

  var start_of_tomorrow = startOfTomorrow;

  var start_of_tomorrow$1 = /*#__PURE__*/Object.freeze({
    default: start_of_tomorrow,
    __moduleExports: start_of_tomorrow
  });

  /**
   * @category Day Helpers
   * @summary Return the start of yesterday.
   *
   * @description
   * Return the start of yesterday.
   *
   * @returns {Date} the start of yesterday
   *
   * @example
   * // If today is 6 October 2014:
   * var result = startOfYesterday()
   * //=> Sun Oct 5 2014 00:00:00
   */
  function startOfYesterday () {
    var now = new Date();
    var year = now.getFullYear();
    var month = now.getMonth();
    var day = now.getDate();

    var date = new Date(0);
    date.setFullYear(year, month, day - 1);
    date.setHours(0, 0, 0, 0);
    return date
  }

  var start_of_yesterday = startOfYesterday;

  var start_of_yesterday$1 = /*#__PURE__*/Object.freeze({
    default: start_of_yesterday,
    __moduleExports: start_of_yesterday
  });

  /**
   * @category Day Helpers
   * @summary Subtract the specified number of days from the given date.
   *
   * @description
   * Subtract the specified number of days from the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of days to be subtracted
   * @returns {Date} the new date with the days subtracted
   *
   * @example
   * // Subtract 10 days from 1 September 2014:
   * var result = subDays(new Date(2014, 8, 1), 10)
   * //=> Fri Aug 22 2014 00:00:00
   */
  function subDays (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addDays$1(dirtyDate, -amount)
  }

  var sub_days = subDays;

  var sub_days$1 = /*#__PURE__*/Object.freeze({
    default: sub_days,
    __moduleExports: sub_days
  });

  var addHours$1 = ( add_hours$1 && add_hours ) || add_hours$1;

  /**
   * @category Hour Helpers
   * @summary Subtract the specified number of hours from the given date.
   *
   * @description
   * Subtract the specified number of hours from the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of hours to be subtracted
   * @returns {Date} the new date with the hours subtracted
   *
   * @example
   * // Subtract 2 hours from 11 July 2014 01:00:00:
   * var result = subHours(new Date(2014, 6, 11, 1, 0), 2)
   * //=> Thu Jul 10 2014 23:00:00
   */
  function subHours (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addHours$1(dirtyDate, -amount)
  }

  var sub_hours = subHours;

  var sub_hours$1 = /*#__PURE__*/Object.freeze({
    default: sub_hours,
    __moduleExports: sub_hours
  });

  /**
   * @category Millisecond Helpers
   * @summary Subtract the specified number of milliseconds from the given date.
   *
   * @description
   * Subtract the specified number of milliseconds from the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of milliseconds to be subtracted
   * @returns {Date} the new date with the milliseconds subtracted
   *
   * @example
   * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
   * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
   * //=> Thu Jul 10 2014 12:45:29.250
   */
  function subMilliseconds (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addMilliseconds$1(dirtyDate, -amount)
  }

  var sub_milliseconds = subMilliseconds;

  var sub_milliseconds$1 = /*#__PURE__*/Object.freeze({
    default: sub_milliseconds,
    __moduleExports: sub_milliseconds
  });

  var addMinutes$1 = ( add_minutes$1 && add_minutes ) || add_minutes$1;

  /**
   * @category Minute Helpers
   * @summary Subtract the specified number of minutes from the given date.
   *
   * @description
   * Subtract the specified number of minutes from the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of minutes to be subtracted
   * @returns {Date} the new date with the mintues subtracted
   *
   * @example
   * // Subtract 30 minutes from 10 July 2014 12:00:00:
   * var result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)
   * //=> Thu Jul 10 2014 11:30:00
   */
  function subMinutes (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addMinutes$1(dirtyDate, -amount)
  }

  var sub_minutes = subMinutes;

  var sub_minutes$1 = /*#__PURE__*/Object.freeze({
    default: sub_minutes,
    __moduleExports: sub_minutes
  });

  /**
   * @category Month Helpers
   * @summary Subtract the specified number of months from the given date.
   *
   * @description
   * Subtract the specified number of months from the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of months to be subtracted
   * @returns {Date} the new date with the months subtracted
   *
   * @example
   * // Subtract 5 months from 1 February 2015:
   * var result = subMonths(new Date(2015, 1, 1), 5)
   * //=> Mon Sep 01 2014 00:00:00
   */
  function subMonths (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addMonths$1(dirtyDate, -amount)
  }

  var sub_months = subMonths;

  var sub_months$1 = /*#__PURE__*/Object.freeze({
    default: sub_months,
    __moduleExports: sub_months
  });

  var addQuarters$1 = ( add_quarters$1 && add_quarters ) || add_quarters$1;

  /**
   * @category Quarter Helpers
   * @summary Subtract the specified number of year quarters from the given date.
   *
   * @description
   * Subtract the specified number of year quarters from the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of quarters to be subtracted
   * @returns {Date} the new date with the quarters subtracted
   *
   * @example
   * // Subtract 3 quarters from 1 September 2014:
   * var result = subQuarters(new Date(2014, 8, 1), 3)
   * //=> Sun Dec 01 2013 00:00:00
   */
  function subQuarters (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addQuarters$1(dirtyDate, -amount)
  }

  var sub_quarters = subQuarters;

  var sub_quarters$1 = /*#__PURE__*/Object.freeze({
    default: sub_quarters,
    __moduleExports: sub_quarters
  });

  var addSeconds$1 = ( add_seconds$1 && add_seconds ) || add_seconds$1;

  /**
   * @category Second Helpers
   * @summary Subtract the specified number of seconds from the given date.
   *
   * @description
   * Subtract the specified number of seconds from the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of seconds to be subtracted
   * @returns {Date} the new date with the seconds subtracted
   *
   * @example
   * // Subtract 30 seconds from 10 July 2014 12:45:00:
   * var result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
   * //=> Thu Jul 10 2014 12:44:30
   */
  function subSeconds (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addSeconds$1(dirtyDate, -amount)
  }

  var sub_seconds = subSeconds;

  var sub_seconds$1 = /*#__PURE__*/Object.freeze({
    default: sub_seconds,
    __moduleExports: sub_seconds
  });

  /**
   * @category Week Helpers
   * @summary Subtract the specified number of weeks from the given date.
   *
   * @description
   * Subtract the specified number of weeks from the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of weeks to be subtracted
   * @returns {Date} the new date with the weeks subtracted
   *
   * @example
   * // Subtract 4 weeks from 1 September 2014:
   * var result = subWeeks(new Date(2014, 8, 1), 4)
   * //=> Mon Aug 04 2014 00:00:00
   */
  function subWeeks (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addWeeks$1(dirtyDate, -amount)
  }

  var sub_weeks = subWeeks;

  var sub_weeks$1 = /*#__PURE__*/Object.freeze({
    default: sub_weeks,
    __moduleExports: sub_weeks
  });

  var addYears$1 = ( add_years$1 && add_years ) || add_years$1;

  /**
   * @category Year Helpers
   * @summary Subtract the specified number of years from the given date.
   *
   * @description
   * Subtract the specified number of years from the given date.
   *
   * @param {Date|String|Number} date - the date to be changed
   * @param {Number} amount - the amount of years to be subtracted
   * @returns {Date} the new date with the years subtracted
   *
   * @example
   * // Subtract 5 years from 1 September 2014:
   * var result = subYears(new Date(2014, 8, 1), 5)
   * //=> Tue Sep 01 2009 00:00:00
   */
  function subYears (dirtyDate, dirtyAmount) {
    var amount = Number(dirtyAmount);
    return addYears$1(dirtyDate, -amount)
  }

  var sub_years = subYears;

  var sub_years$1 = /*#__PURE__*/Object.freeze({
    default: sub_years,
    __moduleExports: sub_years
  });

  var require$$10 = ( are_ranges_overlapping$1 && are_ranges_overlapping ) || are_ranges_overlapping$1;

  var require$$11 = ( closest_index_to$1 && closest_index_to ) || closest_index_to$1;

  var require$$12 = ( closest_to$1 && closest_to ) || closest_to$1;

  var require$$16 = ( difference_in_calendar_iso_weeks$1 && difference_in_calendar_iso_weeks ) || difference_in_calendar_iso_weeks$1;

  var require$$19 = ( difference_in_calendar_quarters$1 && difference_in_calendar_quarters ) || difference_in_calendar_quarters$1;

  var require$$20 = ( difference_in_calendar_weeks$1 && difference_in_calendar_weeks ) || difference_in_calendar_weeks$1;

  var require$$23 = ( difference_in_hours$1 && difference_in_hours ) || difference_in_hours$1;

  var require$$24 = ( difference_in_iso_years$1 && difference_in_iso_years ) || difference_in_iso_years$1;

  var require$$26 = ( difference_in_minutes$1 && difference_in_minutes ) || difference_in_minutes$1;

  var require$$28 = ( difference_in_quarters$1 && difference_in_quarters ) || difference_in_quarters$1;

  var require$$30 = ( difference_in_weeks$1 && difference_in_weeks ) || difference_in_weeks$1;

  var require$$31 = ( difference_in_years$1 && difference_in_years ) || difference_in_years$1;

  var require$$33 = ( distance_in_words_strict$1 && distance_in_words_strict ) || distance_in_words_strict$1;

  var require$$34 = ( distance_in_words_to_now$1 && distance_in_words_to_now ) || distance_in_words_to_now$1;

  var require$$35 = ( each_day$1 && each_day ) || each_day$1;

  var require$$37 = ( end_of_hour$1 && end_of_hour ) || end_of_hour$1;

  var require$$38 = ( end_of_iso_week$1 && end_of_iso_week ) || end_of_iso_week$1;

  var require$$39 = ( end_of_iso_year$1 && end_of_iso_year ) || end_of_iso_year$1;

  var require$$40 = ( end_of_minute$1 && end_of_minute ) || end_of_minute$1;

  var require$$42 = ( end_of_quarter$1 && end_of_quarter ) || end_of_quarter$1;

  var require$$43 = ( end_of_second$1 && end_of_second ) || end_of_second$1;

  var require$$44 = ( end_of_today$1 && end_of_today ) || end_of_today$1;

  var require$$45 = ( end_of_tomorrow$1 && end_of_tomorrow ) || end_of_tomorrow$1;

  var require$$47 = ( end_of_year$1 && end_of_year ) || end_of_year$1;

  var require$$48 = ( end_of_yesterday$1 && end_of_yesterday ) || end_of_yesterday$1;

  var require$$49 = ( format$1 && format_1 ) || format$1;

  var require$$50 = ( get_date$1 && get_date ) || get_date$1;

  var require$$51 = ( get_day$1 && get_day ) || get_day$1;

  var require$$54 = ( get_days_in_year$1 && get_days_in_year ) || get_days_in_year$1;

  var require$$55 = ( get_hours$1 && get_hours ) || get_hours$1;

  var require$$58 = ( get_iso_weeks_in_year$1 && get_iso_weeks_in_year ) || get_iso_weeks_in_year$1;

  var require$$60 = ( get_milliseconds$1 && get_milliseconds ) || get_milliseconds$1;

  var require$$61 = ( get_minutes$1 && get_minutes ) || get_minutes$1;

  var require$$62 = ( get_month$1 && get_month ) || get_month$1;

  var require$$63 = ( get_overlapping_days_in_ranges$1 && get_overlapping_days_in_ranges ) || get_overlapping_days_in_ranges$1;

  var require$$65 = ( get_seconds$1 && get_seconds ) || get_seconds$1;

  var require$$66 = ( get_time$1 && get_time ) || get_time$1;

  var require$$67 = ( get_year$1 && get_year ) || get_year$1;

  var require$$68 = ( is_after$1 && is_after ) || is_after$1;

  var require$$69 = ( is_before$1 && is_before ) || is_before$1;

  var require$$71 = ( is_equal$1 && is_equal ) || is_equal$1;

  var require$$72 = ( is_first_day_of_month$1 && is_first_day_of_month ) || is_first_day_of_month$1;

  var require$$73 = ( is_friday$1 && is_friday ) || is_friday$1;

  var require$$74 = ( is_future$1 && is_future ) || is_future$1;

  var require$$75 = ( is_last_day_of_month$1 && is_last_day_of_month ) || is_last_day_of_month$1;

  var require$$77 = ( is_monday$1 && is_monday ) || is_monday$1;

  var require$$78 = ( is_past$1 && is_past ) || is_past$1;

  var require$$79 = ( is_same_day$1 && is_same_day ) || is_same_day$1;

  var require$$89 = ( is_saturday$1 && is_saturday ) || is_saturday$1;

  var require$$90 = ( is_sunday$1 && is_sunday ) || is_sunday$1;

  var require$$91 = ( is_this_hour$1 && is_this_hour ) || is_this_hour$1;

  var require$$92 = ( is_this_iso_week$1 && is_this_iso_week ) || is_this_iso_week$1;

  var require$$93 = ( is_this_iso_year$1 && is_this_iso_year ) || is_this_iso_year$1;

  var require$$94 = ( is_this_minute$1 && is_this_minute ) || is_this_minute$1;

  var require$$95 = ( is_this_month$1 && is_this_month ) || is_this_month$1;

  var require$$96 = ( is_this_quarter$1 && is_this_quarter ) || is_this_quarter$1;

  var require$$97 = ( is_this_second$1 && is_this_second ) || is_this_second$1;

  var require$$98 = ( is_this_week$1 && is_this_week ) || is_this_week$1;

  var require$$99 = ( is_this_year$1 && is_this_year ) || is_this_year$1;

  var require$$100 = ( is_thursday$1 && is_thursday ) || is_thursday$1;

  var require$$101 = ( is_today$1 && is_today ) || is_today$1;

  var require$$102 = ( is_tomorrow$1 && is_tomorrow ) || is_tomorrow$1;

  var require$$103 = ( is_tuesday$1 && is_tuesday ) || is_tuesday$1;

  var require$$105 = ( is_wednesday$1 && is_wednesday ) || is_wednesday$1;

  var require$$106 = ( is_weekend$1 && is_weekend ) || is_weekend$1;

  var require$$107 = ( is_within_range$1 && is_within_range ) || is_within_range$1;

  var require$$108 = ( is_yesterday$1 && is_yesterday ) || is_yesterday$1;

  var require$$109 = ( last_day_of_iso_week$1 && last_day_of_iso_week ) || last_day_of_iso_week$1;

  var require$$110 = ( last_day_of_iso_year$1 && last_day_of_iso_year ) || last_day_of_iso_year$1;

  var require$$111 = ( last_day_of_month$1 && last_day_of_month ) || last_day_of_month$1;

  var require$$112 = ( last_day_of_quarter$1 && last_day_of_quarter ) || last_day_of_quarter$1;

  var require$$114 = ( last_day_of_year$1 && last_day_of_year ) || last_day_of_year$1;

  var require$$115 = ( max$1 && max_1 ) || max$1;

  var require$$116 = ( min$1 && min_1 ) || min$1;

  var require$$118 = ( set_date$1 && set_date ) || set_date$1;

  var require$$119 = ( set_day$1 && set_day ) || set_day$1;

  var require$$120 = ( set_day_of_year$1 && set_day_of_year ) || set_day_of_year$1;

  var require$$121 = ( set_hours$1 && set_hours ) || set_hours$1;

  var require$$122 = ( set_iso_day$1 && set_iso_day ) || set_iso_day$1;

  var require$$123 = ( set_iso_week$1 && set_iso_week ) || set_iso_week$1;

  var require$$125 = ( set_milliseconds$1 && set_milliseconds ) || set_milliseconds$1;

  var require$$126 = ( set_minutes$1 && set_minutes ) || set_minutes$1;

  var require$$128 = ( set_quarter$1 && set_quarter ) || set_quarter$1;

  var require$$129 = ( set_seconds$1 && set_seconds ) || set_seconds$1;

  var require$$130 = ( set_year$1 && set_year ) || set_year$1;

  var require$$136 = ( start_of_month$1 && start_of_month ) || start_of_month$1;

  var require$$139 = ( start_of_today$1 && start_of_today ) || start_of_today$1;

  var require$$140 = ( start_of_tomorrow$1 && start_of_tomorrow ) || start_of_tomorrow$1;

  var require$$143 = ( start_of_yesterday$1 && start_of_yesterday ) || start_of_yesterday$1;

  var require$$144 = ( sub_days$1 && sub_days ) || sub_days$1;

  var require$$145 = ( sub_hours$1 && sub_hours ) || sub_hours$1;

  var require$$147 = ( sub_milliseconds$1 && sub_milliseconds ) || sub_milliseconds$1;

  var require$$148 = ( sub_minutes$1 && sub_minutes ) || sub_minutes$1;

  var require$$149 = ( sub_months$1 && sub_months ) || sub_months$1;

  var require$$150 = ( sub_quarters$1 && sub_quarters ) || sub_quarters$1;

  var require$$151 = ( sub_seconds$1 && sub_seconds ) || sub_seconds$1;

  var require$$152 = ( sub_weeks$1 && sub_weeks ) || sub_weeks$1;

  var require$$153 = ( sub_years$1 && sub_years ) || sub_years$1;

  var dateFns = {
    addDays: addDays$1,
    addHours: addHours$1,
    addISOYears: addISOYears$1,
    addMilliseconds: addMilliseconds$1,
    addMinutes: addMinutes$1,
    addMonths: addMonths$1,
    addQuarters: addQuarters$1,
    addSeconds: addSeconds$1,
    addWeeks: addWeeks$1,
    addYears: addYears$1,
    areRangesOverlapping: require$$10,
    closestIndexTo: require$$11,
    closestTo: require$$12,
    compareAsc: compareAsc$1,
    compareDesc: compareDesc$1,
    differenceInCalendarDays: differenceInCalendarDays$1,
    differenceInCalendarISOWeeks: require$$16,
    differenceInCalendarISOYears: differenceInCalendarISOYears$1,
    differenceInCalendarMonths: differenceInCalendarMonths$1,
    differenceInCalendarQuarters: require$$19,
    differenceInCalendarWeeks: require$$20,
    differenceInCalendarYears: differenceInCalendarYears$1,
    differenceInDays: differenceInDays$1,
    differenceInHours: require$$23,
    differenceInISOYears: require$$24,
    differenceInMilliseconds: differenceInMilliseconds$1,
    differenceInMinutes: require$$26,
    differenceInMonths: differenceInMonths$1,
    differenceInQuarters: require$$28,
    differenceInSeconds: differenceInSeconds$1,
    differenceInWeeks: require$$30,
    differenceInYears: require$$31,
    distanceInWords: distanceInWords$1,
    distanceInWordsStrict: require$$33,
    distanceInWordsToNow: require$$34,
    eachDay: require$$35,
    endOfDay: endOfDay$1,
    endOfHour: require$$37,
    endOfISOWeek: require$$38,
    endOfISOYear: require$$39,
    endOfMinute: require$$40,
    endOfMonth: endOfMonth$1,
    endOfQuarter: require$$42,
    endOfSecond: require$$43,
    endOfToday: require$$44,
    endOfTomorrow: require$$45,
    endOfWeek: endOfWeek$1,
    endOfYear: require$$47,
    endOfYesterday: require$$48,
    format: require$$49,
    getDate: require$$50,
    getDay: require$$51,
    getDayOfYear: getDayOfYear$1,
    getDaysInMonth: getDaysInMonth$1,
    getDaysInYear: require$$54,
    getHours: require$$55,
    getISODay: getISODay$1,
    getISOWeek: getISOWeek$1,
    getISOWeeksInYear: require$$58,
    getISOYear: getISOYear$1,
    getMilliseconds: require$$60,
    getMinutes: require$$61,
    getMonth: require$$62,
    getOverlappingDaysInRanges: require$$63,
    getQuarter: getQuarter$1,
    getSeconds: require$$65,
    getTime: require$$66,
    getYear: require$$67,
    isAfter: require$$68,
    isBefore: require$$69,
    isDate: isDate$1,
    isEqual: require$$71,
    isFirstDayOfMonth: require$$72,
    isFriday: require$$73,
    isFuture: require$$74,
    isLastDayOfMonth: require$$75,
    isLeapYear: isLeapYear$1,
    isMonday: require$$77,
    isPast: require$$78,
    isSameDay: require$$79,
    isSameHour: isSameHour$1,
    isSameISOWeek: isSameISOWeek$1,
    isSameISOYear: isSameISOYear$1,
    isSameMinute: isSameMinute$1,
    isSameMonth: isSameMonth$1,
    isSameQuarter: isSameQuarter$1,
    isSameSecond: isSameSecond$1,
    isSameWeek: isSameWeek$1,
    isSameYear: isSameYear$1,
    isSaturday: require$$89,
    isSunday: require$$90,
    isThisHour: require$$91,
    isThisISOWeek: require$$92,
    isThisISOYear: require$$93,
    isThisMinute: require$$94,
    isThisMonth: require$$95,
    isThisQuarter: require$$96,
    isThisSecond: require$$97,
    isThisWeek: require$$98,
    isThisYear: require$$99,
    isThursday: require$$100,
    isToday: require$$101,
    isTomorrow: require$$102,
    isTuesday: require$$103,
    isValid: isValid$1,
    isWednesday: require$$105,
    isWeekend: require$$106,
    isWithinRange: require$$107,
    isYesterday: require$$108,
    lastDayOfISOWeek: require$$109,
    lastDayOfISOYear: require$$110,
    lastDayOfMonth: require$$111,
    lastDayOfQuarter: require$$112,
    lastDayOfWeek: lastDayOfWeek$1,
    lastDayOfYear: require$$114,
    max: require$$115,
    min: require$$116,
    parse: parse$2,
    setDate: require$$118,
    setDay: require$$119,
    setDayOfYear: require$$120,
    setHours: require$$121,
    setISODay: require$$122,
    setISOWeek: require$$123,
    setISOYear: setISOYear$1,
    setMilliseconds: require$$125,
    setMinutes: require$$126,
    setMonth: setMonth$1,
    setQuarter: require$$128,
    setSeconds: require$$129,
    setYear: require$$130,
    startOfDay: startOfDay$1,
    startOfHour: startOfHour$1,
    startOfISOWeek: startOfISOWeek$1,
    startOfISOYear: startOfISOYear$1,
    startOfMinute: startOfMinute$1,
    startOfMonth: require$$136,
    startOfQuarter: startOfQuarter$1,
    startOfSecond: startOfSecond$1,
    startOfToday: require$$139,
    startOfTomorrow: require$$140,
    startOfWeek: startOfWeek$1,
    startOfYear: startOfYear$1,
    startOfYesterday: require$$143,
    subDays: require$$144,
    subHours: require$$145,
    subISOYears: subISOYears$1,
    subMilliseconds: require$$147,
    subMinutes: require$$148,
    subMonths: require$$149,
    subQuarters: require$$150,
    subSeconds: require$$151,
    subWeeks: require$$152,
    subYears: require$$153
  };
  var dateFns_6 = dateFns.addMonths;
  var dateFns_16 = dateFns.differenceInCalendarDays;
  var dateFns_19 = dateFns.differenceInCalendarMonths;
  var dateFns_50 = dateFns.format;
  var dateFns_69 = dateFns.isAfter;
  var dateFns_80 = dateFns.isSameDay;
  var dateFns_85 = dateFns.isSameMonth;
  var dateFns_150 = dateFns.subMonths;

  var ChevronLeftIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var ChevronLeftIcon = function ChevronLeftIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-chevron-left-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M15.41 16.58L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.42z" })
    );
  };

  exports.default = ChevronLeftIcon;
  });

  var ChevronLeftIcon = unwrapExports(ChevronLeftIcon_1);

  var ChevronRightIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var ChevronRightIcon = function ChevronRightIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-chevron-right-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M8.59 16.58L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.42z" })
    );
  };

  exports.default = ChevronRightIcon;
  });

  var ChevronRightIcon = unwrapExports(ChevronRightIcon_1);

  var ChevronDoubleLeftIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var ChevronDoubleLeftIcon = function ChevronDoubleLeftIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-chevron-double-left-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M18.41 7.41L17 6l-6 6 6 6 1.41-1.41L13.83 12l4.58-4.59m-6 0L11 6l-6 6 6 6 1.41-1.41L7.83 12l4.58-4.59z" })
    );
  };

  exports.default = ChevronDoubleLeftIcon;
  });

  var ChevronDoubleLeftIcon = unwrapExports(ChevronDoubleLeftIcon_1);

  var ChevronDoubleRightIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var ChevronDoubleRightIcon = function ChevronDoubleRightIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-chevron-double-right-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M5.59 7.41L7 6l6 6-6 6-1.41-1.41L10.17 12 5.59 7.41m6 0L13 6l6 6-6 6-1.41-1.41L16.17 12l-4.58-4.59z" })
    );
  };

  exports.default = ChevronDoubleRightIcon;
  });

  var ChevronDoubleRightIcon = unwrapExports(ChevronDoubleRightIcon_1);

  var DatePickerNavbar = function DatePickerNavbar(props) {
    var _cx, _cx2, _cx3, _cx4;

    var onPreviousClick = props.onPreviousClick,
        onMonthChange = props.onMonthChange,
        onNextClick = props.onNextClick,
        showNextButton = props.showNextButton,
        showPreviousButton = props.showPreviousButton,
        className = props.className,
        classNames = props.classNames,
        numberOfMonths = props.numberOfMonths,
        month = props.month,
        fromMonth = props.fromMonth,
        toMonth = props.toMonth;


    var handlePrevClick = function handlePrevClick() {
      return onPreviousClick();
    };
    var handleNextClick = function handleNextClick() {
      return onNextClick();
    };

    var handlePrevYearClick = function handlePrevYearClick() {
      if (!fromMonth) {
        var _newMonth = dateFns_150(month, 12);
        return onMonthChange(_newMonth);
      }
      var diff = Math.abs(dateFns_19(month, fromMonth));
      var newMonth = dateFns_150(month, !Number.isNaN(diff) && diff > 12 ? 12 : diff);
      return onMonthChange(newMonth);
    };

    var handleNextYearClick = function handleNextYearClick() {
      if (!toMonth) {
        var _newMonth2 = dateFns_6(month, 12);
        return onMonthChange(_newMonth2);
      }
      var diff = Math.abs(dateFns_19(toMonth, month));
      var newMonth = dateFns_6(month, !Number.isNaN(diff) && diff > 12 ? 12 : diff);

      if (numberOfMonths === 2 && dateFns_85(newMonth, toMonth)) {
        return onMonthChange(dateFns_150(newMonth, 1));
      }
      return onMonthChange(newMonth);
    };

    return React.createElement(
      'div',
      { className: className },
      React.createElement(
        'div',
        { style: { display: 'flex' } },
        React.createElement(
          'button',
          {
            className: classnames((_cx = {}, _cx[classNames.navButtonPrev] = true, _cx[classNames.navButtonInteractionDisabled] = !showPreviousButton, _cx)),
            onClick: handlePrevYearClick
          },
          React.createElement(ChevronDoubleLeftIcon, { width: '20px', height: '20px', fill: '#4384f5' })
        ),
        React.createElement(
          'button',
          {
            className: classnames((_cx2 = {}, _cx2[classNames.navButtonPrev] = true, _cx2[classNames.navButtonInteractionDisabled] = !showPreviousButton, _cx2)),
            onClick: handlePrevClick
          },
          React.createElement(ChevronLeftIcon, { width: '20px', height: '20px', fill: '#4384f5' })
        )
      ),
      React.createElement(
        'div',
        { style: { display: 'flex' } },
        React.createElement(
          'button',
          {
            className: classnames((_cx3 = {}, _cx3[classNames.navButtonNext] = true, _cx3[classNames.navButtonInteractionDisabled] = !showNextButton, _cx3)),
            onClick: handleNextClick
          },
          React.createElement(ChevronRightIcon, { width: '20px', height: '20px', fill: '#4384f5' })
        ),
        React.createElement(
          'button',
          {
            className: classnames((_cx4 = {}, _cx4[classNames.navButtonNext] = true, _cx4[classNames.navButtonInteractionDisabled] = !showNextButton, _cx4)),
            onClick: handleNextYearClick
          },
          React.createElement(ChevronDoubleRightIcon, { width: '20px', height: '20px', fill: '#4384f5' })
        )
      )
    );
  };

  DatePickerNavbar.propTypes = {
    className: propTypes_6,
    month: propTypes_12(Date),
    fromMonth: propTypes_12(Date),
    toMonth: propTypes_12(Date),
    showNextButton: propTypes_2,
    showPreviousButton: propTypes_2,
    classNames: propTypes_14(propTypes_6),
    numberOfMonths: propTypes_4,
    onPreviousClick: propTypes_3,
    onMonthChange: propTypes_3,
    onNextClick: propTypes_3
  };

  var baseClass$x = 'date-picker';
  var cx$t = bind.bind(styles$n);

  var DatePicker = function (_React$PureComponent) {
    inherits(DatePicker, _React$PureComponent);

    function DatePicker(props) {
      classCallCheck(this, DatePicker);

      var _this = possibleConstructorReturn(this, _React$PureComponent.call(this, props));

      _this.getDatePickerClassNames = function () {
        var _cx;

        return _extends({
          container: cx$t((_cx = {}, _cx[baseClass$x] = true, _cx[baseClass$x + '--range'] = _this.props.range, _cx)),
          wrapper: styles$n[baseClass$x + '__wrapper'],
          interactionDisabled: styles$n[baseClass$x + '--interaction-disabled'],
          months: styles$n[baseClass$x + '__months'],
          month: styles$n[baseClass$x + '__month'],
          navBar: styles$n[baseClass$x + '__nav-bar'],
          navButtonPrev: getMergedClassNames(styles$n[baseClass$x + '__nav-button'], styles$n[baseClass$x + '__nav-button--prev']),
          navButtonNext: getMergedClassNames(styles$n[baseClass$x + '__nav-button'], styles$n[baseClass$x + '__nav-button--next']),
          navButtonInteractionDisabled: styles$n[baseClass$x + '__nav-button--interaction-disabled'],
          caption: styles$n[baseClass$x + '__caption'],
          weekdays: styles$n[baseClass$x + '__weekdays'],
          weekdaysRow: styles$n[baseClass$x + '__weekdays-row'],
          weekday: styles$n[baseClass$x + '__weekday'],
          body: styles$n[baseClass$x + '__body'],
          week: styles$n[baseClass$x + '__week'],
          weekNumber: styles$n[baseClass$x + '__week-number'],
          day: styles$n[baseClass$x + '__day'],
          footer: styles$n[baseClass$x + '__footer'],
          todayButton: styles$n[baseClass$x + '__today-button'],
          today: styles$n[baseClass$x + '__day--today'],
          selected: styles$n[baseClass$x + '__day--selected'],
          disabled: styles$n[baseClass$x + '__day--disabled'],
          outside: styles$n[baseClass$x + '__day--outside'],
          start: styles$n[baseClass$x + '__day--start'],
          end: styles$n[baseClass$x + '__day--end']
        }, _this.props.classNames);
      };

      _this.handleMonthChange = function (month) {
        if (_this.props.onMonthChange && _this.props.month) {
          _this.props.onMonthChange(month);
          return;
        }

        _this.setState({
          month: month
        });
      };

      _this.renderDay = function (day) {
        var date = day.getDate();

        return React.createElement(
          'div',
          { className: styles$n[baseClass$x + '__day-wrapper'] },
          React.createElement(
            'div',
            { className: styles$n[baseClass$x + '__day-content'] },
            date
          )
        );
      };

      _this.state = {
        month: props.month || new Date()
      };
      return _this;
    }

    DatePicker.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      if (props.month && props.month !== state.month) {
        return {
          month: props.month
        };
      }

      return null;
    };

    DatePicker.prototype.render = function render() {
      var _props = this.props,
          className = _props.className,
          range = _props.range,
          toMonth = _props.toMonth,
          fromMonth = _props.fromMonth,
          firstDayOfWeek = _props.firstDayOfWeek,
          numberOfMonths = _props.numberOfMonths,
          navbarElement = _props.navbarElement,
          renderDay = _props.renderDay,
          classNames = _props.classNames,
          month = _props.month,
          restProps = objectWithoutProperties(_props, ['className', 'range', 'toMonth', 'fromMonth', 'firstDayOfWeek', 'numberOfMonths', 'navbarElement', 'renderDay', 'classNames', 'month']);


      var datePickerClassNames = this.getDatePickerClassNames();

      return React.createElement(DayPicker_1$1, _extends({
        navbarElement: navbarElement || React.createElement(DatePickerNavbar, {
          classNames: datePickerClassNames,
          numberOfMonths: numberOfMonths,
          onMonthChange: this.handleMonthChange,
          toMonth: toMonth,
          fromMonth: fromMonth
        }),
        ref: this.props.innerRef,
        classNames: datePickerClassNames,
        numberOfMonths: numberOfMonths,
        toMonth: toMonth,
        fromMonth: fromMonth,
        firstDayOfWeek: firstDayOfWeek || 1,
        month: this.state.month,
        renderDay: renderDay || this.renderDay
      }, restProps));
    };

    return DatePicker;
  }(React.PureComponent);

  var DatePicker$1 = React.forwardRef(function (props, ref) {
    return React.createElement(DatePicker, _extends({ innerRef: ref }, props));
  });

  var baseClass$y = 'date-picker--range';

  var DatePickerRangeSelectInputs = function DatePickerRangeSelectInputs(props) {
    var fromDate = props.fromDate,
        toDate = props.toDate,
        from = props.from,
        to = props.to,
        restProps = objectWithoutProperties(props, ['fromDate', 'toDate', 'from', 'to']);


    return React.createElement(
      'div',
      restProps,
      React.createElement(Input, _extends({}, from, {
        className: getMergedClassNames(styles$n[baseClass$y + '__select-input'], from.className),
        tabIndex: 0,
        size: from.size || 10,
        placeholder: from.placeholder || 'YYYY-MM-DD',
        onClick: callAll(function (e) {
          return e.stopPropagation();
        }, from.onClose)
      })),
      React.createElement(
        'span',
        null,
        ' \u2014 '
      ),
      React.createElement(Input, _extends({}, to, {
        className: getMergedClassNames(styles$n[baseClass$y + '__select-input'], to.className),
        size: to.size || 10,
        tabIndex: fromDate === undefined ? -1 : 0,
        disabled: to.disabled || fromDate === undefined,
        placeholder: to.placeholder || 'YYYY-MM-DD',
        onClick: callAll(function (e) {
          return e.stopPropagation();
        }, to.onClose)
      }))
    );
  };

  DatePickerRangeSelectInputs.propTypes = {
    from: propTypes_17({
      value: propTypes_6.isRequired,
      placeholder: propTypes_6,
      onChange: propTypes_3.isRequired,
      size: propTypes_4
    }).isRequired,
    to: propTypes_17({
      value: propTypes_6.isRequired,
      placeholder: propTypes_6,
      onChange: propTypes_3.isRequired,
      size: propTypes_4
    }).isRequired
  };

  var baseClass$z = 'date-picker--range';

  var DatePickerRangeCalendarsWrapper = function DatePickerRangeCalendarsWrapper(props) {
    var className = props.className,
        children = props.children,
        restProps = objectWithoutProperties(props, ['className', 'children']);


    return React.createElement(
      'div',
      _extends({}, restProps, {
        className: getMergedClassNames(styles$n[baseClass$z + '__calendars-wrapper'], className)
      }),
      children
    );
  };

  DatePickerRangeCalendarsWrapper.propTypes = {
    children: propTypes_13,
    className: propTypes_6
  };

  var simpleIsEqual = function simpleIsEqual(a, b) {
    return a === b;
  };

  function index (resultFn, isEqual) {
    if (isEqual === void 0) {
      isEqual = simpleIsEqual;
    }

    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;

    var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {
      return isEqual(newArg, lastArgs[index], index);
    };

    var result = function result() {
      for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {
        newArgs[_key] = arguments[_key];
      }

      if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {
        return lastResult;
      }

      lastResult = resultFn.apply(this, newArgs);
      calledOnce = true;
      lastThis = this;
      lastArgs = newArgs;
      return lastResult;
    };

    return result;
  }

  /* eslint-disable no-useless-escape */

  /**
   * Helper for checking if input value has format YYYY-MM-DD
   * @param {string} value
   * @returns {boolean}
   */
  var isValidDateFormat = function isValidDateFormat(value) {
    if (value.match(/^(?:(19|20)[0-9]{2})[\-](0[1-9]|1[012])[\-](0[1-9]|[12][0-9]|3[01])$/)) {
      return true;
    }
    return false;
  };
  /* eslint-enable no-useless-escape */

  var isDateWithinRange = function isDateWithinRange(date, range) {
    var from = range.from,
        to = range.to;

    if (to && !dateFns_80(date, to) && dateFns_69(date, to)) {
      return false;
    }
    if (from && !dateFns_80(date, from) && !dateFns_69(date, from)) {
      return false;
    }
    return true;
  };

  var RangeDatePicker = function (_React$Component) {
    inherits(RangeDatePicker, _React$Component);

    function RangeDatePicker(props) {
      classCallCheck(this, RangeDatePicker);

      var _this = possibleConstructorReturn(this, _React$Component.call(this, props));

      _initialiseProps$2.call(_this);

      _this.initialState = {
        selectedItem: null,
        fromInputValue: '',
        toInputValue: '',
        from: undefined,
        to: undefined,
        error: null,
        enteredTo: undefined,
        currentMonth: props.initialToDate ? _this.calculateDatepickerMonth(props.initialToDate, props.initialFromDate && !dateFns_85(props.initialFromDate, props.initialToDate)) : dateFns_150(props.toMonth, 1)
      };

      var initialStateFromProps = _this.getStateFromInitialPropsValues(props);

      _this.state = _extends({}, _this.initialState, initialStateFromProps);
      return _this;
    }

    RangeDatePicker.prototype.render = function render() {
      return this.props.children(this.getRangeDatePickerApi());
    };

    return RangeDatePicker;
  }(React.Component);

  var _initialiseProps$2 = function _initialiseProps() {
    var _this2 = this;

    this.getStateFromInitialPropsValues = function (props) {
      var state = {};

      if (props.initialSelectedItemKey) {
        var selectedItem = _this2.getSelectedOption(props.options, props.initialSelectedItemKey);

        if (!selectedItem) {
          return {};
        }

        state.selectedItem = props.initialSelectedItemKey;

        if (!selectedItem.isManual) {
          return state;
        }

        if (props.initialFromDate) {
          state.from = props.initialFromDate;
          state.fromInputValue = _this2.mapDateToInputValue(props.initialFromDate);
        }
        if (props.initialToDate) {
          state.to = props.initialToDate;
          state.enteredTo = props.initialToDate;
          state.toInputValue = _this2.mapDateToInputValue(props.initialToDate);
        }
      }
      return state;
    };

    this.getSelectedOption = index(function (options, itemId) {
      return options.find(function (item) {
        return item.id === itemId;
      });
    });
    this.getModifiers = index(function (from, enteredTo) {
      var _base;

      var base = (_base = {}, _base[styles$n['date-picker__day--monday']] = { daysOfWeek: [1] }, _base[styles$n['date-picker__day--sunday']] = { daysOfWeek: [0] }, _base[styles$n['date-picker__day--start']] = from, _base[styles$n['date-picker__day--end']] = from, _base);

      if (enteredTo) {
        var _babelHelpers$extends3;

        var diff = dateFns_16(enteredTo, from);
        if (diff > 0) {
          var _babelHelpers$extends;

          return _extends({}, base, (_babelHelpers$extends = {}, _babelHelpers$extends[styles$n['date-picker__day--end']] = enteredTo, _babelHelpers$extends));
        } else if (diff < 0) {
          var _babelHelpers$extends2;

          return _extends({}, base, (_babelHelpers$extends2 = {}, _babelHelpers$extends2[styles$n['date-picker__day--start']] = enteredTo, _babelHelpers$extends2));
        }
        return _extends({}, base, (_babelHelpers$extends3 = {}, _babelHelpers$extends3[styles$n['date-picker__day--start']] = [from, enteredTo], _babelHelpers$extends3[styles$n['date-picker__day--end']] = [from, enteredTo], _babelHelpers$extends3));
      }

      return base;
    });

    this.getRangeDatePickerApi = function () {
      var modifiers = _this2.getModifiers(_this2.state.from, _this2.state.enteredTo);

      var selectedOption = _this2.getSelectedOption(_this2.props.options, _this2.state.selectedItem);

      return {
        select: {
          onItemSelect: _this2.handleItemSelect,
          error: _this2.state.error,
          selected: _this2.state.selectedItem
        },
        inputs: {
          fromDate: _this2.state.from,
          toDate: _this2.state.to,
          from: {
            onKeyDown: _this2.handleFromInputKeyDown,
            onChange: _this2.handleDateFromChange,
            value: _this2.state.fromInputValue,
            ref: _this2.fromInputRef
          },
          to: {
            onKeyDown: _this2.handleToInputKeyDown,
            onChange: _this2.handleDateToChange,
            value: _this2.state.toInputValue,
            ref: _this2.toInputRef
          }
        },
        datepicker: {
          range: true,
          month: _this2.state.currentMonth,
          numberOfMonths: 2,
          onDayClick: _this2.handleDayClick,
          selectedDays: [_this2.state.from, { from: _this2.state.from, to: _this2.state.enteredTo }],
          modifiers: modifiers,
          initialMonth: _this2.state.from || dateFns_150(_this2.props.toMonth, 1),
          toMonth: _this2.props.toMonth,
          disabledDays: { after: _this2.props.toMonth },
          onDayMouseEnter: _this2.handleDayMouseEnter,
          onMonthChange: _this2.handleMonthChange
        },
        selectedOption: selectedOption
      };
    };

    this.mapDateToInputValue = function (date) {
      return dateFns_50(date, 'YYYY-MM-DD');
    };

    this.handleMonthChange = function (month) {
      _this2.setState({
        currentMonth: month
      });
    };

    this.handleDayClick = function (day) {
      var _state = _this2.state,
          from = _state.from,
          to = _state.to;

      if (!isDateWithinRange(day, { to: _this2.props.toMonth })) {
        return;
      }

      if (_this2.isSelectingFirstDay(from, to, day)) {
        _this2.handleSelectFirstDay(day);
      } else if (dateFns_80(day, _this2.state.from) || dateFns_69(day, _this2.state.from)) {
        _this2.handleSelectSecondDayAsFrom(day);
      } else {
        _this2.handleSelectSecondDayAsTo(day);
      }
    };

    this.handleSelectFirstDay = function (day) {
      _this2.setState({
        from: day,
        to: undefined,
        fromInputValue: _this2.mapDateToInputValue(day),
        toInputValue: '',
        enteredTo: undefined,
        error: null
      }, function () {
        if (_this2.toInputRef.current) {
          _this2.toInputRef.current.focus();
        }
      });
    };

    this.handleSelectSecondDayAsFrom = function (day) {
      _this2.setState({
        to: day,
        toInputValue: _this2.mapDateToInputValue(day),
        enteredTo: day,
        error: null
      }, function () {
        var selectedOption = _this2.getSelectedOption(_this2.props.options, _this2.state.selectedItem);

        _this2.props.onChange(_extends({}, selectedOption, {
          value: {
            from: _this2.state.from,
            to: _this2.state.to
          }
        }));
      });
    };

    this.handleSelectSecondDayAsTo = function (day) {
      _this2.setState({
        from: day,
        to: _this2.state.from,
        fromInputValue: _this2.mapDateToInputValue(day),
        toInputValue: _this2.state.fromInputValue,
        enteredTo: _this2.state.from,
        error: null
      }, function () {
        var selectedOption = _this2.getSelectedOption(_this2.props.options, _this2.state.selectedItem);

        _this2.props.onChange(_extends({}, selectedOption, {
          value: {
            from: _this2.state.from,
            to: _this2.state.to
          }
        }));
      });
    };

    this.handleItemSelect = function (itemKey) {
      if (itemKey === null) {
        _this2.setState(_extends({}, _this2.initialState), function () {
          _this2.props.onChange(null);
        });
      } else {
        var selectedOption = _this2.getSelectedOption(_this2.props.options, itemKey);

        if (!selectedOption) {
          return;
        }

        _this2.setState(_extends({}, _this2.initialState, {
          selectedItem: itemKey
        }), function () {
          if (!selectedOption.isManual) {
            var optionsHash = _this2.props.options.reduce(function (acc, option) {
              var _babelHelpers$extends4;

              return _extends({}, acc, (_babelHelpers$extends4 = {}, _babelHelpers$extends4[option.id] = option, _babelHelpers$extends4));
            }, {});
            _this2.props.onChange(optionsHash[itemKey]);
          } else {
            _this2.props.onChange(_extends({}, selectedOption, {
              value: {
                from: _this2.state.from,
                to: _this2.state.to
              }
            }));
          }
        });
      }
    };

    this.handleDateFromChange = function (e) {
      var value = e.target.value;


      var newState = {
        fromInputValue: value,
        error: null,
        from: undefined,
        to: undefined,
        toInputValue: '',
        enteredTo: undefined
      };

      if (!/^[0-9.-]*$/.test(value)) {
        return false;
      }

      if (!isValidDateFormat(value)) {
        return _this2.setState(_extends({}, newState, {
          error: 'Invalid date format'
        }));
      }

      if (!isDateWithinRange(new Date(value), { to: _this2.props.toMonth })) {
        return _this2.setState(_extends({}, newState, {
          error: 'The date can\'t be later than ' + dateFns_50(_this2.props.toMonth, 'YYYY-MM-DD')
        }));
      }

      if (_this2.state.to === undefined) {
        return _this2.setState(_extends({}, newState, {
          error: 'Please choose the end date',
          from: new Date(value),
          currentMonth: _this2.calculateDatepickerMonth(new Date(value))
        }));
      }

      return _this2.setState(_extends({}, newState, {
        from: new Date(value),
        currentMonth: _this2.calculateDatepickerMonth(new Date(value))
      }), function () {
        var selectedOption = _this2.getSelectedOption(_this2.props.options, _this2.state.selectedItem);
        _this2.props.onChange(_extends({}, selectedOption, {
          value: {
            from: _this2.state.from,
            to: _this2.state.to
          }
        }));
      });
    };

    this.handleDateToChange = function (e) {
      var value = e.target.value;


      var newState = {
        error: null,
        to: undefined,
        toInputValue: value,
        enteredTo: undefined
      };

      if (!/^[0-9.-]*$/.test(value)) {
        return false;
      }

      if (!isValidDateFormat(value)) {
        return _this2.setState(_extends({}, newState, {
          error: 'Invalid date format'
        }));
      }

      if (_this2.props.toMonth && !isDateWithinRange(new Date(value), {
        to: _this2.props.toMonth
      })) {
        return _this2.setState(_extends({}, newState, {
          error: 'The date can\'t be later than ' + dateFns_50(_this2.props.toMonth, 'YYYY-MM-DD')
        }));
      }

      if (!isDateWithinRange(new Date(value), {
        from: _this2.state.from
      })) {
        return _this2.setState(_extends({}, newState, {
          error: "The end date can't be before the start date"
        }));
      }

      if (_this2.state.from === undefined) {
        return _this2.setState(_extends({}, newState, {
          error: 'Please choose the start date',
          to: new Date(value),
          enteredTo: new Date(value),
          currentMonth: _this2.calculateDatepickerMonth(new Date(value), !dateFns_85(new Date(value), _this2.state.from))
        }));
      }

      return _this2.setState(_extends({}, newState, {
        to: new Date(value),
        enteredTo: new Date(value),
        currentMonth: _this2.calculateDatepickerMonth(new Date(value), !dateFns_85(new Date(value), _this2.state.from))
      }), function () {
        var selectedOption = _this2.getSelectedOption(_this2.props.options, _this2.state.selectedItem);
        _this2.props.onChange(_extends({}, selectedOption, {
          value: {
            from: _this2.state.from,
            to: _this2.state.to
          }
        }));
      });
    };

    this.handleDayMouseEnter = function (day) {
      var _state2 = _this2.state,
          from = _state2.from,
          to = _state2.to;


      var isInRange = _this2.props.toMonth ? dateFns_16(_this2.props.toMonth, day) >= 0 : true;

      if (!_this2.isSelectingFirstDay(from, to, day) && isInRange) {
        _this2.setState({
          enteredTo: day
        });
      }
    };

    this.handleFromInputKeyDown = function (e) {
      if (e.keyCode === KeyCodes.enter) {
        e.stopPropagation();
        var isValid = _this2.state.from && isDateWithinRange(_this2.state.from, {
          to: _this2.props.toMonth
        });

        if (isValid && _this2.toInputRef.current) {
          _this2.toInputRef.current.focus();
        }
      }
    };

    this.handleToInputKeyDown = function (e) {
      if (e.keyCode === KeyCodes.enter) {
        e.stopPropagation();
        var isValid = _this2.state.to && isDateWithinRange(_this2.state.to, {
          from: _this2.state.from,
          to: _this2.props.toMonth
        });

        if (isValid && _this2.toInputRef.current) {
          _this2.toInputRef.current.blur();
        }
      }
    };

    this.isSelectingFirstDay = function (from, to) {
      var isRangeSelected = from && to;
      return !from || isRangeSelected;
    };

    this.calculateDatepickerMonth = function (date) {
      var forcePreviousMonth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (forcePreviousMonth || _this2.props.toMonth && dateFns_85(date, _this2.props.toMonth)) {
        return dateFns_150(date, 1);
      }
      return date;
    };

    this.toInputRef = React.createRef();
    this.fromInputRef = React.createRef();
  };

  RangeDatePicker.propTypes = {
    onChange: propTypes_3,
    children: propTypes_3,
    options: propTypes_9(propTypes_17({
      label: propTypes_6.isRequired,
      id: propTypes_6.isRequired,
      isManual: propTypes_2,
      value: propTypes_17({
        from: propTypes_12(Date),
        to: propTypes_12(Date)
      })
    })).isRequired,
    initialSelectedItemKey: propTypes_6,
    initialFromDate: propTypes_12(Date),
    initialToDate: propTypes_12(Date),
    toMonth: propTypes_12(Date)
  };

  RangeDatePicker.defaultProps = {
    toMonth: new Date()
  };

  var styles$o = { "switch": "lc-switch", "switch__track--enabled": "lc-switch__track--enabled", "switch__track--disabled": "lc-switch__track--disabled", "switch--basic": "lc-switch--basic", "switch--compact": "lc-switch--compact", "switch__input": "lc-switch__input", "switch__container": "lc-switch__container", "switch__track": "lc-switch__track", "switch__slider": "lc-switch__slider", "switch__slider--basic": "lc-switch__slider--basic", "switch__slider--basic--enabled": "lc-switch__slider--basic--enabled", "switch__slider--basic--disabled": "lc-switch__slider--basic--disabled", "switch__slider--compact": "lc-switch__slider--compact", "switch__slider--compact--enabled": "lc-switch__slider--compact--enabled", "switch__slider--compact--disabled": "lc-switch__slider--compact--disabled" };

  var acceptedSizes$1 = ['basic', 'compact'];
  var baseClass$A = 'switch';
  var cx$u = bind.bind(styles$o);
  var noop$3 = function noop() {};

  var SwitchComponent = function (_React$PureComponent) {
    inherits(SwitchComponent, _React$PureComponent);

    function SwitchComponent() {
      var _temp, _this, _ret;

      classCallCheck(this, SwitchComponent);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.state = {
        enabled: _this.isControlledByProps() ? _this.props.on : _this.props.defaultOn,
        prevPropsOn: _this.props.on // eslint-disable-line react/no-unused-state
      }, _this.handleChange = function (e) {
        var hasCb = _this.props.onChange !== noop$3;
        if (hasCb) {
          _this.props.onChange(e, _this.state.enabled);
          return;
        }
        e.stopPropagation();
        _this.setState(function (prevState) {
          return {
            enabled: !prevState.enabled
          };
        });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    SwitchComponent.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      if (props.on !== state.prevPropsOn) {
        return {
          enabled: props.on,
          prevPropsOn: props.on
        };
      }
      return null;
    };

    SwitchComponent.prototype.isControlledByProps = function isControlledByProps() {
      return this.props.on !== undefined;
    };

    SwitchComponent.prototype.render = function render() {
      var _cx;

      var _props = this.props,
          className = _props.className,
          defaultOn = _props.defaultOn,
          onChange = _props.onChange,
          innerRef = _props.innerRef,
          on = _props.on,
          size = _props.size,
          name = _props.name,
          restProps = objectWithoutProperties(_props, ['className', 'defaultOn', 'onChange', 'innerRef', 'on', 'size', 'name']);
      var enabled = this.state.enabled;

      var mergedClassNames = getMergedClassNames(cx$u((_cx = {}, _cx[baseClass$A] = true, _cx[baseClass$A + '--' + size] = acceptedSizes$1.some(function (s) {
        return s === size;
      }), _cx)), className);
      var valueStyles = enabled ? 'enabled' : 'disabled';

      return React.createElement(
        'span',
        { className: mergedClassNames },
        React.createElement('input', _extends({
          type: 'checkbox',
          className: styles$o[baseClass$A + '__input'],
          onChange: this.handleChange,
          checked: enabled,
          name: name,
          ref: innerRef
        }, restProps)),
        React.createElement(
          'span',
          { className: styles$o[baseClass$A + '__container'] },
          React.createElement('span', {
            className: bind(styles$o[baseClass$A + '__track'], styles$o[baseClass$A + '__track--' + valueStyles])
          }),
          React.createElement('span', {
            className: bind(styles$o[baseClass$A + '__slider'], styles$o[baseClass$A + '__slider--' + size], styles$o[baseClass$A + '__slider--' + size + '--' + valueStyles])
          })
        )
      );
    };

    return SwitchComponent;
  }(React.PureComponent);

  var basePropTypes = {
    className: propTypes_6,
    defaultOn: propTypes_2,
    /**
     * HTML disabled property
     */
    disabled: propTypes_2,
    name: propTypes_6,
    on: propTypes_2,
    onChange: propTypes_3,
    size: propTypes_15(acceptedSizes$1)
  };

  /* eslint-disable react/default-props-match-prop-types */
  var baseDefaultProps = {
    defaultOn: false,
    onChange: noop$3,
    size: 'basic',
    name: baseClass$A
  };

  SwitchComponent.propTypes = _extends({}, basePropTypes, {
    innerRef: propTypes_12(typeof Element === 'undefined' ? function () {} : Element)
  });

  SwitchComponent.defaultProps = baseDefaultProps;

  var Switch = React.forwardRef(function (props, ref) {
    return React.createElement(SwitchComponent, _extends({ innerRef: ref }, props));
  });

  Switch.propTypes = basePropTypes;

  Switch.defaultProps = baseDefaultProps;

  var styles$p = { "inapp-base": "lc-inapp-base", "inapp-base__overlay": "lc-inapp-base__overlay", "inapp-base__overlay--visible": "lc-inapp-base__overlay--visible", "inapp-base__container": "lc-inapp-base__container", "inapp-base__wrapper": "lc-inapp-base__wrapper", "inapp-base__with_footer": "lc-inapp-base__with_footer", "inapp__body": "lc-inapp__body", "inapp-base__content-container": "lc-inapp-base__content-container", "inapp-base__close": "lc-inapp-base__close", "inapp__header": "lc-inapp__header", "inapp__header__avatar": "lc-inapp__header__avatar", "inapp__heading": "lc-inapp__heading", "inapp__image": "lc-inapp__image", "inapp__footer": "lc-inapp__footer", "inapp__footer__single_button": "lc-inapp__footer__single_button" };

  var baseClass$B = 'inapp__header__avatar';

  var InAppMessageAvatar = function InAppMessageAvatar(props) {
    var alt = props.alt,
        restProps = objectWithoutProperties(props, ['alt']);

    return React.createElement('img', _extends({
      className: styles$p['' + baseClass$B],
      alt: alt || 'Avatar'
    }, restProps));
  };

  InAppMessageAvatar.propTypes = {
    src: propTypes_6.isRequired,
    alt: propTypes_6.isRequired
  };

  var baseClass$C = 'inapp-base__close';

  var InAppMessageCloseButton = function InAppMessageCloseButton(props) {
    return React.createElement(
      'div',
      { className: styles$p['' + baseClass$C] },
      React.createElement(
        'button',
        { title: 'Close', onClick: props.onClick },
        React.createElement(CloseIcon, { width: '24px', height: '24px', fill: '#424D57' })
      )
    );
  };

  InAppMessageCloseButton.propTypes = {
    onClick: propTypes_3.isRequired
  };

  var baseClass$D = 'inapp';

  var InAppMessageHeader = React.forwardRef(function (props, ref) {
    var className = props.className,
        avatarProps = props.avatar,
        text = props.text,
        onCloseButtonClick = props.onCloseButtonClick;


    var mergedClassNames = getMergedClassNames(styles$p[baseClass$D + '__header'], className);

    return React.createElement(
      'div',
      { className: mergedClassNames, ref: ref },
      avatarProps && React.createElement(InAppMessageAvatar, avatarProps),
      text && React.createElement(
        'div',
        { className: styles$p[baseClass$D + '__heading'] },
        text
      ),
      React.createElement(InAppMessageCloseButton, { onClick: onCloseButtonClick })
    );
  });

  InAppMessageHeader.propTypes = {
    className: propTypes_6,
    avatar: propTypes_17(_extends({}, InAppMessageAvatar.propTypes)),
    text: propTypes_13,
    onCloseButtonClick: propTypes_3.isRequired
  };

  var baseClass$E = 'inapp__footer';

  var InAppMessageFooter = function InAppMessageFooter(props) {
    var mergedClassNames = getMergedClassNames(styles$p['' + baseClass$E], !props.buttons.remind ? styles$p[baseClass$E + '__single_button'] : null, props.className);

    var RemindButton = function RemindButton() {
      return null;
    };

    if (props.buttons.remind) {
      var _props$buttons$remind = props.buttons.remind,
          remindChildren = _props$buttons$remind.children,
          remindProps = objectWithoutProperties(_props$buttons$remind, ['children']);

      RemindButton = function RemindButton() {
        return React.createElement(
          Button,
          _extends({ secondary: true, fullWidth: true }, remindProps),
          remindChildren
        );
      };
    }
    var _props$buttons$cta = props.buttons.cta,
        ctaChildren = _props$buttons$cta.children,
        ctaProps = objectWithoutProperties(_props$buttons$cta, ['children']);


    return React.createElement(
      'div',
      { className: mergedClassNames },
      React.createElement(RemindButton, null),
      React.createElement(
        Button,
        _extends({ fullWidth: true, primary: true }, ctaProps),
        ctaChildren
      )
    );
  };

  InAppMessageFooter.propTypes = {
    className: propTypes_6,
    buttons: propTypes_17({
      cta: propTypes_17(_extends({}, Button.propTypes.isRequired)).isRequired,
      remind: propTypes_17(_extends({}, Button.propTypes))
    })
  };

  var baseClass$F = 'inapp-base';

  var cx$v = bind.bind(styles$p);

  var InAppMessageBase = function (_React$PureComponent) {
    inherits(InAppMessageBase, _React$PureComponent);

    function InAppMessageBase() {
      var _temp, _this, _ret;

      classCallCheck(this, InAppMessageBase);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.onOverlayClick = function (event) {
        if (event.target === event.currentTarget) {
          _this.handleCloseInAppMessage();
        }
      }, _this.onCloseButtonClick = function (event) {
        event.preventDefault();
        event.stopPropagation();
        _this.handleCloseInAppMessage();
      }, _this.onKeyUp = function (event) {
        if (event.key && event.key === KeyNames.esc || event.keyCode && event.keyCode === KeyCodes.esc) {
          _this.handleCloseInAppMessage();
        }
      }, _this.addEventListeners = function () {
        if (_this.props.closeOnEscPress) {
          document.addEventListener('keyup', _this.onKeyUp, true);
        }
        document.addEventListener('click', _this.onDocumentClick);
      }, _this.removeEventListeners = function () {
        document.removeEventListener('keyup', _this.onKeyUp, true);
        document.removeEventListener('click', _this.onDocumentClick);
      }, _this.handleCloseInAppMessage = function () {
        _this.props.onClose();
      }, _this.inAppMessageContentRef = React.createRef(), _temp), possibleConstructorReturn(_this, _ret);
    }

    InAppMessageBase.prototype.componentDidMount = function componentDidMount() {
      this.addEventListeners();
    };

    InAppMessageBase.prototype.componentWillUnmount = function componentWillUnmount() {
      this.removeEventListeners();
    };

    InAppMessageBase.prototype.render = function render() {
      var _cx;

      var _props = this.props,
          className = _props.className,
          children = _props.children,
          header = _props.header,
          footerButtons = _props.footerButtons,
          title = _props.title,
          onClose = _props.onClose,
          closeOnEscPress = _props.closeOnEscPress,
          restProps = objectWithoutProperties(_props, ['className', 'children', 'header', 'footerButtons', 'title', 'onClose', 'closeOnEscPress']);


      var mergedClassNames = getMergedClassNames(styles$p['' + baseClass$F], className);

      return React.createElement(
        'div',
        {
          className: cx$v(baseClass$F + '__overlay', baseClass$F + '__overlay--visible'),
          onMouseDown: this.onOverlayClick
        },
        React.createElement(
          'div',
          { className: cx$v(baseClass$F + '__container') },
          React.createElement(
            'div',
            {
              ref: this.inAppMessageContentRef,
              className: cx$v(baseClass$F + '__wrapper')
            },
            React.createElement(InAppMessageHeader, {
              avatar: header && header.avatar ? header.avatar : undefined,
              text: header && header.text ? header.text : undefined,
              onCloseButtonClick: this.onCloseButtonClick
            }),
            React.createElement(
              'div',
              _extends({
                className: cx$v((_cx = {}, _cx[mergedClassNames] = true, _cx[baseClass$F + '__with_footer'] = footerButtons, _cx))
              }, restProps),
              React.createElement(
                'div',
                { className: cx$v(baseClass$F + '__content-container') },
                children
              ),
              footerButtons && React.createElement(InAppMessageFooter, { buttons: footerButtons })
            )
          )
        )
      );
    };

    return InAppMessageBase;
  }(React.PureComponent);

  InAppMessageBase.defaultProps = {
    closeOnEscPress: true
  };


  InAppMessageBase.propTypes = {
    className: propTypes_6,
    children: propTypes_13,
    header: propTypes_17({
      avatar: InAppMessageHeader.propTypes.avatar,
      text: InAppMessageHeader.propTypes.text
    }),
    onClose: InAppMessageHeader.propTypes.onCloseButtonClick,
    closeOnEscPress: propTypes_2,
    footerButtons: InAppMessageFooter.propTypes.buttons
  };

  var InAppMessagePortal = function (_React$Component) {
    inherits(InAppMessagePortal, _React$Component);

    function InAppMessagePortal(props) {
      classCallCheck(this, InAppMessagePortal);

      var _this = possibleConstructorReturn(this, _React$Component.call(this, props));

      _this.inAppMessageContainer = document.createElement('div');
      if (_this.props.className) {
        _this.inAppMessageContainer.className = _this.props.className;
      }
      return _this;
    }

    InAppMessagePortal.prototype.componentDidMount = function componentDidMount() {
      var element = document.querySelector(this.props.parentElementName);
      if (element) element.appendChild(this.inAppMessageContainer);
    };

    InAppMessagePortal.prototype.componentWillUnmount = function componentWillUnmount() {
      var element = document.querySelector(this.props.parentElementName);
      if (element) element.removeChild(this.inAppMessageContainer);
    };

    InAppMessagePortal.prototype.render = function render() {
      return ReactDOM.createPortal(this.props.children, this.inAppMessageContainer);
    };

    return InAppMessagePortal;
  }(React.Component);

  InAppMessagePortal.defaultProps = {
    parentElementName: 'body'
  };


  InAppMessagePortal.propTypes = {
    className: propTypes_6,
    children: propTypes_13.isRequired,
    parentElementName: propTypes_6
  };

  var baseClass$G = 'inapp__image';

  var InAppMessageImage = function InAppMessageImage(props) {
    var alt = props.alt,
        restProps = objectWithoutProperties(props, ['alt']);

    return React.createElement(
      'div',
      { className: styles$p['' + baseClass$G] },
      React.createElement('img', _extends({ alt: alt || 'InAppMessage Image' }, restProps))
    );
  };

  InAppMessageImage.propTypes = {
    src: propTypes_6,
    alt: propTypes_6
  };

  var baseClass$H = 'inapp__body';

  var InAppMessageBody = function InAppMessageBody(props) {
    var className = props.className,
        children = props.children,
        restProps = objectWithoutProperties(props, ['className', 'children']);

    var mergedClassNames = getMergedClassNames(styles$p['' + baseClass$H], className);

    return React.createElement(
      'div',
      _extends({}, restProps, { className: mergedClassNames }),
      children
    );
  };

  InAppMessageBody.propTypes = {
    className: propTypes_6,
    children: propTypes_13
  };

  var baseClass$I = 'inapp';

  var InAppMessage = function InAppMessage(props) {
    var imageProps = props.image,
        children = props.children,
        className = props.className,
        restProps = objectWithoutProperties(props, ['image', 'children', 'className']);


    var mergedClassNames = getMergedClassNames(styles$p['' + baseClass$I], className);

    return React.createElement(
      InAppMessageBase,
      _extends({ className: mergedClassNames }, restProps),
      imageProps && React.createElement(InAppMessageImage, imageProps),
      React.createElement(
        InAppMessageBody,
        null,
        children
      )
    );
  };

  InAppMessage.propTypes = _extends({}, InAppMessageBase.propTypes, {
    image: propTypes_17(_extends({}, InAppMessageImage.propTypes))
  });

  var styles$q = { "badge": "lc-badge", "badge--secondary": "lc-badge--secondary" };

  function Badge(_ref) {
    var _babelHelpers$extends, _ref2;

    var children = _ref.children,
        extraClassName = _ref.className,
        secondary = _ref.secondary,
        props = objectWithoutProperties(_ref, ['children', 'className', 'secondary']);

    var className = classnames(styles$q.badge, _extends((_babelHelpers$extends = {}, _babelHelpers$extends[styles$q['badge--secondary']] = secondary, _babelHelpers$extends), extraClassName ? (_ref2 = {}, _ref2[extraClassName] = true, _ref2) : {}));

    return React.createElement(
      'span',
      _extends({ className: className }, props),
      children
    );
  }

  Badge.propTypes = {
    children: propTypes_13.isRequired,
    secondary: propTypes_2
  };

  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose$1;

  var _extends_1 = createCommonjsModule(function (module) {
  function _extends() {
    module.exports = _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  module.exports = _extends;
  });

  function _inheritsLoose$1(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  var inheritsLoose = _inheritsLoose$1;

  function _assertThisInitialized$1(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  var assertThisInitialized = _assertThisInitialized$1;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var defineProperty$1 = _defineProperty;

  var toStr = Object.prototype.toString;

  var isArguments = function isArguments(value) {
  	var str = toStr.call(value);
  	var isArgs = str === '[object Arguments]';
  	if (!isArgs) {
  		isArgs = str !== '[object Array]' &&
  			value !== null &&
  			typeof value === 'object' &&
  			typeof value.length === 'number' &&
  			value.length >= 0 &&
  			toStr.call(value.callee) === '[object Function]';
  	}
  	return isArgs;
  };

  var isArguments$1 = /*#__PURE__*/Object.freeze({
    default: isArguments,
    __moduleExports: isArguments
  });

  var require$$0$2 = ( isArguments$1 && isArguments ) || isArguments$1;

  var keysShim;
  if (!Object.keys) {
  	// modified from https://github.com/es-shims/es5-shim
  	var has$2 = Object.prototype.hasOwnProperty;
  	var toStr$1 = Object.prototype.toString;
  	var isArgs = require$$0$2; // eslint-disable-line global-require
  	var isEnumerable = Object.prototype.propertyIsEnumerable;
  	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
  	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
  	var dontEnums = [
  		'toString',
  		'toLocaleString',
  		'valueOf',
  		'hasOwnProperty',
  		'isPrototypeOf',
  		'propertyIsEnumerable',
  		'constructor'
  	];
  	var equalsConstructorPrototype = function (o) {
  		var ctor = o.constructor;
  		return ctor && ctor.prototype === o;
  	};
  	var excludedKeys = {
  		$applicationCache: true,
  		$console: true,
  		$external: true,
  		$frame: true,
  		$frameElement: true,
  		$frames: true,
  		$innerHeight: true,
  		$innerWidth: true,
  		$onmozfullscreenchange: true,
  		$onmozfullscreenerror: true,
  		$outerHeight: true,
  		$outerWidth: true,
  		$pageXOffset: true,
  		$pageYOffset: true,
  		$parent: true,
  		$scrollLeft: true,
  		$scrollTop: true,
  		$scrollX: true,
  		$scrollY: true,
  		$self: true,
  		$webkitIndexedDB: true,
  		$webkitStorageInfo: true,
  		$window: true
  	};
  	var hasAutomationEqualityBug = (function () {
  		/* global window */
  		if (typeof window === 'undefined') { return false; }
  		for (var k in window) {
  			try {
  				if (!excludedKeys['$' + k] && has$2.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
  					try {
  						equalsConstructorPrototype(window[k]);
  					} catch (e) {
  						return true;
  					}
  				}
  			} catch (e) {
  				return true;
  			}
  		}
  		return false;
  	}());
  	var equalsConstructorPrototypeIfNotBuggy = function (o) {
  		/* global window */
  		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
  			return equalsConstructorPrototype(o);
  		}
  		try {
  			return equalsConstructorPrototype(o);
  		} catch (e) {
  			return false;
  		}
  	};

  	keysShim = function keys(object) {
  		var isObject = object !== null && typeof object === 'object';
  		var isFunction = toStr$1.call(object) === '[object Function]';
  		var isArguments = isArgs(object);
  		var isString = isObject && toStr$1.call(object) === '[object String]';
  		var theKeys = [];

  		if (!isObject && !isFunction && !isArguments) {
  			throw new TypeError('Object.keys called on a non-object');
  		}

  		var skipProto = hasProtoEnumBug && isFunction;
  		if (isString && object.length > 0 && !has$2.call(object, 0)) {
  			for (var i = 0; i < object.length; ++i) {
  				theKeys.push(String(i));
  			}
  		}

  		if (isArguments && object.length > 0) {
  			for (var j = 0; j < object.length; ++j) {
  				theKeys.push(String(j));
  			}
  		} else {
  			for (var name in object) {
  				if (!(skipProto && name === 'prototype') && has$2.call(object, name)) {
  					theKeys.push(String(name));
  				}
  			}
  		}

  		if (hasDontEnumBug) {
  			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

  			for (var k = 0; k < dontEnums.length; ++k) {
  				if (!(skipConstructor && dontEnums[k] === 'constructor') && has$2.call(object, dontEnums[k])) {
  					theKeys.push(dontEnums[k]);
  				}
  			}
  		}
  		return theKeys;
  	};
  }
  var implementation = keysShim;

  var implementation$1 = /*#__PURE__*/Object.freeze({
    default: implementation,
    __moduleExports: implementation
  });

  var require$$0$3 = ( implementation$1 && implementation ) || implementation$1;

  var slice = Array.prototype.slice;


  var origKeys = Object.keys;
  var keysShim$1 = origKeys ? function keys(o) { return origKeys(o); } : require$$0$3;

  var originalKeys = Object.keys;

  keysShim$1.shim = function shimObjectKeys() {
  	if (Object.keys) {
  		var keysWorksWithArguments = (function () {
  			// Safari 5.0 bug
  			var args = Object.keys(arguments);
  			return args && args.length === arguments.length;
  		}(1, 2));
  		if (!keysWorksWithArguments) {
  			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
  				if (require$$0$2(object)) {
  					return originalKeys(slice.call(object));
  				}
  				return originalKeys(object);
  			};
  		}
  	} else {
  		Object.keys = keysShim$1;
  	}
  	return Object.keys || keysShim$1;
  };

  var objectKeys = keysShim$1;

  var objectKeys$1 = /*#__PURE__*/Object.freeze({
    default: objectKeys,
    __moduleExports: objectKeys
  });

  /* eslint complexity: [2, 18], max-statements: [2, 33] */
  var shams = function hasSymbols() {
  	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
  	if (typeof Symbol.iterator === 'symbol') { return true; }

  	var obj = {};
  	var sym = Symbol('test');
  	var symObj = Object(sym);
  	if (typeof sym === 'string') { return false; }

  	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
  	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

  	// temp disabled per https://github.com/ljharb/object.assign/issues/17
  	// if (sym instanceof Symbol) { return false; }
  	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
  	// if (!(symObj instanceof Symbol)) { return false; }

  	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
  	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

  	var symVal = 42;
  	obj[sym] = symVal;
  	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax
  	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

  	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

  	var syms = Object.getOwnPropertySymbols(obj);
  	if (syms.length !== 1 || syms[0] !== sym) { return false; }

  	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

  	if (typeof Object.getOwnPropertyDescriptor === 'function') {
  		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
  		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
  	}

  	return true;
  };

  var shams$1 = /*#__PURE__*/Object.freeze({
    default: shams,
    __moduleExports: shams
  });

  var hasSymbolSham = ( shams$1 && shams ) || shams$1;

  var origSymbol = commonjsGlobal.Symbol;


  var hasSymbols = function hasNativeSymbols() {
  	if (typeof origSymbol !== 'function') { return false; }
  	if (typeof Symbol !== 'function') { return false; }
  	if (typeof origSymbol('foo') !== 'symbol') { return false; }
  	if (typeof Symbol('bar') !== 'symbol') { return false; }

  	return hasSymbolSham();
  };

  var hasSymbols$1 = /*#__PURE__*/Object.freeze({
    default: hasSymbols,
    __moduleExports: hasSymbols
  });

  /* eslint no-invalid-this: 1 */

  var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
  var slice$1 = Array.prototype.slice;
  var toStr$2 = Object.prototype.toString;
  var funcType = '[object Function]';

  var implementation$2 = function bind(that) {
      var target = this;
      if (typeof target !== 'function' || toStr$2.call(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice$1.call(arguments, 1);

      var bound;
      var binder = function () {
          if (this instanceof bound) {
              var result = target.apply(
                  this,
                  args.concat(slice$1.call(arguments))
              );
              if (Object(result) === result) {
                  return result;
              }
              return this;
          } else {
              return target.apply(
                  that,
                  args.concat(slice$1.call(arguments))
              );
          }
      };

      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
          boundArgs.push('$' + i);
      }

      bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

      if (target.prototype) {
          var Empty = function Empty() {};
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
      }

      return bound;
  };

  var implementation$3 = /*#__PURE__*/Object.freeze({
    default: implementation$2,
    __moduleExports: implementation$2
  });

  var implementation$4 = ( implementation$3 && implementation$2 ) || implementation$3;

  var functionBind = Function.prototype.bind || implementation$4;

  var functionBind$1 = /*#__PURE__*/Object.freeze({
    default: functionBind,
    __moduleExports: functionBind
  });

  var bind$1 = ( functionBind$1 && functionBind ) || functionBind$1;

  var src = bind$1.call(Function.call, Object.prototype.hasOwnProperty);

  var src$1 = /*#__PURE__*/Object.freeze({
    default: src,
    __moduleExports: src
  });

  var require$$0$4 = ( hasSymbols$1 && hasSymbols ) || hasSymbols$1;

  var hasOwn$1 = ( src$1 && src ) || src$1;

  var undefined$1;

  var $SyntaxError = SyntaxError;
  var $Function = Function;
  var $TypeError = TypeError;

  // eslint-disable-next-line consistent-return
  var getEvalledConstructor = function (expressionSyntax) {
  	try {
  		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
  	} catch (e) {}
  };

  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
  	try {
  		$gOPD({}, '');
  	} catch (e) {
  		$gOPD = null; // this is IE 8, which has a broken gOPD
  	}
  }

  var throwTypeError = function () {
  	throw new $TypeError();
  };
  var ThrowTypeError = $gOPD
  	? (function () {
  		try {
  			return throwTypeError;
  		} catch (calleeThrows) {
  			try {
  				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
  				return $gOPD(arguments, 'callee').get;
  			} catch (gOPDthrows) {
  				return throwTypeError;
  			}
  		}
  	}())
  	: throwTypeError;

  var hasSymbols$2 = require$$0$4();

  var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

  var needsEval = {};

  var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

  var INTRINSICS = {
  	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
  	'%Array%': Array,
  	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
  	'%ArrayIteratorPrototype%': hasSymbols$2 ? getProto([][Symbol.iterator]()) : undefined$1,
  	'%AsyncFromSyncIteratorPrototype%': undefined$1,
  	'%AsyncFunction%': needsEval,
  	'%AsyncGenerator%': needsEval,
  	'%AsyncGeneratorFunction%': needsEval,
  	'%AsyncIteratorPrototype%': needsEval,
  	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
  	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
  	'%Boolean%': Boolean,
  	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
  	'%Date%': Date,
  	'%decodeURI%': decodeURI,
  	'%decodeURIComponent%': decodeURIComponent,
  	'%encodeURI%': encodeURI,
  	'%encodeURIComponent%': encodeURIComponent,
  	'%Error%': Error,
  	'%eval%': eval, // eslint-disable-line no-eval
  	'%EvalError%': EvalError,
  	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
  	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
  	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
  	'%Function%': $Function,
  	'%GeneratorFunction%': needsEval,
  	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
  	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
  	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
  	'%isFinite%': isFinite,
  	'%isNaN%': isNaN,
  	'%IteratorPrototype%': hasSymbols$2 ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
  	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
  	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
  	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
  	'%Math%': Math,
  	'%Number%': Number,
  	'%Object%': Object,
  	'%parseFloat%': parseFloat,
  	'%parseInt%': parseInt,
  	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
  	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
  	'%RangeError%': RangeError,
  	'%ReferenceError%': ReferenceError,
  	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
  	'%RegExp%': RegExp,
  	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
  	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
  	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
  	'%String%': String,
  	'%StringIteratorPrototype%': hasSymbols$2 ? getProto(''[Symbol.iterator]()) : undefined$1,
  	'%Symbol%': hasSymbols$2 ? Symbol : undefined$1,
  	'%SyntaxError%': $SyntaxError,
  	'%ThrowTypeError%': ThrowTypeError,
  	'%TypedArray%': TypedArray,
  	'%TypeError%': $TypeError,
  	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
  	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
  	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
  	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
  	'%URIError%': URIError,
  	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
  	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
  	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
  };

  var doEval = function doEval(name) {
  	var value;
  	if (name === '%AsyncFunction%') {
  		value = getEvalledConstructor('async function () {}');
  	} else if (name === '%GeneratorFunction%') {
  		value = getEvalledConstructor('function* () {}');
  	} else if (name === '%AsyncGeneratorFunction%') {
  		value = getEvalledConstructor('async function* () {}');
  	} else if (name === '%AsyncGenerator%') {
  		var fn = doEval('%AsyncGeneratorFunction%');
  		if (fn) {
  			value = fn.prototype;
  		}
  	} else if (name === '%AsyncIteratorPrototype%') {
  		var gen = doEval('%AsyncGenerator%');
  		if (gen) {
  			value = getProto(gen.prototype);
  		}
  	}

  	INTRINSICS[name] = value;

  	return value;
  };

  var LEGACY_ALIASES = {
  	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
  	'%ArrayPrototype%': ['Array', 'prototype'],
  	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
  	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
  	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
  	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
  	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
  	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
  	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
  	'%BooleanPrototype%': ['Boolean', 'prototype'],
  	'%DataViewPrototype%': ['DataView', 'prototype'],
  	'%DatePrototype%': ['Date', 'prototype'],
  	'%ErrorPrototype%': ['Error', 'prototype'],
  	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
  	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
  	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
  	'%FunctionPrototype%': ['Function', 'prototype'],
  	'%Generator%': ['GeneratorFunction', 'prototype'],
  	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
  	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
  	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
  	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
  	'%JSONParse%': ['JSON', 'parse'],
  	'%JSONStringify%': ['JSON', 'stringify'],
  	'%MapPrototype%': ['Map', 'prototype'],
  	'%NumberPrototype%': ['Number', 'prototype'],
  	'%ObjectPrototype%': ['Object', 'prototype'],
  	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
  	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
  	'%PromisePrototype%': ['Promise', 'prototype'],
  	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
  	'%Promise_all%': ['Promise', 'all'],
  	'%Promise_reject%': ['Promise', 'reject'],
  	'%Promise_resolve%': ['Promise', 'resolve'],
  	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
  	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
  	'%RegExpPrototype%': ['RegExp', 'prototype'],
  	'%SetPrototype%': ['Set', 'prototype'],
  	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
  	'%StringPrototype%': ['String', 'prototype'],
  	'%SymbolPrototype%': ['Symbol', 'prototype'],
  	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
  	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
  	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
  	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
  	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
  	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
  	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
  	'%URIErrorPrototype%': ['URIError', 'prototype'],
  	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
  	'%WeakSetPrototype%': ['WeakSet', 'prototype']
  };



  var $concat = bind$1.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind$1.call(Function.apply, Array.prototype.splice);
  var $replace = bind$1.call(Function.call, String.prototype.replace);
  var $strSlice = bind$1.call(Function.call, String.prototype.slice);

  /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
  var stringToPath = function stringToPath(string) {
  	var first = $strSlice(string, 0, 1);
  	var last = $strSlice(string, -1);
  	if (first === '%' && last !== '%') {
  		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
  	} else if (last === '%' && first !== '%') {
  		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
  	}
  	var result = [];
  	$replace(string, rePropName, function (match, number, quote, subString) {
  		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
  	});
  	return result;
  };
  /* end adaptation */

  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
  	var intrinsicName = name;
  	var alias;
  	if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
  		alias = LEGACY_ALIASES[intrinsicName];
  		intrinsicName = '%' + alias[0] + '%';
  	}

  	if (hasOwn$1(INTRINSICS, intrinsicName)) {
  		var value = INTRINSICS[intrinsicName];
  		if (value === needsEval) {
  			value = doEval(intrinsicName);
  		}
  		if (typeof value === 'undefined' && !allowMissing) {
  			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
  		}

  		return {
  			alias: alias,
  			name: intrinsicName,
  			value: value
  		};
  	}

  	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
  };

  var getIntrinsic = function GetIntrinsic(name, allowMissing) {
  	if (typeof name !== 'string' || name.length === 0) {
  		throw new $TypeError('intrinsic name must be a non-empty string');
  	}
  	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
  		throw new $TypeError('"allowMissing" argument must be a boolean');
  	}

  	var parts = stringToPath(name);
  	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

  	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
  	var intrinsicRealName = intrinsic.name;
  	var value = intrinsic.value;
  	var skipFurtherCaching = false;

  	var alias = intrinsic.alias;
  	if (alias) {
  		intrinsicBaseName = alias[0];
  		$spliceApply(parts, $concat([0, 1], alias));
  	}

  	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
  		var part = parts[i];
  		var first = $strSlice(part, 0, 1);
  		var last = $strSlice(part, -1);
  		if (
  			(
  				(first === '"' || first === "'" || first === '`')
  				|| (last === '"' || last === "'" || last === '`')
  			)
  			&& first !== last
  		) {
  			throw new $SyntaxError('property names with quotes must have matching quotes');
  		}
  		if (part === 'constructor' || !isOwn) {
  			skipFurtherCaching = true;
  		}

  		intrinsicBaseName += '.' + part;
  		intrinsicRealName = '%' + intrinsicBaseName + '%';

  		if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
  			value = INTRINSICS[intrinsicRealName];
  		} else if (value != null) {
  			if (!(part in value)) {
  				if (!allowMissing) {
  					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
  				}
  				return void undefined$1;
  			}
  			if ($gOPD && (i + 1) >= parts.length) {
  				var desc = $gOPD(value, part);
  				isOwn = !!desc;

  				// By convention, when a data property is converted to an accessor
  				// property to emulate a data property that does not suffer from
  				// the override mistake, that accessor's getter is marked with
  				// an `originalValue` property. Here, when we detect this, we
  				// uphold the illusion by pretending to see that original data
  				// property, i.e., returning the value rather than the getter
  				// itself.
  				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
  					value = desc.get;
  				} else {
  					value = value[part];
  				}
  			} else {
  				isOwn = hasOwn$1(value, part);
  				value = value[part];
  			}

  			if (isOwn && !skipFurtherCaching) {
  				INTRINSICS[intrinsicRealName] = value;
  			}
  		}
  	}
  	return value;
  };

  var getIntrinsic$1 = /*#__PURE__*/Object.freeze({
    default: getIntrinsic,
    __moduleExports: getIntrinsic
  });

  var GetIntrinsic = ( getIntrinsic$1 && getIntrinsic ) || getIntrinsic$1;

  var callBind = createCommonjsModule(function (module) {




  var $apply = GetIntrinsic('%Function.prototype.apply%');
  var $call = GetIntrinsic('%Function.prototype.call%');
  var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind$1.call($call, $apply);

  var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
  var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
  var $max = GetIntrinsic('%Math.max%');

  if ($defineProperty) {
  	try {
  		$defineProperty({}, 'a', { value: 1 });
  	} catch (e) {
  		// IE 8 has a broken defineProperty
  		$defineProperty = null;
  	}
  }

  module.exports = function callBind(originalFunction) {
  	var func = $reflectApply(bind$1, $call, arguments);
  	if ($gOPD && $defineProperty) {
  		var desc = $gOPD(func, 'length');
  		if (desc.configurable) {
  			// original length, plus the receiver, minus any additional arguments (after the receiver)
  			$defineProperty(
  				func,
  				'length',
  				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
  			);
  		}
  	}
  	return func;
  };

  var applyBind = function applyBind() {
  	return $reflectApply(bind$1, $apply, arguments);
  };

  if ($defineProperty) {
  	$defineProperty(module.exports, 'apply', { value: applyBind });
  } else {
  	module.exports.apply = applyBind;
  }
  });
  var callBind_1 = callBind.apply;

  var callBind$1 = /*#__PURE__*/Object.freeze({
    default: callBind,
    __moduleExports: callBind,
    apply: callBind_1
  });

  var callBind$2 = ( callBind$1 && callBind ) || callBind$1;

  var $indexOf = callBind$2(GetIntrinsic('String.prototype.indexOf'));

  var callBound = function callBoundIntrinsic(name, allowMissing) {
  	var intrinsic = GetIntrinsic(name, !!allowMissing);
  	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
  		return callBind$2(intrinsic);
  	}
  	return intrinsic;
  };

  var callBound$1 = /*#__PURE__*/Object.freeze({
    default: callBound,
    __moduleExports: callBound
  });

  var callBound$2 = ( callBound$1 && callBound ) || callBound$1;

  var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';


  var $toString = callBound$2('Object.prototype.toString');

  var isStandardArguments = function isArguments(value) {
  	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
  		return false;
  	}
  	return $toString(value) === '[object Arguments]';
  };

  var isLegacyArguments = function isArguments(value) {
  	if (isStandardArguments(value)) {
  		return true;
  	}
  	return value !== null &&
  		typeof value === 'object' &&
  		typeof value.length === 'number' &&
  		value.length >= 0 &&
  		$toString(value) !== '[object Array]' &&
  		$toString(value.callee) === '[object Function]';
  };

  var supportsStandardArguments = (function () {
  	return isStandardArguments(arguments);
  }());

  isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

  var isArguments$2 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

  var isArguments$3 = /*#__PURE__*/Object.freeze({
    default: isArguments$2,
    __moduleExports: isArguments$2
  });

  /* https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.is */

  var NumberIsNaN = function (value) {
  	return value !== value;
  };

  var objectIs = function is(a, b) {
  	if (a === 0 && b === 0) {
  		return 1 / a === 1 / b;
  	} else if (a === b) {
  		return true;
  	} else if (NumberIsNaN(a) && NumberIsNaN(b)) {
  		return true;
  	}
  	return false;
  };

  var objectIs$1 = /*#__PURE__*/Object.freeze({
    default: objectIs,
    __moduleExports: objectIs
  });

  var regexExec = RegExp.prototype.exec;
  var gOPD = Object.getOwnPropertyDescriptor;

  var tryRegexExecCall = function tryRegexExec(value) {
  	try {
  		var lastIndex = value.lastIndex;
  		value.lastIndex = 0;

  		regexExec.call(value);
  		return true;
  	} catch (e) {
  		return false;
  	} finally {
  		value.lastIndex = lastIndex;
  	}
  };
  var toStr$3 = Object.prototype.toString;
  var regexClass = '[object RegExp]';
  var hasToStringTag$1 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

  var isRegex = function isRegex(value) {
  	if (!value || typeof value !== 'object') {
  		return false;
  	}
  	if (!hasToStringTag$1) {
  		return toStr$3.call(value) === regexClass;
  	}

  	var descriptor = gOPD(value, 'lastIndex');
  	var hasLastIndexDataProperty = descriptor && hasOwn$1(descriptor, 'value');
  	if (!hasLastIndexDataProperty) {
  		return false;
  	}

  	return tryRegexExecCall(value);
  };

  var isRegex$1 = /*#__PURE__*/Object.freeze({
    default: isRegex,
    __moduleExports: isRegex
  });

  var keys$3 = ( objectKeys$1 && objectKeys ) || objectKeys$1;

  var hasSymbols$3 = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

  var toStr$4 = Object.prototype.toString;
  var concat = Array.prototype.concat;
  var origDefineProperty = Object.defineProperty;

  var isFunction = function (fn) {
  	return typeof fn === 'function' && toStr$4.call(fn) === '[object Function]';
  };

  var arePropertyDescriptorsSupported = function () {
  	var obj = {};
  	try {
  		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
  		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
  		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
  			return false;
  		}
  		return obj.x === obj;
  	} catch (e) { /* this is IE 8. */
  		return false;
  	}
  };
  var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

  var defineProperty$2 = function (object, name, value, predicate) {
  	if (name in object && (!isFunction(predicate) || !predicate())) {
  		return;
  	}
  	if (supportsDescriptors) {
  		origDefineProperty(object, name, {
  			configurable: true,
  			enumerable: false,
  			value: value,
  			writable: true
  		});
  	} else {
  		object[name] = value;
  	}
  };

  var defineProperties = function (object, map) {
  	var predicates = arguments.length > 2 ? arguments[2] : {};
  	var props = keys$3(map);
  	if (hasSymbols$3) {
  		props = concat.call(props, Object.getOwnPropertySymbols(map));
  	}
  	for (var i = 0; i < props.length; i += 1) {
  		defineProperty$2(object, props[i], map[props[i]], predicates[props[i]]);
  	}
  };

  defineProperties.supportsDescriptors = !!supportsDescriptors;

  var defineProperties_1 = defineProperties;

  var defineProperties$1 = /*#__PURE__*/Object.freeze({
    default: defineProperties_1,
    __moduleExports: defineProperties_1
  });

  var $Object = Object;
  var $TypeError$1 = TypeError;

  var implementation$5 = function flags() {
  	if (this != null && this !== $Object(this)) {
  		throw new $TypeError$1('RegExp.prototype.flags getter called on non-object');
  	}
  	var result = '';
  	if (this.global) {
  		result += 'g';
  	}
  	if (this.ignoreCase) {
  		result += 'i';
  	}
  	if (this.multiline) {
  		result += 'm';
  	}
  	if (this.dotAll) {
  		result += 's';
  	}
  	if (this.unicode) {
  		result += 'u';
  	}
  	if (this.sticky) {
  		result += 'y';
  	}
  	return result;
  };

  var implementation$6 = /*#__PURE__*/Object.freeze({
    default: implementation$5,
    __moduleExports: implementation$5
  });

  var implementation$7 = ( implementation$6 && implementation$5 ) || implementation$6;

  var require$$0$5 = ( defineProperties$1 && defineProperties_1 ) || defineProperties$1;

  var supportsDescriptors$1 = require$$0$5.supportsDescriptors;
  var $gOPD$1 = Object.getOwnPropertyDescriptor;
  var $TypeError$2 = TypeError;

  var polyfill = function getPolyfill() {
  	if (!supportsDescriptors$1) {
  		throw new $TypeError$2('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
  	}
  	if ((/a/mig).flags === 'gim') {
  		var descriptor = $gOPD$1(RegExp.prototype, 'flags');
  		if (descriptor && typeof descriptor.get === 'function' && typeof (/a/).dotAll === 'boolean') {
  			return descriptor.get;
  		}
  	}
  	return implementation$7;
  };

  var polyfill$1 = /*#__PURE__*/Object.freeze({
    default: polyfill,
    __moduleExports: polyfill
  });

  var getPolyfill = ( polyfill$1 && polyfill ) || polyfill$1;

  var supportsDescriptors$2 = require$$0$5.supportsDescriptors;

  var gOPD$1 = Object.getOwnPropertyDescriptor;
  var defineProperty$3 = Object.defineProperty;
  var TypeErr = TypeError;
  var getProto$1 = Object.getPrototypeOf;
  var regex = /a/;

  var shim = function shimFlags() {
  	if (!supportsDescriptors$2 || !getProto$1) {
  		throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
  	}
  	var polyfill = getPolyfill();
  	var proto = getProto$1(regex);
  	var descriptor = gOPD$1(proto, 'flags');
  	if (!descriptor || descriptor.get !== polyfill) {
  		defineProperty$3(proto, 'flags', {
  			configurable: true,
  			enumerable: false,
  			get: polyfill
  		});
  	}
  	return polyfill;
  };

  var shim$1 = /*#__PURE__*/Object.freeze({
    default: shim,
    __moduleExports: shim
  });

  var shim$2 = ( shim$1 && shim ) || shim$1;

  var flagsBound = callBind$2(implementation$7);

  require$$0$5(flagsBound, {
  	getPolyfill: getPolyfill,
  	implementation: implementation$7,
  	shim: shim$2
  });

  var regexp_prototype_flags = flagsBound;

  var regexp_prototype_flags$1 = /*#__PURE__*/Object.freeze({
    default: regexp_prototype_flags,
    __moduleExports: regexp_prototype_flags
  });

  var getDay$1 = Date.prototype.getDay;
  var tryDateObject = function tryDateObject(value) {
  	try {
  		getDay$1.call(value);
  		return true;
  	} catch (e) {
  		return false;
  	}
  };

  var toStr$5 = Object.prototype.toString;
  var dateClass = '[object Date]';
  var hasToStringTag$2 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

  var isDateObject = function isDateObject(value) {
  	if (typeof value !== 'object' || value === null) { return false; }
  	return hasToStringTag$2 ? tryDateObject(value) : toStr$5.call(value) === dateClass;
  };

  var isDateObject$1 = /*#__PURE__*/Object.freeze({
    default: isDateObject,
    __moduleExports: isDateObject
  });

  var isArguments$4 = ( isArguments$3 && isArguments$2 ) || isArguments$3;

  var is$1 = ( objectIs$1 && objectIs ) || objectIs$1;

  var isRegex$2 = ( isRegex$1 && isRegex ) || isRegex$1;

  var flags = ( regexp_prototype_flags$1 && regexp_prototype_flags ) || regexp_prototype_flags$1;

  var isDate$2 = ( isDateObject$1 && isDateObject ) || isDateObject$1;

  var getTime$1 = Date.prototype.getTime;

  function deepEqual(actual, expected, options) {
    var opts = options || {};

    // 7.1. All identical values are equivalent, as determined by ===.
    if (opts.strict ? is$1(actual, expected) : actual === expected) {
      return true;
    }

    // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.
    if (!actual || !expected || (typeof actual !== 'object' && typeof expected !== 'object')) {
      return opts.strict ? is$1(actual, expected) : actual == expected;
    }

    /*
     * 7.4. For all other Object pairs, including Array objects, equivalence is
     * determined by having the same number of owned properties (as verified
     * with Object.prototype.hasOwnProperty.call), the same set of keys
     * (although not necessarily the same order), equivalent values for every
     * corresponding key, and an identical 'prototype' property. Note: this
     * accounts for both named and indexed properties on Arrays.
     */
    // eslint-disable-next-line no-use-before-define
    return objEquiv(actual, expected, opts);
  }

  function isUndefinedOrNull(value) {
    return value === null || value === undefined;
  }

  function isBuffer(x) {
    if (!x || typeof x !== 'object' || typeof x.length !== 'number') {
      return false;
    }
    if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
      return false;
    }
    if (x.length > 0 && typeof x[0] !== 'number') {
      return false;
    }
    return true;
  }

  function objEquiv(a, b, opts) {
    /* eslint max-statements: [2, 50] */
    var i, key;
    if (typeof a !== typeof b) { return false; }
    if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) { return false; }

    // an identical 'prototype' property.
    if (a.prototype !== b.prototype) { return false; }

    if (isArguments$4(a) !== isArguments$4(b)) { return false; }

    var aIsRegex = isRegex$2(a);
    var bIsRegex = isRegex$2(b);
    if (aIsRegex !== bIsRegex) { return false; }
    if (aIsRegex || bIsRegex) {
      return a.source === b.source && flags(a) === flags(b);
    }

    if (isDate$2(a) && isDate$2(b)) {
      return getTime$1.call(a) === getTime$1.call(b);
    }

    var aIsBuffer = isBuffer(a);
    var bIsBuffer = isBuffer(b);
    if (aIsBuffer !== bIsBuffer) { return false; }
    if (aIsBuffer || bIsBuffer) { // && would work too, because both are true or both false here
      if (a.length !== b.length) { return false; }
      for (i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) { return false; }
      }
      return true;
    }

    if (typeof a !== typeof b) { return false; }

    try {
      var ka = keys$3(a);
      var kb = keys$3(b);
    } catch (e) { // happens when one is a string literal and the other isn't
      return false;
    }
    // having the same number of owned properties (keys incorporates hasOwnProperty)
    if (ka.length !== kb.length) { return false; }

    // the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    // ~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i]) { return false; }
    }
    // equivalent values for every corresponding key, and ~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!deepEqual(a[key], b[key], opts)) { return false; }
    }

    return true;
  }

  var deepEqual_1 = deepEqual;

  /**!
   * @fileOverview Kickass library to create and place poppers near their reference elements.
   * @version 1.16.0
   * @license
   * Copyright (c) 2016 Federico Zivolo and contributors
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */
  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

  var timeoutDuration = function () {
    var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
      if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
        return 1;
      }
    }
    return 0;
  }();

  function microtaskDebounce(fn) {
    var called = false;
    return function () {
      if (called) {
        return;
      }
      called = true;
      window.Promise.resolve().then(function () {
        called = false;
        fn();
      });
    };
  }

  function taskDebounce(fn) {
    var scheduled = false;
    return function () {
      if (!scheduled) {
        scheduled = true;
        setTimeout(function () {
          scheduled = false;
          fn();
        }, timeoutDuration);
      }
    };
  }

  var supportsMicroTasks = isBrowser && window.Promise;

  /**
  * Create a debounced version of a method, that's asynchronously deferred
  * but called in the minimum time possible.
  *
  * @method
  * @memberof Popper.Utils
  * @argument {Function} fn
  * @returns {Function}
  */
  var debounce$1 = supportsMicroTasks ? microtaskDebounce : taskDebounce;

  /**
   * Check if the given variable is a function
   * @method
   * @memberof Popper.Utils
   * @argument {Any} functionToCheck - variable to check
   * @returns {Boolean} answer to: is a function?
   */
  function isFunction$1(functionToCheck) {
    var getType = {};
    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
  }

  /**
   * Get CSS computed property of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Eement} element
   * @argument {String} property
   */
  function getStyleComputedProperty(element, property) {
    if (element.nodeType !== 1) {
      return [];
    }
    // NOTE: 1 DOM access here
    var window = element.ownerDocument.defaultView;
    var css = window.getComputedStyle(element, null);
    return property ? css[property] : css;
  }

  /**
   * Returns the parentNode or the host of the element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} parent
   */
  function getParentNode(element) {
    if (element.nodeName === 'HTML') {
      return element;
    }
    return element.parentNode || element.host;
  }

  /**
   * Returns the scrolling parent of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} scroll parent
   */
  function getScrollParent(element) {
    // Return body, `getScroll` will take care to get the correct `scrollTop` from it
    if (!element) {
      return document.body;
    }

    switch (element.nodeName) {
      case 'HTML':
      case 'BODY':
        return element.ownerDocument.body;
      case '#document':
        return element.body;
    }

    // Firefox want us to check `-x` and `-y` variations as well

    var _getStyleComputedProp = getStyleComputedProperty(element),
        overflow = _getStyleComputedProp.overflow,
        overflowX = _getStyleComputedProp.overflowX,
        overflowY = _getStyleComputedProp.overflowY;

    if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
      return element;
    }

    return getScrollParent(getParentNode(element));
  }

  /**
   * Returns the reference node of the reference object, or the reference object itself.
   * @method
   * @memberof Popper.Utils
   * @param {Element|Object} reference - the reference element (the popper will be relative to this)
   * @returns {Element} parent
   */
  function getReferenceNode(reference) {
    return reference && reference.referenceNode ? reference.referenceNode : reference;
  }

  var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
  var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

  /**
   * Determines if the browser is Internet Explorer
   * @method
   * @memberof Popper.Utils
   * @param {Number} version to check
   * @returns {Boolean} isIE
   */
  function isIE(version) {
    if (version === 11) {
      return isIE11;
    }
    if (version === 10) {
      return isIE10;
    }
    return isIE11 || isIE10;
  }

  /**
   * Returns the offset parent of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} offset parent
   */
  function getOffsetParent(element) {
    if (!element) {
      return document.documentElement;
    }

    var noOffsetParent = isIE(10) ? document.body : null;

    // NOTE: 1 DOM access here
    var offsetParent = element.offsetParent || null;
    // Skip hidden elements which don't have an offsetParent
    while (offsetParent === noOffsetParent && element.nextElementSibling) {
      offsetParent = (element = element.nextElementSibling).offsetParent;
    }

    var nodeName = offsetParent && offsetParent.nodeName;

    if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
      return element ? element.ownerDocument.documentElement : document.documentElement;
    }

    // .offsetParent will return the closest TH, TD or TABLE in case
    // no offsetParent is present, I hate this job...
    if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
      return getOffsetParent(offsetParent);
    }

    return offsetParent;
  }

  function isOffsetContainer(element) {
    var nodeName = element.nodeName;

    if (nodeName === 'BODY') {
      return false;
    }
    return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
  }

  /**
   * Finds the root node (document, shadowDOM root) of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} node
   * @returns {Element} root node
   */
  function getRoot(node) {
    if (node.parentNode !== null) {
      return getRoot(node.parentNode);
    }

    return node;
  }

  /**
   * Finds the offset parent common to the two provided nodes
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element1
   * @argument {Element} element2
   * @returns {Element} common offset parent
   */
  function findCommonOffsetParent(element1, element2) {
    // This check is needed to avoid errors in case one of the elements isn't defined for any reason
    if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
      return document.documentElement;
    }

    // Here we make sure to give as "start" the element that comes first in the DOM
    var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
    var start = order ? element1 : element2;
    var end = order ? element2 : element1;

    // Get common ancestor container
    var range = document.createRange();
    range.setStart(start, 0);
    range.setEnd(end, 0);
    var commonAncestorContainer = range.commonAncestorContainer;

    // Both nodes are inside #document

    if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
      if (isOffsetContainer(commonAncestorContainer)) {
        return commonAncestorContainer;
      }

      return getOffsetParent(commonAncestorContainer);
    }

    // one of the nodes is inside shadowDOM, find which one
    var element1root = getRoot(element1);
    if (element1root.host) {
      return findCommonOffsetParent(element1root.host, element2);
    } else {
      return findCommonOffsetParent(element1, getRoot(element2).host);
    }
  }

  /**
   * Gets the scroll value of the given element in the given side (top and left)
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @argument {String} side `top` or `left`
   * @returns {number} amount of scrolled pixels
   */
  function getScroll(element) {
    var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

    var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
    var nodeName = element.nodeName;

    if (nodeName === 'BODY' || nodeName === 'HTML') {
      var html = element.ownerDocument.documentElement;
      var scrollingElement = element.ownerDocument.scrollingElement || html;
      return scrollingElement[upperSide];
    }

    return element[upperSide];
  }

  /*
   * Sum or subtract the element scroll values (left and top) from a given rect object
   * @method
   * @memberof Popper.Utils
   * @param {Object} rect - Rect object you want to change
   * @param {HTMLElement} element - The element from the function reads the scroll values
   * @param {Boolean} subtract - set to true if you want to subtract the scroll values
   * @return {Object} rect - The modifier rect object
   */
  function includeScroll(rect, element) {
    var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var scrollTop = getScroll(element, 'top');
    var scrollLeft = getScroll(element, 'left');
    var modifier = subtract ? -1 : 1;
    rect.top += scrollTop * modifier;
    rect.bottom += scrollTop * modifier;
    rect.left += scrollLeft * modifier;
    rect.right += scrollLeft * modifier;
    return rect;
  }

  /*
   * Helper to detect borders of a given element
   * @method
   * @memberof Popper.Utils
   * @param {CSSStyleDeclaration} styles
   * Result of `getStyleComputedProperty` on the given element
   * @param {String} axis - `x` or `y`
   * @return {number} borders - The borders size of the given axis
   */

  function getBordersSize(styles, axis) {
    var sideA = axis === 'x' ? 'Left' : 'Top';
    var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

    return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
  }

  function getSize(axis, body, html, computedStyle) {
    return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
  }

  function getWindowSizes(document) {
    var body = document.body;
    var html = document.documentElement;
    var computedStyle = isIE(10) && getComputedStyle(html);

    return {
      height: getSize('Height', body, html, computedStyle),
      width: getSize('Width', body, html, computedStyle)
    };
  }

  var classCallCheck$1 = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass$1 = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();





  var defineProperty$4 = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  var _extends$3 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  /**
   * Given element offsets, generate an output similar to getBoundingClientRect
   * @method
   * @memberof Popper.Utils
   * @argument {Object} offsets
   * @returns {Object} ClientRect like output
   */
  function getClientRect(offsets) {
    return _extends$3({}, offsets, {
      right: offsets.left + offsets.width,
      bottom: offsets.top + offsets.height
    });
  }

  /**
   * Get bounding client rect of given element
   * @method
   * @memberof Popper.Utils
   * @param {HTMLElement} element
   * @return {Object} client rect
   */
  function getBoundingClientRect(element) {
    var rect = {};

    // IE10 10 FIX: Please, don't ask, the element isn't
    // considered in DOM in some circumstances...
    // This isn't reproducible in IE10 compatibility mode of IE11
    try {
      if (isIE(10)) {
        rect = element.getBoundingClientRect();
        var scrollTop = getScroll(element, 'top');
        var scrollLeft = getScroll(element, 'left');
        rect.top += scrollTop;
        rect.left += scrollLeft;
        rect.bottom += scrollTop;
        rect.right += scrollLeft;
      } else {
        rect = element.getBoundingClientRect();
      }
    } catch (e) {}

    var result = {
      left: rect.left,
      top: rect.top,
      width: rect.right - rect.left,
      height: rect.bottom - rect.top
    };

    // subtract scrollbar size from sizes
    var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
    var width = sizes.width || element.clientWidth || result.width;
    var height = sizes.height || element.clientHeight || result.height;

    var horizScrollbar = element.offsetWidth - width;
    var vertScrollbar = element.offsetHeight - height;

    // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
    // we make this check conditional for performance reasons
    if (horizScrollbar || vertScrollbar) {
      var styles = getStyleComputedProperty(element);
      horizScrollbar -= getBordersSize(styles, 'x');
      vertScrollbar -= getBordersSize(styles, 'y');

      result.width -= horizScrollbar;
      result.height -= vertScrollbar;
    }

    return getClientRect(result);
  }

  function getOffsetRectRelativeToArbitraryNode(children, parent) {
    var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var isIE10 = isIE(10);
    var isHTML = parent.nodeName === 'HTML';
    var childrenRect = getBoundingClientRect(children);
    var parentRect = getBoundingClientRect(parent);
    var scrollParent = getScrollParent(children);

    var styles = getStyleComputedProperty(parent);
    var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
    var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);

    // In cases where the parent is fixed, we must ignore negative scroll in offset calc
    if (fixedPosition && isHTML) {
      parentRect.top = Math.max(parentRect.top, 0);
      parentRect.left = Math.max(parentRect.left, 0);
    }
    var offsets = getClientRect({
      top: childrenRect.top - parentRect.top - borderTopWidth,
      left: childrenRect.left - parentRect.left - borderLeftWidth,
      width: childrenRect.width,
      height: childrenRect.height
    });
    offsets.marginTop = 0;
    offsets.marginLeft = 0;

    // Subtract margins of documentElement in case it's being used as parent
    // we do this only on HTML because it's the only element that behaves
    // differently when margins are applied to it. The margins are included in
    // the box of the documentElement, in the other cases not.
    if (!isIE10 && isHTML) {
      var marginTop = parseFloat(styles.marginTop, 10);
      var marginLeft = parseFloat(styles.marginLeft, 10);

      offsets.top -= borderTopWidth - marginTop;
      offsets.bottom -= borderTopWidth - marginTop;
      offsets.left -= borderLeftWidth - marginLeft;
      offsets.right -= borderLeftWidth - marginLeft;

      // Attach marginTop and marginLeft because in some circumstances we may need them
      offsets.marginTop = marginTop;
      offsets.marginLeft = marginLeft;
    }

    if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
      offsets = includeScroll(offsets, parent);
    }

    return offsets;
  }

  function getViewportOffsetRectRelativeToArtbitraryNode(element) {
    var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var html = element.ownerDocument.documentElement;
    var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
    var width = Math.max(html.clientWidth, window.innerWidth || 0);
    var height = Math.max(html.clientHeight, window.innerHeight || 0);

    var scrollTop = !excludeScroll ? getScroll(html) : 0;
    var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

    var offset = {
      top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
      left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
      width: width,
      height: height
    };

    return getClientRect(offset);
  }

  /**
   * Check if the given element is fixed or is inside a fixed parent
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @argument {Element} customContainer
   * @returns {Boolean} answer to "isFixed?"
   */
  function isFixed(element) {
    var nodeName = element.nodeName;
    if (nodeName === 'BODY' || nodeName === 'HTML') {
      return false;
    }
    if (getStyleComputedProperty(element, 'position') === 'fixed') {
      return true;
    }
    var parentNode = getParentNode(element);
    if (!parentNode) {
      return false;
    }
    return isFixed(parentNode);
  }

  /**
   * Finds the first parent of an element that has a transformed property defined
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} first transformed parent or documentElement
   */

  function getFixedPositionOffsetParent(element) {
    // This check is needed to avoid errors in case one of the elements isn't defined for any reason
    if (!element || !element.parentElement || isIE()) {
      return document.documentElement;
    }
    var el = element.parentElement;
    while (el && getStyleComputedProperty(el, 'transform') === 'none') {
      el = el.parentElement;
    }
    return el || document.documentElement;
  }

  /**
   * Computed the boundaries limits and return them
   * @method
   * @memberof Popper.Utils
   * @param {HTMLElement} popper
   * @param {HTMLElement} reference
   * @param {number} padding
   * @param {HTMLElement} boundariesElement - Element used to define the boundaries
   * @param {Boolean} fixedPosition - Is in fixed position mode
   * @returns {Object} Coordinates of the boundaries
   */
  function getBoundaries(popper, reference, padding, boundariesElement) {
    var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    // NOTE: 1 DOM access here

    var boundaries = { top: 0, left: 0 };
    var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));

    // Handle viewport case
    if (boundariesElement === 'viewport') {
      boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
    } else {
      // Handle other cases based on DOM element used as boundaries
      var boundariesNode = void 0;
      if (boundariesElement === 'scrollParent') {
        boundariesNode = getScrollParent(getParentNode(reference));
        if (boundariesNode.nodeName === 'BODY') {
          boundariesNode = popper.ownerDocument.documentElement;
        }
      } else if (boundariesElement === 'window') {
        boundariesNode = popper.ownerDocument.documentElement;
      } else {
        boundariesNode = boundariesElement;
      }

      var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

      // In case of HTML, we need a different computation
      if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
        var _getWindowSizes = getWindowSizes(popper.ownerDocument),
            height = _getWindowSizes.height,
            width = _getWindowSizes.width;

        boundaries.top += offsets.top - offsets.marginTop;
        boundaries.bottom = height + offsets.top;
        boundaries.left += offsets.left - offsets.marginLeft;
        boundaries.right = width + offsets.left;
      } else {
        // for all the other DOM elements, this one is good
        boundaries = offsets;
      }
    }

    // Add paddings
    padding = padding || 0;
    var isPaddingNumber = typeof padding === 'number';
    boundaries.left += isPaddingNumber ? padding : padding.left || 0;
    boundaries.top += isPaddingNumber ? padding : padding.top || 0;
    boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
    boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

    return boundaries;
  }

  function getArea(_ref) {
    var width = _ref.width,
        height = _ref.height;

    return width * height;
  }

  /**
   * Utility used to transform the `auto` placement to the placement with more
   * available space.
   * @method
   * @memberof Popper.Utils
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
    var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

    if (placement.indexOf('auto') === -1) {
      return placement;
    }

    var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

    var rects = {
      top: {
        width: boundaries.width,
        height: refRect.top - boundaries.top
      },
      right: {
        width: boundaries.right - refRect.right,
        height: boundaries.height
      },
      bottom: {
        width: boundaries.width,
        height: boundaries.bottom - refRect.bottom
      },
      left: {
        width: refRect.left - boundaries.left,
        height: boundaries.height
      }
    };

    var sortedAreas = Object.keys(rects).map(function (key) {
      return _extends$3({
        key: key
      }, rects[key], {
        area: getArea(rects[key])
      });
    }).sort(function (a, b) {
      return b.area - a.area;
    });

    var filteredAreas = sortedAreas.filter(function (_ref2) {
      var width = _ref2.width,
          height = _ref2.height;
      return width >= popper.clientWidth && height >= popper.clientHeight;
    });

    var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

    var variation = placement.split('-')[1];

    return computedPlacement + (variation ? '-' + variation : '');
  }

  /**
   * Get offsets to the reference element
   * @method
   * @memberof Popper.Utils
   * @param {Object} state
   * @param {Element} popper - the popper element
   * @param {Element} reference - the reference element (the popper will be relative to this)
   * @param {Element} fixedPosition - is in fixed position mode
   * @returns {Object} An object containing the offsets which will be applied to the popper
   */
  function getReferenceOffsets(state, popper, reference) {
    var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
    return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
  }

  /**
   * Get the outer sizes of the given element (offset size + margins)
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Object} object containing width and height properties
   */
  function getOuterSizes(element) {
    var window = element.ownerDocument.defaultView;
    var styles = window.getComputedStyle(element);
    var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
    var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
    var result = {
      width: element.offsetWidth + y,
      height: element.offsetHeight + x
    };
    return result;
  }

  /**
   * Get the opposite placement of the given one
   * @method
   * @memberof Popper.Utils
   * @argument {String} placement
   * @returns {String} flipped placement
   */
  function getOppositePlacement(placement) {
    var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash[matched];
    });
  }

  /**
   * Get offsets to the popper
   * @method
   * @memberof Popper.Utils
   * @param {Object} position - CSS position the Popper will get applied
   * @param {HTMLElement} popper - the popper element
   * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
   * @param {String} placement - one of the valid placement options
   * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
   */
  function getPopperOffsets(popper, referenceOffsets, placement) {
    placement = placement.split('-')[0];

    // Get popper node sizes
    var popperRect = getOuterSizes(popper);

    // Add position, width and height to our offsets object
    var popperOffsets = {
      width: popperRect.width,
      height: popperRect.height
    };

    // depending by the popper placement we have to compute its offsets slightly differently
    var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
    var mainSide = isHoriz ? 'top' : 'left';
    var secondarySide = isHoriz ? 'left' : 'top';
    var measurement = isHoriz ? 'height' : 'width';
    var secondaryMeasurement = !isHoriz ? 'height' : 'width';

    popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
    if (placement === secondarySide) {
      popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
    } else {
      popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
    }

    return popperOffsets;
  }

  /**
   * Mimics the `find` method of Array
   * @method
   * @memberof Popper.Utils
   * @argument {Array} arr
   * @argument prop
   * @argument value
   * @returns index or -1
   */
  function find$1(arr, check) {
    // use native find if supported
    if (Array.prototype.find) {
      return arr.find(check);
    }

    // use `filter` to obtain the same behavior of `find`
    return arr.filter(check)[0];
  }

  /**
   * Return the index of the matching object
   * @method
   * @memberof Popper.Utils
   * @argument {Array} arr
   * @argument prop
   * @argument value
   * @returns index or -1
   */
  function findIndex$1(arr, prop, value) {
    // use native findIndex if supported
    if (Array.prototype.findIndex) {
      return arr.findIndex(function (cur) {
        return cur[prop] === value;
      });
    }

    // use `find` + `indexOf` if `findIndex` isn't supported
    var match = find$1(arr, function (obj) {
      return obj[prop] === value;
    });
    return arr.indexOf(match);
  }

  /**
   * Loop trough the list of modifiers and run them in order,
   * each of them will then edit the data object.
   * @method
   * @memberof Popper.Utils
   * @param {dataObject} data
   * @param {Array} modifiers
   * @param {String} ends - Optional modifier name used as stopper
   * @returns {dataObject}
   */
  function runModifiers(modifiers, data, ends) {
    var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex$1(modifiers, 'name', ends));

    modifiersToRun.forEach(function (modifier) {
      if (modifier['function']) {
        // eslint-disable-line dot-notation
        console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
      }
      var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
      if (modifier.enabled && isFunction$1(fn)) {
        // Add properties to offsets to make them a complete clientRect object
        // we do this before each modifier to make sure the previous one doesn't
        // mess with these values
        data.offsets.popper = getClientRect(data.offsets.popper);
        data.offsets.reference = getClientRect(data.offsets.reference);

        data = fn(data, modifier);
      }
    });

    return data;
  }

  /**
   * Updates the position of the popper, computing the new offsets and applying
   * the new style.<br />
   * Prefer `scheduleUpdate` over `update` because of performance reasons.
   * @method
   * @memberof Popper
   */
  function update$1() {
    // if popper is destroyed, don't perform any further update
    if (this.state.isDestroyed) {
      return;
    }

    var data = {
      instance: this,
      styles: {},
      arrowStyles: {},
      attributes: {},
      flipped: false,
      offsets: {}
    };

    // compute reference element offsets
    data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

    // compute auto placement, store placement inside the data object,
    // modifiers will be able to edit `placement` if needed
    // and refer to originalPlacement to know the original value
    data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

    // store the computed placement inside `originalPlacement`
    data.originalPlacement = data.placement;

    data.positionFixed = this.options.positionFixed;

    // compute the popper offsets
    data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

    data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

    // run the modifiers
    data = runModifiers(this.modifiers, data);

    // the first `update` will call `onCreate` callback
    // the other ones will call `onUpdate` callback
    if (!this.state.isCreated) {
      this.state.isCreated = true;
      this.options.onCreate(data);
    } else {
      this.options.onUpdate(data);
    }
  }

  /**
   * Helper used to know if the given modifier is enabled.
   * @method
   * @memberof Popper.Utils
   * @returns {Boolean}
   */
  function isModifierEnabled(modifiers, modifierName) {
    return modifiers.some(function (_ref) {
      var name = _ref.name,
          enabled = _ref.enabled;
      return enabled && name === modifierName;
    });
  }

  /**
   * Get the prefixed supported property name
   * @method
   * @memberof Popper.Utils
   * @argument {String} property (camelCase)
   * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
   */
  function getSupportedPropertyName(property) {
    var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
    var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

    for (var i = 0; i < prefixes.length; i++) {
      var prefix = prefixes[i];
      var toCheck = prefix ? '' + prefix + upperProp : property;
      if (typeof document.body.style[toCheck] !== 'undefined') {
        return toCheck;
      }
    }
    return null;
  }

  /**
   * Destroys the popper.
   * @method
   * @memberof Popper
   */
  function destroy() {
    this.state.isDestroyed = true;

    // touch DOM only if `applyStyle` modifier is enabled
    if (isModifierEnabled(this.modifiers, 'applyStyle')) {
      this.popper.removeAttribute('x-placement');
      this.popper.style.position = '';
      this.popper.style.top = '';
      this.popper.style.left = '';
      this.popper.style.right = '';
      this.popper.style.bottom = '';
      this.popper.style.willChange = '';
      this.popper.style[getSupportedPropertyName('transform')] = '';
    }

    this.disableEventListeners();

    // remove the popper if user explicitly asked for the deletion on destroy
    // do not use `remove` because IE11 doesn't support it
    if (this.options.removeOnDestroy) {
      this.popper.parentNode.removeChild(this.popper);
    }
    return this;
  }

  /**
   * Get the window associated with the element
   * @argument {Element} element
   * @returns {Window}
   */
  function getWindow(element) {
    var ownerDocument = element.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView : window;
  }

  function attachToScrollParents(scrollParent, event, callback, scrollParents) {
    var isBody = scrollParent.nodeName === 'BODY';
    var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
    target.addEventListener(event, callback, { passive: true });

    if (!isBody) {
      attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
    }
    scrollParents.push(target);
  }

  /**
   * Setup needed event listeners used to update the popper position
   * @method
   * @memberof Popper.Utils
   * @private
   */
  function setupEventListeners(reference, options, state, updateBound) {
    // Resize event listener on window
    state.updateBound = updateBound;
    getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

    // Scroll event listener on scroll parents
    var scrollElement = getScrollParent(reference);
    attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
    state.scrollElement = scrollElement;
    state.eventsEnabled = true;

    return state;
  }

  /**
   * It will add resize/scroll events and start recalculating
   * position of the popper element when they are triggered.
   * @method
   * @memberof Popper
   */
  function enableEventListeners() {
    if (!this.state.eventsEnabled) {
      this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
    }
  }

  /**
   * Remove event listeners used to update the popper position
   * @method
   * @memberof Popper.Utils
   * @private
   */
  function removeEventListeners(reference, state) {
    // Remove resize event listener on window
    getWindow(reference).removeEventListener('resize', state.updateBound);

    // Remove scroll event listener on scroll parents
    state.scrollParents.forEach(function (target) {
      target.removeEventListener('scroll', state.updateBound);
    });

    // Reset state
    state.updateBound = null;
    state.scrollParents = [];
    state.scrollElement = null;
    state.eventsEnabled = false;
    return state;
  }

  /**
   * It will remove resize/scroll events and won't recalculate popper position
   * when they are triggered. It also won't trigger `onUpdate` callback anymore,
   * unless you call `update` method manually.
   * @method
   * @memberof Popper
   */
  function disableEventListeners() {
    if (this.state.eventsEnabled) {
      cancelAnimationFrame(this.scheduleUpdate);
      this.state = removeEventListeners(this.reference, this.state);
    }
  }

  /**
   * Tells if a given input is a number
   * @method
   * @memberof Popper.Utils
   * @param {*} input to check
   * @return {Boolean}
   */
  function isNumeric(n) {
    return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
  }

  /**
   * Set the style to the given popper
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element - Element to apply the style to
   * @argument {Object} styles
   * Object with a list of properties and values which will be applied to the element
   */
  function setStyles(element, styles) {
    Object.keys(styles).forEach(function (prop) {
      var unit = '';
      // add unit if the value is numeric and is one of the following
      if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
        unit = 'px';
      }
      element.style[prop] = styles[prop] + unit;
    });
  }

  /**
   * Set the attributes to the given popper
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element - Element to apply the attributes to
   * @argument {Object} styles
   * Object with a list of properties and values which will be applied to the element
   */
  function setAttributes(element, attributes) {
    Object.keys(attributes).forEach(function (prop) {
      var value = attributes[prop];
      if (value !== false) {
        element.setAttribute(prop, attributes[prop]);
      } else {
        element.removeAttribute(prop);
      }
    });
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} data.styles - List of style properties - values to apply to popper element
   * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The same data object
   */
  function applyStyle(data) {
    // any property present in `data.styles` will be applied to the popper,
    // in this way we can make the 3rd party modifiers add custom styles to it
    // Be aware, modifiers could override the properties defined in the previous
    // lines of this modifier!
    setStyles(data.instance.popper, data.styles);

    // any property present in `data.attributes` will be applied to the popper,
    // they will be set as HTML attributes of the element
    setAttributes(data.instance.popper, data.attributes);

    // if arrowElement is defined and arrowStyles has some properties
    if (data.arrowElement && Object.keys(data.arrowStyles).length) {
      setStyles(data.arrowElement, data.arrowStyles);
    }

    return data;
  }

  /**
   * Set the x-placement attribute before everything else because it could be used
   * to add margins to the popper margins needs to be calculated to get the
   * correct popper offsets.
   * @method
   * @memberof Popper.modifiers
   * @param {HTMLElement} reference - The reference element used to position the popper
   * @param {HTMLElement} popper - The HTML element used as popper
   * @param {Object} options - Popper.js options
   */
  function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
    // compute reference element offsets
    var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

    // compute auto placement, store placement inside the data object,
    // modifiers will be able to edit `placement` if needed
    // and refer to originalPlacement to know the original value
    var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

    popper.setAttribute('x-placement', placement);

    // Apply `position` to popper before anything else because
    // without the position applied we can't guarantee correct computations
    setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

    return options;
  }

  /**
   * @function
   * @memberof Popper.Utils
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Boolean} shouldRound - If the offsets should be rounded at all
   * @returns {Object} The popper's position offsets rounded
   *
   * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
   * good as it can be within reason.
   * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
   *
   * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
   * as well on High DPI screens).
   *
   * Firefox prefers no rounding for positioning and does not have blurriness on
   * high DPI screens.
   *
   * Only horizontal placement and left/right values need to be considered.
   */
  function getRoundedOffsets(data, shouldRound) {
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;
    var round = Math.round,
        floor = Math.floor;

    var noRound = function noRound(v) {
      return v;
    };

    var referenceWidth = round(reference.width);
    var popperWidth = round(popper.width);

    var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
    var isVariation = data.placement.indexOf('-') !== -1;
    var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
    var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

    var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
    var verticalToInteger = !shouldRound ? noRound : round;

    return {
      left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
      top: verticalToInteger(popper.top),
      bottom: verticalToInteger(popper.bottom),
      right: horizontalToInteger(popper.right)
    };
  }

  var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function computeStyle(data, options) {
    var x = options.x,
        y = options.y;
    var popper = data.offsets.popper;

    // Remove this legacy support in Popper.js v2

    var legacyGpuAccelerationOption = find$1(data.instance.modifiers, function (modifier) {
      return modifier.name === 'applyStyle';
    }).gpuAcceleration;
    if (legacyGpuAccelerationOption !== undefined) {
      console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
    }
    var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

    var offsetParent = getOffsetParent(data.instance.popper);
    var offsetParentRect = getBoundingClientRect(offsetParent);

    // Styles
    var styles = {
      position: popper.position
    };

    var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

    var sideA = x === 'bottom' ? 'top' : 'bottom';
    var sideB = y === 'right' ? 'left' : 'right';

    // if gpuAcceleration is set to `true` and transform is supported,
    //  we use `translate3d` to apply the position to the popper we
    // automatically use the supported prefixed version if needed
    var prefixedProperty = getSupportedPropertyName('transform');

    // now, let's make a step back and look at this code closely (wtf?)
    // If the content of the popper grows once it's been positioned, it
    // may happen that the popper gets misplaced because of the new content
    // overflowing its reference element
    // To avoid this problem, we provide two options (x and y), which allow
    // the consumer to define the offset origin.
    // If we position a popper on top of a reference element, we can set
    // `x` to `top` to make the popper grow towards its top instead of
    // its bottom.
    var left = void 0,
        top = void 0;
    if (sideA === 'bottom') {
      // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
      // and not the bottom of the html element
      if (offsetParent.nodeName === 'HTML') {
        top = -offsetParent.clientHeight + offsets.bottom;
      } else {
        top = -offsetParentRect.height + offsets.bottom;
      }
    } else {
      top = offsets.top;
    }
    if (sideB === 'right') {
      if (offsetParent.nodeName === 'HTML') {
        left = -offsetParent.clientWidth + offsets.right;
      } else {
        left = -offsetParentRect.width + offsets.right;
      }
    } else {
      left = offsets.left;
    }
    if (gpuAcceleration && prefixedProperty) {
      styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
      styles[sideA] = 0;
      styles[sideB] = 0;
      styles.willChange = 'transform';
    } else {
      // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
      var invertTop = sideA === 'bottom' ? -1 : 1;
      var invertLeft = sideB === 'right' ? -1 : 1;
      styles[sideA] = top * invertTop;
      styles[sideB] = left * invertLeft;
      styles.willChange = sideA + ', ' + sideB;
    }

    // Attributes
    var attributes = {
      'x-placement': data.placement
    };

    // Update `data` attributes, styles and arrowStyles
    data.attributes = _extends$3({}, attributes, data.attributes);
    data.styles = _extends$3({}, styles, data.styles);
    data.arrowStyles = _extends$3({}, data.offsets.arrow, data.arrowStyles);

    return data;
  }

  /**
   * Helper used to know if the given modifier depends from another one.<br />
   * It checks if the needed modifier is listed and enabled.
   * @method
   * @memberof Popper.Utils
   * @param {Array} modifiers - list of modifiers
   * @param {String} requestingName - name of requesting modifier
   * @param {String} requestedName - name of requested modifier
   * @returns {Boolean}
   */
  function isModifierRequired(modifiers, requestingName, requestedName) {
    var requesting = find$1(modifiers, function (_ref) {
      var name = _ref.name;
      return name === requestingName;
    });

    var isRequired = !!requesting && modifiers.some(function (modifier) {
      return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
    });

    if (!isRequired) {
      var _requesting = '`' + requestingName + '`';
      var requested = '`' + requestedName + '`';
      console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
    }
    return isRequired;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function arrow(data, options) {
    var _data$offsets$arrow;

    // arrow depends on keepTogether in order to work
    if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
      return data;
    }

    var arrowElement = options.element;

    // if arrowElement is a string, suppose it's a CSS selector
    if (typeof arrowElement === 'string') {
      arrowElement = data.instance.popper.querySelector(arrowElement);

      // if arrowElement is not found, don't run the modifier
      if (!arrowElement) {
        return data;
      }
    } else {
      // if the arrowElement isn't a query selector we must check that the
      // provided DOM node is child of its popper node
      if (!data.instance.popper.contains(arrowElement)) {
        console.warn('WARNING: `arrow.element` must be child of its popper element!');
        return data;
      }
    }

    var placement = data.placement.split('-')[0];
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;

    var isVertical = ['left', 'right'].indexOf(placement) !== -1;

    var len = isVertical ? 'height' : 'width';
    var sideCapitalized = isVertical ? 'Top' : 'Left';
    var side = sideCapitalized.toLowerCase();
    var altSide = isVertical ? 'left' : 'top';
    var opSide = isVertical ? 'bottom' : 'right';
    var arrowElementSize = getOuterSizes(arrowElement)[len];

    //
    // extends keepTogether behavior making sure the popper and its
    // reference have enough pixels in conjunction
    //

    // top/left side
    if (reference[opSide] - arrowElementSize < popper[side]) {
      data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
    }
    // bottom/right side
    if (reference[side] + arrowElementSize > popper[opSide]) {
      data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
    }
    data.offsets.popper = getClientRect(data.offsets.popper);

    // compute center of the popper
    var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

    // Compute the sideValue using the updated popper offsets
    // take popper margin in account because we don't have this info available
    var css = getStyleComputedProperty(data.instance.popper);
    var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
    var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
    var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

    // prevent arrowElement from being placed not contiguously to its popper
    sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

    data.arrowElement = arrowElement;
    data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty$4(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty$4(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

    return data;
  }

  /**
   * Get the opposite placement variation of the given one
   * @method
   * @memberof Popper.Utils
   * @argument {String} placement variation
   * @returns {String} flipped placement variation
   */
  function getOppositeVariation(variation) {
    if (variation === 'end') {
      return 'start';
    } else if (variation === 'start') {
      return 'end';
    }
    return variation;
  }

  /**
   * List of accepted placements to use as values of the `placement` option.<br />
   * Valid placements are:
   * - `auto`
   * - `top`
   * - `right`
   * - `bottom`
   * - `left`
   *
   * Each placement can have a variation from this list:
   * - `-start`
   * - `-end`
   *
   * Variations are interpreted easily if you think of them as the left to right
   * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
   * is right.<br />
   * Vertically (`left` and `right`), `start` is top and `end` is bottom.
   *
   * Some valid examples are:
   * - `top-end` (on top of reference, right aligned)
   * - `right-start` (on right of reference, top aligned)
   * - `bottom` (on bottom, centered)
   * - `auto-end` (on the side with more space available, alignment depends by placement)
   *
   * @static
   * @type {Array}
   * @enum {String}
   * @readonly
   * @method placements
   * @memberof Popper
   */
  var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

  // Get rid of `auto` `auto-start` and `auto-end`
  var validPlacements = placements.slice(3);

  /**
   * Given an initial placement, returns all the subsequent placements
   * clockwise (or counter-clockwise).
   *
   * @method
   * @memberof Popper.Utils
   * @argument {String} placement - A valid placement (it accepts variations)
   * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
   * @returns {Array} placements including their variations
   */
  function clockwise(placement) {
    var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var index = validPlacements.indexOf(placement);
    var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
    return counter ? arr.reverse() : arr;
  }

  var BEHAVIORS = {
    FLIP: 'flip',
    CLOCKWISE: 'clockwise',
    COUNTERCLOCKWISE: 'counterclockwise'
  };

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function flip(data, options) {
    // if `inner` modifier is enabled, we can't use the `flip` modifier
    if (isModifierEnabled(data.instance.modifiers, 'inner')) {
      return data;
    }

    if (data.flipped && data.placement === data.originalPlacement) {
      // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
      return data;
    }

    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

    var placement = data.placement.split('-')[0];
    var placementOpposite = getOppositePlacement(placement);
    var variation = data.placement.split('-')[1] || '';

    var flipOrder = [];

    switch (options.behavior) {
      case BEHAVIORS.FLIP:
        flipOrder = [placement, placementOpposite];
        break;
      case BEHAVIORS.CLOCKWISE:
        flipOrder = clockwise(placement);
        break;
      case BEHAVIORS.COUNTERCLOCKWISE:
        flipOrder = clockwise(placement, true);
        break;
      default:
        flipOrder = options.behavior;
    }

    flipOrder.forEach(function (step, index) {
      if (placement !== step || flipOrder.length === index + 1) {
        return data;
      }

      placement = data.placement.split('-')[0];
      placementOpposite = getOppositePlacement(placement);

      var popperOffsets = data.offsets.popper;
      var refOffsets = data.offsets.reference;

      // using floor because the reference offsets may contain decimals we are not going to consider here
      var floor = Math.floor;
      var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

      var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
      var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
      var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
      var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

      var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

      // flip the variation if required
      var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;

      // flips variation if reference element overflows boundaries
      var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

      // flips variation if popper content overflows boundaries
      var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);

      var flippedVariation = flippedVariationByRef || flippedVariationByContent;

      if (overlapsRef || overflowsBoundaries || flippedVariation) {
        // this boolean to detect any flip loop
        data.flipped = true;

        if (overlapsRef || overflowsBoundaries) {
          placement = flipOrder[index + 1];
        }

        if (flippedVariation) {
          variation = getOppositeVariation(variation);
        }

        data.placement = placement + (variation ? '-' + variation : '');

        // this object contains `position`, we want to preserve it along with
        // any additional property we may add in the future
        data.offsets.popper = _extends$3({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

        data = runModifiers(data.instance.modifiers, data, 'flip');
      }
    });
    return data;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function keepTogether(data) {
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;

    var placement = data.placement.split('-')[0];
    var floor = Math.floor;
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var side = isVertical ? 'right' : 'bottom';
    var opSide = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    if (popper[side] < floor(reference[opSide])) {
      data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
    }
    if (popper[opSide] > floor(reference[side])) {
      data.offsets.popper[opSide] = floor(reference[side]);
    }

    return data;
  }

  /**
   * Converts a string containing value + unit into a px value number
   * @function
   * @memberof {modifiers~offset}
   * @private
   * @argument {String} str - Value + unit string
   * @argument {String} measurement - `height` or `width`
   * @argument {Object} popperOffsets
   * @argument {Object} referenceOffsets
   * @returns {Number|String}
   * Value in pixels, or original string if no values were extracted
   */
  function toValue(str, measurement, popperOffsets, referenceOffsets) {
    // separate value from unit
    var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
    var value = +split[1];
    var unit = split[2];

    // If it's not a number it's an operator, I guess
    if (!value) {
      return str;
    }

    if (unit.indexOf('%') === 0) {
      var element = void 0;
      switch (unit) {
        case '%p':
          element = popperOffsets;
          break;
        case '%':
        case '%r':
        default:
          element = referenceOffsets;
      }

      var rect = getClientRect(element);
      return rect[measurement] / 100 * value;
    } else if (unit === 'vh' || unit === 'vw') {
      // if is a vh or vw, we calculate the size based on the viewport
      var size = void 0;
      if (unit === 'vh') {
        size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
      } else {
        size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
      }
      return size / 100 * value;
    } else {
      // if is an explicit pixel unit, we get rid of the unit and keep the value
      // if is an implicit unit, it's px, and we return just the value
      return value;
    }
  }

  /**
   * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
   * @function
   * @memberof {modifiers~offset}
   * @private
   * @argument {String} offset
   * @argument {Object} popperOffsets
   * @argument {Object} referenceOffsets
   * @argument {String} basePlacement
   * @returns {Array} a two cells array with x and y offsets in numbers
   */
  function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
    var offsets = [0, 0];

    // Use height if placement is left or right and index is 0 otherwise use width
    // in this way the first offset will use an axis and the second one
    // will use the other one
    var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

    // Split the offset string to obtain a list of values and operands
    // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
    var fragments = offset.split(/(\+|\-)/).map(function (frag) {
      return frag.trim();
    });

    // Detect if the offset string contains a pair of values or a single one
    // they could be separated by comma or space
    var divider = fragments.indexOf(find$1(fragments, function (frag) {
      return frag.search(/,|\s/) !== -1;
    }));

    if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
      console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
    }

    // If divider is found, we divide the list of values and operands to divide
    // them by ofset X and Y.
    var splitRegex = /\s*,\s*|\s+/;
    var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

    // Convert the values with units to absolute pixels to allow our computations
    ops = ops.map(function (op, index) {
      // Most of the units rely on the orientation of the popper
      var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
      var mergeWithPrevious = false;
      return op
      // This aggregates any `+` or `-` sign that aren't considered operators
      // e.g.: 10 + +5 => [10, +, +5]
      .reduce(function (a, b) {
        if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
          a[a.length - 1] = b;
          mergeWithPrevious = true;
          return a;
        } else if (mergeWithPrevious) {
          a[a.length - 1] += b;
          mergeWithPrevious = false;
          return a;
        } else {
          return a.concat(b);
        }
      }, [])
      // Here we convert the string values into number values (in px)
      .map(function (str) {
        return toValue(str, measurement, popperOffsets, referenceOffsets);
      });
    });

    // Loop trough the offsets arrays and execute the operations
    ops.forEach(function (op, index) {
      op.forEach(function (frag, index2) {
        if (isNumeric(frag)) {
          offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
        }
      });
    });
    return offsets;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @argument {Number|String} options.offset=0
   * The offset value as described in the modifier description
   * @returns {Object} The data object, properly modified
   */
  function offset(data, _ref) {
    var offset = _ref.offset;
    var placement = data.placement,
        _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;

    var basePlacement = placement.split('-')[0];

    var offsets = void 0;
    if (isNumeric(+offset)) {
      offsets = [+offset, 0];
    } else {
      offsets = parseOffset(offset, popper, reference, basePlacement);
    }

    if (basePlacement === 'left') {
      popper.top += offsets[0];
      popper.left -= offsets[1];
    } else if (basePlacement === 'right') {
      popper.top += offsets[0];
      popper.left += offsets[1];
    } else if (basePlacement === 'top') {
      popper.left += offsets[0];
      popper.top -= offsets[1];
    } else if (basePlacement === 'bottom') {
      popper.left += offsets[0];
      popper.top += offsets[1];
    }

    data.popper = popper;
    return data;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function preventOverflow(data, options) {
    var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

    // If offsetParent is the reference element, we really want to
    // go one step up and use the next offsetParent as reference to
    // avoid to make this modifier completely useless and look like broken
    if (data.instance.reference === boundariesElement) {
      boundariesElement = getOffsetParent(boundariesElement);
    }

    // NOTE: DOM access here
    // resets the popper's position so that the document size can be calculated excluding
    // the size of the popper element itself
    var transformProp = getSupportedPropertyName('transform');
    var popperStyles = data.instance.popper.style; // assignment to help minification
    var top = popperStyles.top,
        left = popperStyles.left,
        transform = popperStyles[transformProp];

    popperStyles.top = '';
    popperStyles.left = '';
    popperStyles[transformProp] = '';

    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

    // NOTE: DOM access here
    // restores the original style properties after the offsets have been computed
    popperStyles.top = top;
    popperStyles.left = left;
    popperStyles[transformProp] = transform;

    options.boundaries = boundaries;

    var order = options.priority;
    var popper = data.offsets.popper;

    var check = {
      primary: function primary(placement) {
        var value = popper[placement];
        if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
          value = Math.max(popper[placement], boundaries[placement]);
        }
        return defineProperty$4({}, placement, value);
      },
      secondary: function secondary(placement) {
        var mainSide = placement === 'right' ? 'left' : 'top';
        var value = popper[mainSide];
        if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
          value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
        }
        return defineProperty$4({}, mainSide, value);
      }
    };

    order.forEach(function (placement) {
      var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
      popper = _extends$3({}, popper, check[side](placement));
    });

    data.offsets.popper = popper;

    return data;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function shift(data) {
    var placement = data.placement;
    var basePlacement = placement.split('-')[0];
    var shiftvariation = placement.split('-')[1];

    // if shift shiftvariation is specified, run the modifier
    if (shiftvariation) {
      var _data$offsets = data.offsets,
          reference = _data$offsets.reference,
          popper = _data$offsets.popper;

      var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
      var side = isVertical ? 'left' : 'top';
      var measurement = isVertical ? 'width' : 'height';

      var shiftOffsets = {
        start: defineProperty$4({}, side, reference[side]),
        end: defineProperty$4({}, side, reference[side] + reference[measurement] - popper[measurement])
      };

      data.offsets.popper = _extends$3({}, popper, shiftOffsets[shiftvariation]);
    }

    return data;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function hide(data) {
    if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
      return data;
    }

    var refRect = data.offsets.reference;
    var bound = find$1(data.instance.modifiers, function (modifier) {
      return modifier.name === 'preventOverflow';
    }).boundaries;

    if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
      // Avoid unnecessary DOM access if visibility hasn't changed
      if (data.hide === true) {
        return data;
      }

      data.hide = true;
      data.attributes['x-out-of-boundaries'] = '';
    } else {
      // Avoid unnecessary DOM access if visibility hasn't changed
      if (data.hide === false) {
        return data;
      }

      data.hide = false;
      data.attributes['x-out-of-boundaries'] = false;
    }

    return data;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function inner(data) {
    var placement = data.placement;
    var basePlacement = placement.split('-')[0];
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;

    var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

    var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

    popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

    data.placement = getOppositePlacement(placement);
    data.offsets.popper = getClientRect(popper);

    return data;
  }

  /**
   * Modifier function, each modifier can have a function of this type assigned
   * to its `fn` property.<br />
   * These functions will be called on each update, this means that you must
   * make sure they are performant enough to avoid performance bottlenecks.
   *
   * @function ModifierFn
   * @argument {dataObject} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {dataObject} The data object, properly modified
   */

  /**
   * Modifiers are plugins used to alter the behavior of your poppers.<br />
   * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
   * needed by the library.
   *
   * Usually you don't want to override the `order`, `fn` and `onLoad` props.
   * All the other properties are configurations that could be tweaked.
   * @namespace modifiers
   */
  var modifiers = {
    /**
     * Modifier used to shift the popper on the start or end of its reference
     * element.<br />
     * It will read the variation of the `placement` property.<br />
     * It can be one either `-end` or `-start`.
     * @memberof modifiers
     * @inner
     */
    shift: {
      /** @prop {number} order=100 - Index used to define the order of execution */
      order: 100,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: shift
    },

    /**
     * The `offset` modifier can shift your popper on both its axis.
     *
     * It accepts the following units:
     * - `px` or unit-less, interpreted as pixels
     * - `%` or `%r`, percentage relative to the length of the reference element
     * - `%p`, percentage relative to the length of the popper element
     * - `vw`, CSS viewport width unit
     * - `vh`, CSS viewport height unit
     *
     * For length is intended the main axis relative to the placement of the popper.<br />
     * This means that if the placement is `top` or `bottom`, the length will be the
     * `width`. In case of `left` or `right`, it will be the `height`.
     *
     * You can provide a single value (as `Number` or `String`), or a pair of values
     * as `String` divided by a comma or one (or more) white spaces.<br />
     * The latter is a deprecated method because it leads to confusion and will be
     * removed in v2.<br />
     * Additionally, it accepts additions and subtractions between different units.
     * Note that multiplications and divisions aren't supported.
     *
     * Valid examples are:
     * ```
     * 10
     * '10%'
     * '10, 10'
     * '10%, 10'
     * '10 + 10%'
     * '10 - 5vh + 3%'
     * '-10px + 5vh, 5px - 6%'
     * ```
     * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
     * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
     * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
     *
     * @memberof modifiers
     * @inner
     */
    offset: {
      /** @prop {number} order=200 - Index used to define the order of execution */
      order: 200,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: offset,
      /** @prop {Number|String} offset=0
       * The offset value as described in the modifier description
       */
      offset: 0
    },

    /**
     * Modifier used to prevent the popper from being positioned outside the boundary.
     *
     * A scenario exists where the reference itself is not within the boundaries.<br />
     * We can say it has "escaped the boundaries" — or just "escaped".<br />
     * In this case we need to decide whether the popper should either:
     *
     * - detach from the reference and remain "trapped" in the boundaries, or
     * - if it should ignore the boundary and "escape with its reference"
     *
     * When `escapeWithReference` is set to`true` and reference is completely
     * outside its boundaries, the popper will overflow (or completely leave)
     * the boundaries in order to remain attached to the edge of the reference.
     *
     * @memberof modifiers
     * @inner
     */
    preventOverflow: {
      /** @prop {number} order=300 - Index used to define the order of execution */
      order: 300,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: preventOverflow,
      /**
       * @prop {Array} [priority=['left','right','top','bottom']]
       * Popper will try to prevent overflow following these priorities by default,
       * then, it could overflow on the left and on top of the `boundariesElement`
       */
      priority: ['left', 'right', 'top', 'bottom'],
      /**
       * @prop {number} padding=5
       * Amount of pixel used to define a minimum distance between the boundaries
       * and the popper. This makes sure the popper always has a little padding
       * between the edges of its container
       */
      padding: 5,
      /**
       * @prop {String|HTMLElement} boundariesElement='scrollParent'
       * Boundaries used by the modifier. Can be `scrollParent`, `window`,
       * `viewport` or any DOM element.
       */
      boundariesElement: 'scrollParent'
    },

    /**
     * Modifier used to make sure the reference and its popper stay near each other
     * without leaving any gap between the two. Especially useful when the arrow is
     * enabled and you want to ensure that it points to its reference element.
     * It cares only about the first axis. You can still have poppers with margin
     * between the popper and its reference element.
     * @memberof modifiers
     * @inner
     */
    keepTogether: {
      /** @prop {number} order=400 - Index used to define the order of execution */
      order: 400,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: keepTogether
    },

    /**
     * This modifier is used to move the `arrowElement` of the popper to make
     * sure it is positioned between the reference element and its popper element.
     * It will read the outer size of the `arrowElement` node to detect how many
     * pixels of conjunction are needed.
     *
     * It has no effect if no `arrowElement` is provided.
     * @memberof modifiers
     * @inner
     */
    arrow: {
      /** @prop {number} order=500 - Index used to define the order of execution */
      order: 500,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: arrow,
      /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
      element: '[x-arrow]'
    },

    /**
     * Modifier used to flip the popper's placement when it starts to overlap its
     * reference element.
     *
     * Requires the `preventOverflow` modifier before it in order to work.
     *
     * **NOTE:** this modifier will interrupt the current update cycle and will
     * restart it if it detects the need to flip the placement.
     * @memberof modifiers
     * @inner
     */
    flip: {
      /** @prop {number} order=600 - Index used to define the order of execution */
      order: 600,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: flip,
      /**
       * @prop {String|Array} behavior='flip'
       * The behavior used to change the popper's placement. It can be one of
       * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
       * placements (with optional variations)
       */
      behavior: 'flip',
      /**
       * @prop {number} padding=5
       * The popper will flip if it hits the edges of the `boundariesElement`
       */
      padding: 5,
      /**
       * @prop {String|HTMLElement} boundariesElement='viewport'
       * The element which will define the boundaries of the popper position.
       * The popper will never be placed outside of the defined boundaries
       * (except if `keepTogether` is enabled)
       */
      boundariesElement: 'viewport',
      /**
       * @prop {Boolean} flipVariations=false
       * The popper will switch placement variation between `-start` and `-end` when
       * the reference element overlaps its boundaries.
       *
       * The original placement should have a set variation.
       */
      flipVariations: false,
      /**
       * @prop {Boolean} flipVariationsByContent=false
       * The popper will switch placement variation between `-start` and `-end` when
       * the popper element overlaps its reference boundaries.
       *
       * The original placement should have a set variation.
       */
      flipVariationsByContent: false
    },

    /**
     * Modifier used to make the popper flow toward the inner of the reference element.
     * By default, when this modifier is disabled, the popper will be placed outside
     * the reference element.
     * @memberof modifiers
     * @inner
     */
    inner: {
      /** @prop {number} order=700 - Index used to define the order of execution */
      order: 700,
      /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
      enabled: false,
      /** @prop {ModifierFn} */
      fn: inner
    },

    /**
     * Modifier used to hide the popper when its reference element is outside of the
     * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
     * be used to hide with a CSS selector the popper when its reference is
     * out of boundaries.
     *
     * Requires the `preventOverflow` modifier before it in order to work.
     * @memberof modifiers
     * @inner
     */
    hide: {
      /** @prop {number} order=800 - Index used to define the order of execution */
      order: 800,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: hide
    },

    /**
     * Computes the style that will be applied to the popper element to gets
     * properly positioned.
     *
     * Note that this modifier will not touch the DOM, it just prepares the styles
     * so that `applyStyle` modifier can apply it. This separation is useful
     * in case you need to replace `applyStyle` with a custom implementation.
     *
     * This modifier has `850` as `order` value to maintain backward compatibility
     * with previous versions of Popper.js. Expect the modifiers ordering method
     * to change in future major versions of the library.
     *
     * @memberof modifiers
     * @inner
     */
    computeStyle: {
      /** @prop {number} order=850 - Index used to define the order of execution */
      order: 850,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: computeStyle,
      /**
       * @prop {Boolean} gpuAcceleration=true
       * If true, it uses the CSS 3D transformation to position the popper.
       * Otherwise, it will use the `top` and `left` properties
       */
      gpuAcceleration: true,
      /**
       * @prop {string} [x='bottom']
       * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
       * Change this if your popper should grow in a direction different from `bottom`
       */
      x: 'bottom',
      /**
       * @prop {string} [x='left']
       * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
       * Change this if your popper should grow in a direction different from `right`
       */
      y: 'right'
    },

    /**
     * Applies the computed styles to the popper element.
     *
     * All the DOM manipulations are limited to this modifier. This is useful in case
     * you want to integrate Popper.js inside a framework or view library and you
     * want to delegate all the DOM manipulations to it.
     *
     * Note that if you disable this modifier, you must make sure the popper element
     * has its position set to `absolute` before Popper.js can do its work!
     *
     * Just disable this modifier and define your own to achieve the desired effect.
     *
     * @memberof modifiers
     * @inner
     */
    applyStyle: {
      /** @prop {number} order=900 - Index used to define the order of execution */
      order: 900,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: applyStyle,
      /** @prop {Function} */
      onLoad: applyStyleOnLoad,
      /**
       * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
       * @prop {Boolean} gpuAcceleration=true
       * If true, it uses the CSS 3D transformation to position the popper.
       * Otherwise, it will use the `top` and `left` properties
       */
      gpuAcceleration: undefined
    }
  };

  /**
   * The `dataObject` is an object containing all the information used by Popper.js.
   * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
   * @name dataObject
   * @property {Object} data.instance The Popper.js instance
   * @property {String} data.placement Placement applied to popper
   * @property {String} data.originalPlacement Placement originally defined on init
   * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
   * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
   * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
   * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
   * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
   * @property {Object} data.boundaries Offsets of the popper boundaries
   * @property {Object} data.offsets The measurements of popper, reference and arrow elements
   * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
   * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
   * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
   */

  /**
   * Default options provided to Popper.js constructor.<br />
   * These can be overridden using the `options` argument of Popper.js.<br />
   * To override an option, simply pass an object with the same
   * structure of the `options` object, as the 3rd argument. For example:
   * ```
   * new Popper(ref, pop, {
   *   modifiers: {
   *     preventOverflow: { enabled: false }
   *   }
   * })
   * ```
   * @type {Object}
   * @static
   * @memberof Popper
   */
  var Defaults = {
    /**
     * Popper's placement.
     * @prop {Popper.placements} placement='bottom'
     */
    placement: 'bottom',

    /**
     * Set this to true if you want popper to position it self in 'fixed' mode
     * @prop {Boolean} positionFixed=false
     */
    positionFixed: false,

    /**
     * Whether events (resize, scroll) are initially enabled.
     * @prop {Boolean} eventsEnabled=true
     */
    eventsEnabled: true,

    /**
     * Set to true if you want to automatically remove the popper when
     * you call the `destroy` method.
     * @prop {Boolean} removeOnDestroy=false
     */
    removeOnDestroy: false,

    /**
     * Callback called when the popper is created.<br />
     * By default, it is set to no-op.<br />
     * Access Popper.js instance with `data.instance`.
     * @prop {onCreate}
     */
    onCreate: function onCreate() {},

    /**
     * Callback called when the popper is updated. This callback is not called
     * on the initialization/creation of the popper, but only on subsequent
     * updates.<br />
     * By default, it is set to no-op.<br />
     * Access Popper.js instance with `data.instance`.
     * @prop {onUpdate}
     */
    onUpdate: function onUpdate() {},

    /**
     * List of modifiers used to modify the offsets before they are applied to the popper.
     * They provide most of the functionalities of Popper.js.
     * @prop {modifiers}
     */
    modifiers: modifiers
  };

  /**
   * @callback onCreate
   * @param {dataObject} data
   */

  /**
   * @callback onUpdate
   * @param {dataObject} data
   */

  // Utils
  // Methods
  var Popper = function () {
    /**
     * Creates a new Popper.js instance.
     * @class Popper
     * @param {Element|referenceObject} reference - The reference element used to position the popper
     * @param {Element} popper - The HTML / XML element used as the popper
     * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
     * @return {Object} instance - The generated Popper.js instance
     */
    function Popper(reference, popper) {
      var _this = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      classCallCheck$1(this, Popper);

      this.scheduleUpdate = function () {
        return requestAnimationFrame(_this.update);
      };

      // make update() debounced, so that it only runs at most once-per-tick
      this.update = debounce$1(this.update.bind(this));

      // with {} we create a new object with the options inside it
      this.options = _extends$3({}, Popper.Defaults, options);

      // init state
      this.state = {
        isDestroyed: false,
        isCreated: false,
        scrollParents: []
      };

      // get reference and popper elements (allow jQuery wrappers)
      this.reference = reference && reference.jquery ? reference[0] : reference;
      this.popper = popper && popper.jquery ? popper[0] : popper;

      // Deep merge modifiers options
      this.options.modifiers = {};
      Object.keys(_extends$3({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
        _this.options.modifiers[name] = _extends$3({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
      });

      // Refactoring modifiers' list (Object => Array)
      this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
        return _extends$3({
          name: name
        }, _this.options.modifiers[name]);
      })
      // sort the modifiers by order
      .sort(function (a, b) {
        return a.order - b.order;
      });

      // modifiers have the ability to execute arbitrary code when Popper.js get inited
      // such code is executed in the same order of its modifier
      // they could add new properties to their options configuration
      // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
      this.modifiers.forEach(function (modifierOptions) {
        if (modifierOptions.enabled && isFunction$1(modifierOptions.onLoad)) {
          modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
        }
      });

      // fire the first update to position the popper in the right place
      this.update();

      var eventsEnabled = this.options.eventsEnabled;
      if (eventsEnabled) {
        // setup event listeners, they will take care of update the position in specific situations
        this.enableEventListeners();
      }

      this.state.eventsEnabled = eventsEnabled;
    }

    // We can't use class properties because they don't get listed in the
    // class prototype and break stuff like Sinon stubs


    createClass$1(Popper, [{
      key: 'update',
      value: function update$$1() {
        return update$1.call(this);
      }
    }, {
      key: 'destroy',
      value: function destroy$$1() {
        return destroy.call(this);
      }
    }, {
      key: 'enableEventListeners',
      value: function enableEventListeners$$1() {
        return enableEventListeners.call(this);
      }
    }, {
      key: 'disableEventListeners',
      value: function disableEventListeners$$1() {
        return disableEventListeners.call(this);
      }

      /**
       * Schedules an update. It will run on the next UI update available.
       * @method scheduleUpdate
       * @memberof Popper
       */


      /**
       * Collection of utilities useful when writing custom modifiers.
       * Starting from version 1.7, this method is available only if you
       * include `popper-utils.js` before `popper.js`.
       *
       * **DEPRECATION**: This way to access PopperUtils is deprecated
       * and will be removed in v2! Use the PopperUtils module directly instead.
       * Due to the high instability of the methods contained in Utils, we can't
       * guarantee them to follow semver. Use them at your own risk!
       * @static
       * @private
       * @type {Object}
       * @deprecated since version 1.8
       * @member Utils
       * @memberof Popper
       */

    }]);
    return Popper;
  }();

  /**
   * The `referenceObject` is an object that provides an interface compatible with Popper.js
   * and lets you use it as replacement of a real DOM node.<br />
   * You can use this method to position a popper relatively to a set of coordinates
   * in case you don't have a DOM node to use as reference.
   *
   * ```
   * new Popper(referenceObject, popperNode);
   * ```
   *
   * NB: This feature isn't supported in Internet Explorer 10.
   * @name referenceObject
   * @property {Function} data.getBoundingClientRect
   * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
   * @property {number} data.clientWidth
   * An ES6 getter that will return the width of the virtual reference element.
   * @property {number} data.clientHeight
   * An ES6 getter that will return the height of the virtual reference element.
   */


  Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
  Popper.placements = placements;
  Popper.Defaults = Defaults;

  var key = '__global_unique_id__';

  var gud = function() {
    return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
  };

  var gud$1 = /*#__PURE__*/Object.freeze({
    default: gud,
    __moduleExports: gud
  });

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var warning = function() {};

  {
    var printWarning$2 = function printWarning(format, args) {
      var len = arguments.length;
      args = new Array(len > 1 ? len - 1 : 0);
      for (var key = 1; key < len; key++) {
        args[key - 1] = arguments[key];
      }
      var argIndex = 0;
      var message = 'Warning: ' +
        format.replace(/%s/g, function() {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function(condition, format, args) {
      var len = arguments.length;
      args = new Array(len > 2 ? len - 2 : 0);
      for (var key = 2; key < len; key++) {
        args[key - 2] = arguments[key];
      }
      if (format === undefined) {
        throw new Error(
            '`warning(condition, format, ...args)` requires a warning ' +
            'message argument'
        );
      }
      if (!condition) {
        printWarning$2.apply(null, [format].concat(args));
      }
    };
  }

  var warning_1 = warning;

  var _gud = ( gud$1 && gud ) || gud$1;

  var implementation$8 = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;



  var _react2 = _interopRequireDefault(React__default);



  var _propTypes2 = _interopRequireDefault(propTypes);



  var _gud2 = _interopRequireDefault(_gud);



  var _warning2 = _interopRequireDefault(warning_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var MAX_SIGNED_31_BIT_INT = 1073741823;

  // Inlined Object.is polyfill.
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
  function objectIs(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function createEventEmitter(value) {
    var handlers = [];
    return {
      on: function on(handler) {
        handlers.push(handler);
      },
      off: function off(handler) {
        handlers = handlers.filter(function (h) {
          return h !== handler;
        });
      },
      get: function get() {
        return value;
      },
      set: function set(newValue, changedBits) {
        value = newValue;
        handlers.forEach(function (handler) {
          return handler(value, changedBits);
        });
      }
    };
  }

  function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
  }

  function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;

    var contextProp = '__create-react-context-' + (0, _gud2.default)() + '__';

    var Provider = function (_Component) {
      _inherits(Provider, _Component);

      function Provider() {
        var _temp, _this, _ret;

        _classCallCheck(this, Provider);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.emitter = createEventEmitter(_this.props.value), _temp), _possibleConstructorReturn(_this, _ret);
      }

      Provider.prototype.getChildContext = function getChildContext() {
        var _ref;

        return _ref = {}, _ref[contextProp] = this.emitter, _ref;
      };

      Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
          var oldValue = this.props.value;
          var newValue = nextProps.value;
          var changedBits = void 0;

          if (objectIs(oldValue, newValue)) {
            changedBits = 0; // No change
          } else {
            changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            {
              (0, _warning2.default)((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
            }

            changedBits |= 0;

            if (changedBits !== 0) {
              this.emitter.set(nextProps.value, changedBits);
            }
          }
        }
      };

      Provider.prototype.render = function render() {
        return this.props.children;
      };

      return Provider;
    }(React__default.Component);

    Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes2.default.object.isRequired, _Provider$childContex);

    var Consumer = function (_Component2) {
      _inherits(Consumer, _Component2);

      function Consumer() {
        var _temp2, _this2, _ret2;

        _classCallCheck(this, Consumer);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _Component2.call.apply(_Component2, [this].concat(args))), _this2), _this2.state = {
          value: _this2.getValue()
        }, _this2.onUpdate = function (newValue, changedBits) {
          var observedBits = _this2.observedBits | 0;
          if ((observedBits & changedBits) !== 0) {
            _this2.setState({ value: _this2.getValue() });
          }
        }, _temp2), _possibleConstructorReturn(_this2, _ret2);
      }

      Consumer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var observedBits = nextProps.observedBits;

        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
        : observedBits;
      };

      Consumer.prototype.componentDidMount = function componentDidMount() {
        if (this.context[contextProp]) {
          this.context[contextProp].on(this.onUpdate);
        }
        var observedBits = this.props.observedBits;

        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
        : observedBits;
      };

      Consumer.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.context[contextProp]) {
          this.context[contextProp].off(this.onUpdate);
        }
      };

      Consumer.prototype.getValue = function getValue() {
        if (this.context[contextProp]) {
          return this.context[contextProp].get();
        } else {
          return defaultValue;
        }
      };

      Consumer.prototype.render = function render() {
        return onlyChild(this.props.children)(this.state.value);
      };

      return Consumer;
    }(React__default.Component);

    Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes2.default.object, _Consumer$contextType);


    return {
      Provider: Provider,
      Consumer: Consumer
    };
  }

  exports.default = createReactContext;
  module.exports = exports['default'];
  });

  var implementation$9 = unwrapExports(implementation$8);

  var implementation$a = /*#__PURE__*/Object.freeze({
    default: implementation$9,
    __moduleExports: implementation$8
  });

  var _implementation = ( implementation$a && implementation$9 ) || implementation$a;

  var lib = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;



  var _react2 = _interopRequireDefault(React__default);



  var _implementation2 = _interopRequireDefault(_implementation);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = _react2.default.createContext || _implementation2.default;
  module.exports = exports['default'];
  });

  var createContext = unwrapExports(lib);

  var ManagerReferenceNodeContext = createContext();
  var ManagerReferenceNodeSetterContext = createContext();

  var Manager =
  /*#__PURE__*/
  function (_React$Component) {
    inheritsLoose(Manager, _React$Component);

    function Manager() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "referenceNode", void 0);

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "setReferenceNode", function (newReferenceNode) {
        if (newReferenceNode && _this.referenceNode !== newReferenceNode) {
          _this.referenceNode = newReferenceNode;

          _this.forceUpdate();
        }
      });

      return _this;
    }

    var _proto = Manager.prototype;

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.referenceNode = null;
    };

    _proto.render = function render() {
      return React.createElement(ManagerReferenceNodeContext.Provider, {
        value: this.referenceNode
      }, React.createElement(ManagerReferenceNodeSetterContext.Provider, {
        value: this.setReferenceNode
      }, this.props.children));
    };

    return Manager;
  }(React.Component);

  /**
   * Takes an argument and if it's an array, returns the first item in the array,
   * otherwise returns the argument. Used for Preact compatibility.
   */
  var unwrapArray = function unwrapArray(arg) {
    return Array.isArray(arg) ? arg[0] : arg;
  };
  /**
   * Takes a maybe-undefined function and arbitrary args and invokes the function
   * only if it is defined.
   */

  var safeInvoke = function safeInvoke(fn) {
    if (typeof fn === "function") {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return fn.apply(void 0, args);
    }
  };
  /**
   * Does a shallow equality check of two objects by comparing the reference
   * equality of each value.
   */

  var shallowEqual$1 = function shallowEqual(objA, objB) {
    var aKeys = Object.keys(objA);
    var bKeys = Object.keys(objB);

    if (bKeys.length !== aKeys.length) {
      return false;
    }

    for (var i = 0; i < bKeys.length; i++) {
      var key = aKeys[i];

      if (objA[key] !== objB[key]) {
        return false;
      }
    }

    return true;
  };
  /**
   * Sets a ref using either a ref callback or a ref object
   */

  var setRef = function setRef(ref, node) {
    // if its a function call it
    if (typeof ref === "function") {
      return safeInvoke(ref, node);
    } // otherwise we should treat it as a ref object
    else if (ref != null) {
        ref.current = node;
      }
  };

  var initialStyle = {
    position: 'absolute',
    top: 0,
    left: 0,
    opacity: 0,
    pointerEvents: 'none'
  };
  var initialArrowStyle = {};
  var InnerPopper =
  /*#__PURE__*/
  function (_React$Component) {
    inheritsLoose(InnerPopper, _React$Component);

    function InnerPopper() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "state", {
        data: undefined,
        placement: undefined
      });

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "popperInstance", void 0);

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "popperNode", null);

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "arrowNode", null);

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "setPopperNode", function (popperNode) {
        if (!popperNode || _this.popperNode === popperNode) return;
        setRef(_this.props.innerRef, popperNode);
        _this.popperNode = popperNode;

        _this.updatePopperInstance();
      });

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "setArrowNode", function (arrowNode) {
        _this.arrowNode = arrowNode;
      });

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "updateStateModifier", {
        enabled: true,
        order: 900,
        fn: function fn(data) {
          var placement = data.placement;

          _this.setState({
            data: data,
            placement: placement
          });

          return data;
        }
      });

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "getOptions", function () {
        return {
          placement: _this.props.placement,
          eventsEnabled: _this.props.eventsEnabled,
          positionFixed: _this.props.positionFixed,
          modifiers: _extends_1({}, _this.props.modifiers, {
            arrow: _extends_1({}, _this.props.modifiers && _this.props.modifiers.arrow, {
              enabled: !!_this.arrowNode,
              element: _this.arrowNode
            }),
            applyStyle: {
              enabled: false
            },
            updateStateModifier: _this.updateStateModifier
          })
        };
      });

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "getPopperStyle", function () {
        return !_this.popperNode || !_this.state.data ? initialStyle : _extends_1({
          position: _this.state.data.offsets.popper.position
        }, _this.state.data.styles);
      });

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "getPopperPlacement", function () {
        return !_this.state.data ? undefined : _this.state.placement;
      });

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "getArrowStyle", function () {
        return !_this.arrowNode || !_this.state.data ? initialArrowStyle : _this.state.data.arrowStyles;
      });

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "getOutOfBoundariesState", function () {
        return _this.state.data ? _this.state.data.hide : undefined;
      });

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "destroyPopperInstance", function () {
        if (!_this.popperInstance) return;

        _this.popperInstance.destroy();

        _this.popperInstance = null;
      });

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "updatePopperInstance", function () {
        _this.destroyPopperInstance();

        var _assertThisInitialize = assertThisInitialized(assertThisInitialized(_this)),
            popperNode = _assertThisInitialize.popperNode;

        var referenceElement = _this.props.referenceElement;
        if (!referenceElement || !popperNode) return;
        _this.popperInstance = new Popper(referenceElement, popperNode, _this.getOptions());
      });

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "scheduleUpdate", function () {
        if (_this.popperInstance) {
          _this.popperInstance.scheduleUpdate();
        }
      });

      return _this;
    }

    var _proto = InnerPopper.prototype;

    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
      // If the Popper.js options have changed, update the instance (destroy + create)
      if (this.props.placement !== prevProps.placement || this.props.referenceElement !== prevProps.referenceElement || this.props.positionFixed !== prevProps.positionFixed || !deepEqual_1(this.props.modifiers, prevProps.modifiers, {
        strict: true
      })) {
        // develop only check that modifiers isn't being updated needlessly
        {
          if (this.props.modifiers !== prevProps.modifiers && this.props.modifiers != null && prevProps.modifiers != null && shallowEqual$1(this.props.modifiers, prevProps.modifiers)) {
            console.warn("'modifiers' prop reference updated even though all values appear the same.\nConsider memoizing the 'modifiers' object to avoid needless rendering.");
          }
        }

        this.updatePopperInstance();
      } else if (this.props.eventsEnabled !== prevProps.eventsEnabled && this.popperInstance) {
        this.props.eventsEnabled ? this.popperInstance.enableEventListeners() : this.popperInstance.disableEventListeners();
      } // A placement difference in state means popper determined a new placement
      // apart from the props value. By the time the popper element is rendered with
      // the new position Popper has already measured it, if the place change triggers
      // a size change it will result in a misaligned popper. So we schedule an update to be sure.


      if (prevState.placement !== this.state.placement) {
        this.scheduleUpdate();
      }
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      setRef(this.props.innerRef, null);
      this.destroyPopperInstance();
    };

    _proto.render = function render() {
      return unwrapArray(this.props.children)({
        ref: this.setPopperNode,
        style: this.getPopperStyle(),
        placement: this.getPopperPlacement(),
        outOfBoundaries: this.getOutOfBoundariesState(),
        scheduleUpdate: this.scheduleUpdate,
        arrowProps: {
          ref: this.setArrowNode,
          style: this.getArrowStyle()
        }
      });
    };

    return InnerPopper;
  }(React.Component);

  defineProperty$1(InnerPopper, "defaultProps", {
    placement: 'bottom',
    eventsEnabled: true,
    referenceElement: undefined,
    positionFixed: false
  });
  function Popper$1(_ref) {
    var referenceElement = _ref.referenceElement,
        props = objectWithoutPropertiesLoose(_ref, ["referenceElement"]);

    return React.createElement(ManagerReferenceNodeContext.Consumer, null, function (referenceNode) {
      return React.createElement(InnerPopper, _extends_1({
        referenceElement: referenceElement !== undefined ? referenceElement : referenceNode
      }, props));
    });
  }

  var InnerReference =
  /*#__PURE__*/
  function (_React$Component) {
    inheritsLoose(InnerReference, _React$Component);

    function InnerReference() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

      defineProperty$1(assertThisInitialized(assertThisInitialized(_this)), "refHandler", function (node) {
        setRef(_this.props.innerRef, node);
        safeInvoke(_this.props.setReferenceNode, node);
      });

      return _this;
    }

    var _proto = InnerReference.prototype;

    _proto.componentWillUnmount = function componentWillUnmount() {
      setRef(this.props.innerRef, null);
    };

    _proto.render = function render() {
      warning_1(Boolean(this.props.setReferenceNode), '`Reference` should not be used outside of a `Manager` component.');
      return unwrapArray(this.props.children)({
        ref: this.refHandler
      });
    };

    return InnerReference;
  }(React.Component);

  function Reference(props) {
    return React.createElement(ManagerReferenceNodeSetterContext.Consumer, null, function (setReferenceNode) {
      return React.createElement(InnerReference, _extends_1({
        setReferenceNode: setReferenceNode
      }, props));
    });
  }

  // Public components
   // Public types

  /**
   * A collection of shims that provide minimal functionality of the ES6 collections.
   *
   * These implementations are not meant to be used outside of the ResizeObserver
   * modules as they cover only a limited range of use cases.
   */
  /* eslint-disable require-jsdoc, valid-jsdoc */
  var MapShim = (function () {
      if (typeof Map !== 'undefined') {
          return Map;
      }
      /**
       * Returns index in provided array that matches the specified key.
       *
       * @param {Array<Array>} arr
       * @param {*} key
       * @returns {number}
       */
      function getIndex(arr, key) {
          var result = -1;
          arr.some(function (entry, index) {
              if (entry[0] === key) {
                  result = index;
                  return true;
              }
              return false;
          });
          return result;
      }
      return /** @class */ (function () {
          function class_1() {
              this.__entries__ = [];
          }
          Object.defineProperty(class_1.prototype, "size", {
              /**
               * @returns {boolean}
               */
              get: function () {
                  return this.__entries__.length;
              },
              enumerable: true,
              configurable: true
          });
          /**
           * @param {*} key
           * @returns {*}
           */
          class_1.prototype.get = function (key) {
              var index = getIndex(this.__entries__, key);
              var entry = this.__entries__[index];
              return entry && entry[1];
          };
          /**
           * @param {*} key
           * @param {*} value
           * @returns {void}
           */
          class_1.prototype.set = function (key, value) {
              var index = getIndex(this.__entries__, key);
              if (~index) {
                  this.__entries__[index][1] = value;
              }
              else {
                  this.__entries__.push([key, value]);
              }
          };
          /**
           * @param {*} key
           * @returns {void}
           */
          class_1.prototype.delete = function (key) {
              var entries = this.__entries__;
              var index = getIndex(entries, key);
              if (~index) {
                  entries.splice(index, 1);
              }
          };
          /**
           * @param {*} key
           * @returns {void}
           */
          class_1.prototype.has = function (key) {
              return !!~getIndex(this.__entries__, key);
          };
          /**
           * @returns {void}
           */
          class_1.prototype.clear = function () {
              this.__entries__.splice(0);
          };
          /**
           * @param {Function} callback
           * @param {*} [ctx=null]
           * @returns {void}
           */
          class_1.prototype.forEach = function (callback, ctx) {
              if (ctx === void 0) { ctx = null; }
              for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                  var entry = _a[_i];
                  callback.call(ctx, entry[1], entry[0]);
              }
          };
          return class_1;
      }());
  })();

  /**
   * Detects whether window and document objects are available in current environment.
   */
  var isBrowser$1 = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

  // Returns global object of a current environment.
  var global$1 = (function () {
      if (typeof global !== 'undefined' && global.Math === Math) {
          return global;
      }
      if (typeof self !== 'undefined' && self.Math === Math) {
          return self;
      }
      if (typeof window !== 'undefined' && window.Math === Math) {
          return window;
      }
      // eslint-disable-next-line no-new-func
      return Function('return this')();
  })();

  /**
   * A shim for the requestAnimationFrame which falls back to the setTimeout if
   * first one is not supported.
   *
   * @returns {number} Requests' identifier.
   */
  var requestAnimationFrame$1 = (function () {
      if (typeof requestAnimationFrame === 'function') {
          // It's required to use a bounded function because IE sometimes throws
          // an "Invalid calling object" error if rAF is invoked without the global
          // object on the left hand side.
          return requestAnimationFrame.bind(global$1);
      }
      return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
  })();

  // Defines minimum timeout before adding a trailing call.
  var trailingTimeout = 2;
  /**
   * Creates a wrapper function which ensures that provided callback will be
   * invoked only once during the specified delay period.
   *
   * @param {Function} callback - Function to be invoked after the delay period.
   * @param {number} delay - Delay after which to invoke callback.
   * @returns {Function}
   */
  function throttle$1 (callback, delay) {
      var leadingCall = false, trailingCall = false, lastCallTime = 0;
      /**
       * Invokes the original callback function and schedules new invocation if
       * the "proxy" was called during current request.
       *
       * @returns {void}
       */
      function resolvePending() {
          if (leadingCall) {
              leadingCall = false;
              callback();
          }
          if (trailingCall) {
              proxy();
          }
      }
      /**
       * Callback invoked after the specified delay. It will further postpone
       * invocation of the original function delegating it to the
       * requestAnimationFrame.
       *
       * @returns {void}
       */
      function timeoutCallback() {
          requestAnimationFrame$1(resolvePending);
      }
      /**
       * Schedules invocation of the original function.
       *
       * @returns {void}
       */
      function proxy() {
          var timeStamp = Date.now();
          if (leadingCall) {
              // Reject immediately following calls.
              if (timeStamp - lastCallTime < trailingTimeout) {
                  return;
              }
              // Schedule new call to be in invoked when the pending one is resolved.
              // This is important for "transitions" which never actually start
              // immediately so there is a chance that we might miss one if change
              // happens amids the pending invocation.
              trailingCall = true;
          }
          else {
              leadingCall = true;
              trailingCall = false;
              setTimeout(timeoutCallback, delay);
          }
          lastCallTime = timeStamp;
      }
      return proxy;
  }

  // Minimum delay before invoking the update of observers.
  var REFRESH_DELAY = 20;
  // A list of substrings of CSS properties used to find transition events that
  // might affect dimensions of observed elements.
  var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
  // Check if MutationObserver is available.
  var mutationObserverSupported = typeof MutationObserver !== 'undefined';
  /**
   * Singleton controller class which handles updates of ResizeObserver instances.
   */
  var ResizeObserverController = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserverController.
       *
       * @private
       */
      function ResizeObserverController() {
          /**
           * Indicates whether DOM listeners have been added.
           *
           * @private {boolean}
           */
          this.connected_ = false;
          /**
           * Tells that controller has subscribed for Mutation Events.
           *
           * @private {boolean}
           */
          this.mutationEventsAdded_ = false;
          /**
           * Keeps reference to the instance of MutationObserver.
           *
           * @private {MutationObserver}
           */
          this.mutationsObserver_ = null;
          /**
           * A list of connected observers.
           *
           * @private {Array<ResizeObserverSPI>}
           */
          this.observers_ = [];
          this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
          this.refresh = throttle$1(this.refresh.bind(this), REFRESH_DELAY);
      }
      /**
       * Adds observer to observers list.
       *
       * @param {ResizeObserverSPI} observer - Observer to be added.
       * @returns {void}
       */
      ResizeObserverController.prototype.addObserver = function (observer) {
          if (!~this.observers_.indexOf(observer)) {
              this.observers_.push(observer);
          }
          // Add listeners if they haven't been added yet.
          if (!this.connected_) {
              this.connect_();
          }
      };
      /**
       * Removes observer from observers list.
       *
       * @param {ResizeObserverSPI} observer - Observer to be removed.
       * @returns {void}
       */
      ResizeObserverController.prototype.removeObserver = function (observer) {
          var observers = this.observers_;
          var index = observers.indexOf(observer);
          // Remove observer if it's present in registry.
          if (~index) {
              observers.splice(index, 1);
          }
          // Remove listeners if controller has no connected observers.
          if (!observers.length && this.connected_) {
              this.disconnect_();
          }
      };
      /**
       * Invokes the update of observers. It will continue running updates insofar
       * it detects changes.
       *
       * @returns {void}
       */
      ResizeObserverController.prototype.refresh = function () {
          var changesDetected = this.updateObservers_();
          // Continue running updates if changes have been detected as there might
          // be future ones caused by CSS transitions.
          if (changesDetected) {
              this.refresh();
          }
      };
      /**
       * Updates every observer from observers list and notifies them of queued
       * entries.
       *
       * @private
       * @returns {boolean} Returns "true" if any observer has detected changes in
       *      dimensions of it's elements.
       */
      ResizeObserverController.prototype.updateObservers_ = function () {
          // Collect observers that have active observations.
          var activeObservers = this.observers_.filter(function (observer) {
              return observer.gatherActive(), observer.hasActive();
          });
          // Deliver notifications in a separate cycle in order to avoid any
          // collisions between observers, e.g. when multiple instances of
          // ResizeObserver are tracking the same element and the callback of one
          // of them changes content dimensions of the observed target. Sometimes
          // this may result in notifications being blocked for the rest of observers.
          activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
          return activeObservers.length > 0;
      };
      /**
       * Initializes DOM listeners.
       *
       * @private
       * @returns {void}
       */
      ResizeObserverController.prototype.connect_ = function () {
          // Do nothing if running in a non-browser environment or if listeners
          // have been already added.
          if (!isBrowser$1 || this.connected_) {
              return;
          }
          // Subscription to the "Transitionend" event is used as a workaround for
          // delayed transitions. This way it's possible to capture at least the
          // final state of an element.
          document.addEventListener('transitionend', this.onTransitionEnd_);
          window.addEventListener('resize', this.refresh);
          if (mutationObserverSupported) {
              this.mutationsObserver_ = new MutationObserver(this.refresh);
              this.mutationsObserver_.observe(document, {
                  attributes: true,
                  childList: true,
                  characterData: true,
                  subtree: true
              });
          }
          else {
              document.addEventListener('DOMSubtreeModified', this.refresh);
              this.mutationEventsAdded_ = true;
          }
          this.connected_ = true;
      };
      /**
       * Removes DOM listeners.
       *
       * @private
       * @returns {void}
       */
      ResizeObserverController.prototype.disconnect_ = function () {
          // Do nothing if running in a non-browser environment or if listeners
          // have been already removed.
          if (!isBrowser$1 || !this.connected_) {
              return;
          }
          document.removeEventListener('transitionend', this.onTransitionEnd_);
          window.removeEventListener('resize', this.refresh);
          if (this.mutationsObserver_) {
              this.mutationsObserver_.disconnect();
          }
          if (this.mutationEventsAdded_) {
              document.removeEventListener('DOMSubtreeModified', this.refresh);
          }
          this.mutationsObserver_ = null;
          this.mutationEventsAdded_ = false;
          this.connected_ = false;
      };
      /**
       * "Transitionend" event handler.
       *
       * @private
       * @param {TransitionEvent} event
       * @returns {void}
       */
      ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
          var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
          // Detect whether transition may affect dimensions of an element.
          var isReflowProperty = transitionKeys.some(function (key) {
              return !!~propertyName.indexOf(key);
          });
          if (isReflowProperty) {
              this.refresh();
          }
      };
      /**
       * Returns instance of the ResizeObserverController.
       *
       * @returns {ResizeObserverController}
       */
      ResizeObserverController.getInstance = function () {
          if (!this.instance_) {
              this.instance_ = new ResizeObserverController();
          }
          return this.instance_;
      };
      /**
       * Holds reference to the controller's instance.
       *
       * @private {ResizeObserverController}
       */
      ResizeObserverController.instance_ = null;
      return ResizeObserverController;
  }());

  /**
   * Defines non-writable/enumerable properties of the provided target object.
   *
   * @param {Object} target - Object for which to define properties.
   * @param {Object} props - Properties to be defined.
   * @returns {Object} Target object.
   */
  var defineConfigurable = (function (target, props) {
      for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
          var key = _a[_i];
          Object.defineProperty(target, key, {
              value: props[key],
              enumerable: false,
              writable: false,
              configurable: true
          });
      }
      return target;
  });

  /**
   * Returns the global object associated with provided element.
   *
   * @param {Object} target
   * @returns {Object}
   */
  var getWindowOf = (function (target) {
      // Assume that the element is an instance of Node, which means that it
      // has the "ownerDocument" property from which we can retrieve a
      // corresponding global object.
      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
      // Return the local global object if it's not possible extract one from
      // provided element.
      return ownerGlobal || global$1;
  });

  // Placeholder of an empty content rectangle.
  var emptyRect = createRectInit(0, 0, 0, 0);
  /**
   * Converts provided string to a number.
   *
   * @param {number|string} value
   * @returns {number}
   */
  function toFloat(value) {
      return parseFloat(value) || 0;
  }
  /**
   * Extracts borders size from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @param {...string} positions - Borders positions (top, right, ...)
   * @returns {number}
   */
  function getBordersSize$1(styles) {
      var positions = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          positions[_i - 1] = arguments[_i];
      }
      return positions.reduce(function (size, position) {
          var value = styles['border-' + position + '-width'];
          return size + toFloat(value);
      }, 0);
  }
  /**
   * Extracts paddings sizes from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @returns {Object} Paddings box.
   */
  function getPaddings(styles) {
      var positions = ['top', 'right', 'bottom', 'left'];
      var paddings = {};
      for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
          var position = positions_1[_i];
          var value = styles['padding-' + position];
          paddings[position] = toFloat(value);
      }
      return paddings;
  }
  /**
   * Calculates content rectangle of provided SVG element.
   *
   * @param {SVGGraphicsElement} target - Element content rectangle of which needs
   *      to be calculated.
   * @returns {DOMRectInit}
   */
  function getSVGContentRect(target) {
      var bbox = target.getBBox();
      return createRectInit(0, 0, bbox.width, bbox.height);
  }
  /**
   * Calculates content rectangle of provided HTMLElement.
   *
   * @param {HTMLElement} target - Element for which to calculate the content rectangle.
   * @returns {DOMRectInit}
   */
  function getHTMLElementContentRect(target) {
      // Client width & height properties can't be
      // used exclusively as they provide rounded values.
      var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
      // By this condition we can catch all non-replaced inline, hidden and
      // detached elements. Though elements with width & height properties less
      // than 0.5 will be discarded as well.
      //
      // Without it we would need to implement separate methods for each of
      // those cases and it's not possible to perform a precise and performance
      // effective test for hidden elements. E.g. even jQuery's ':visible' filter
      // gives wrong results for elements with width & height less than 0.5.
      if (!clientWidth && !clientHeight) {
          return emptyRect;
      }
      var styles = getWindowOf(target).getComputedStyle(target);
      var paddings = getPaddings(styles);
      var horizPad = paddings.left + paddings.right;
      var vertPad = paddings.top + paddings.bottom;
      // Computed styles of width & height are being used because they are the
      // only dimensions available to JS that contain non-rounded values. It could
      // be possible to utilize the getBoundingClientRect if only it's data wasn't
      // affected by CSS transformations let alone paddings, borders and scroll bars.
      var width = toFloat(styles.width), height = toFloat(styles.height);
      // Width & height include paddings and borders when the 'border-box' box
      // model is applied (except for IE).
      if (styles.boxSizing === 'border-box') {
          // Following conditions are required to handle Internet Explorer which
          // doesn't include paddings and borders to computed CSS dimensions.
          //
          // We can say that if CSS dimensions + paddings are equal to the "client"
          // properties then it's either IE, and thus we don't need to subtract
          // anything, or an element merely doesn't have paddings/borders styles.
          if (Math.round(width + horizPad) !== clientWidth) {
              width -= getBordersSize$1(styles, 'left', 'right') + horizPad;
          }
          if (Math.round(height + vertPad) !== clientHeight) {
              height -= getBordersSize$1(styles, 'top', 'bottom') + vertPad;
          }
      }
      // Following steps can't be applied to the document's root element as its
      // client[Width/Height] properties represent viewport area of the window.
      // Besides, it's as well not necessary as the <html> itself neither has
      // rendered scroll bars nor it can be clipped.
      if (!isDocumentElement(target)) {
          // In some browsers (only in Firefox, actually) CSS width & height
          // include scroll bars size which can be removed at this step as scroll
          // bars are the only difference between rounded dimensions + paddings
          // and "client" properties, though that is not always true in Chrome.
          var vertScrollbar = Math.round(width + horizPad) - clientWidth;
          var horizScrollbar = Math.round(height + vertPad) - clientHeight;
          // Chrome has a rather weird rounding of "client" properties.
          // E.g. for an element with content width of 314.2px it sometimes gives
          // the client width of 315px and for the width of 314.7px it may give
          // 314px. And it doesn't happen all the time. So just ignore this delta
          // as a non-relevant.
          if (Math.abs(vertScrollbar) !== 1) {
              width -= vertScrollbar;
          }
          if (Math.abs(horizScrollbar) !== 1) {
              height -= horizScrollbar;
          }
      }
      return createRectInit(paddings.left, paddings.top, width, height);
  }
  /**
   * Checks whether provided element is an instance of the SVGGraphicsElement.
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */
  var isSVGGraphicsElement = (function () {
      // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
      // interface.
      if (typeof SVGGraphicsElement !== 'undefined') {
          return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
      }
      // If it's so, then check that element is at least an instance of the
      // SVGElement and that it has the "getBBox" method.
      // eslint-disable-next-line no-extra-parens
      return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
          typeof target.getBBox === 'function'); };
  })();
  /**
   * Checks whether provided element is a document element (<html>).
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */
  function isDocumentElement(target) {
      return target === getWindowOf(target).document.documentElement;
  }
  /**
   * Calculates an appropriate content rectangle for provided html or svg element.
   *
   * @param {Element} target - Element content rectangle of which needs to be calculated.
   * @returns {DOMRectInit}
   */
  function getContentRect(target) {
      if (!isBrowser$1) {
          return emptyRect;
      }
      if (isSVGGraphicsElement(target)) {
          return getSVGContentRect(target);
      }
      return getHTMLElementContentRect(target);
  }
  /**
   * Creates rectangle with an interface of the DOMRectReadOnly.
   * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
   *
   * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
   * @returns {DOMRectReadOnly}
   */
  function createReadOnlyRect(_a) {
      var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
      // If DOMRectReadOnly is available use it as a prototype for the rectangle.
      var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
      var rect = Object.create(Constr.prototype);
      // Rectangle's properties are not writable and non-enumerable.
      defineConfigurable(rect, {
          x: x, y: y, width: width, height: height,
          top: y,
          right: x + width,
          bottom: height + y,
          left: x
      });
      return rect;
  }
  /**
   * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
   * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
   *
   * @param {number} x - X coordinate.
   * @param {number} y - Y coordinate.
   * @param {number} width - Rectangle's width.
   * @param {number} height - Rectangle's height.
   * @returns {DOMRectInit}
   */
  function createRectInit(x, y, width, height) {
      return { x: x, y: y, width: width, height: height };
  }

  /**
   * Class that is responsible for computations of the content rectangle of
   * provided DOM element and for keeping track of it's changes.
   */
  var ResizeObservation = /** @class */ (function () {
      /**
       * Creates an instance of ResizeObservation.
       *
       * @param {Element} target - Element to be observed.
       */
      function ResizeObservation(target) {
          /**
           * Broadcasted width of content rectangle.
           *
           * @type {number}
           */
          this.broadcastWidth = 0;
          /**
           * Broadcasted height of content rectangle.
           *
           * @type {number}
           */
          this.broadcastHeight = 0;
          /**
           * Reference to the last observed content rectangle.
           *
           * @private {DOMRectInit}
           */
          this.contentRect_ = createRectInit(0, 0, 0, 0);
          this.target = target;
      }
      /**
       * Updates content rectangle and tells whether it's width or height properties
       * have changed since the last broadcast.
       *
       * @returns {boolean}
       */
      ResizeObservation.prototype.isActive = function () {
          var rect = getContentRect(this.target);
          this.contentRect_ = rect;
          return (rect.width !== this.broadcastWidth ||
              rect.height !== this.broadcastHeight);
      };
      /**
       * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
       * from the corresponding properties of the last observed content rectangle.
       *
       * @returns {DOMRectInit} Last observed content rectangle.
       */
      ResizeObservation.prototype.broadcastRect = function () {
          var rect = this.contentRect_;
          this.broadcastWidth = rect.width;
          this.broadcastHeight = rect.height;
          return rect;
      };
      return ResizeObservation;
  }());

  var ResizeObserverEntry = /** @class */ (function () {
      /**
       * Creates an instance of ResizeObserverEntry.
       *
       * @param {Element} target - Element that is being observed.
       * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
       */
      function ResizeObserverEntry(target, rectInit) {
          var contentRect = createReadOnlyRect(rectInit);
          // According to the specification following properties are not writable
          // and are also not enumerable in the native implementation.
          //
          // Property accessors are not being used as they'd require to define a
          // private WeakMap storage which may cause memory leaks in browsers that
          // don't support this type of collections.
          defineConfigurable(this, { target: target, contentRect: contentRect });
      }
      return ResizeObserverEntry;
  }());

  var ResizeObserverSPI = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserver.
       *
       * @param {ResizeObserverCallback} callback - Callback function that is invoked
       *      when one of the observed elements changes it's content dimensions.
       * @param {ResizeObserverController} controller - Controller instance which
       *      is responsible for the updates of observer.
       * @param {ResizeObserver} callbackCtx - Reference to the public
       *      ResizeObserver instance which will be passed to callback function.
       */
      function ResizeObserverSPI(callback, controller, callbackCtx) {
          /**
           * Collection of resize observations that have detected changes in dimensions
           * of elements.
           *
           * @private {Array<ResizeObservation>}
           */
          this.activeObservations_ = [];
          /**
           * Registry of the ResizeObservation instances.
           *
           * @private {Map<Element, ResizeObservation>}
           */
          this.observations_ = new MapShim();
          if (typeof callback !== 'function') {
              throw new TypeError('The callback provided as parameter 1 is not a function.');
          }
          this.callback_ = callback;
          this.controller_ = controller;
          this.callbackCtx_ = callbackCtx;
      }
      /**
       * Starts observing provided element.
       *
       * @param {Element} target - Element to be observed.
       * @returns {void}
       */
      ResizeObserverSPI.prototype.observe = function (target) {
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          // Do nothing if current environment doesn't have the Element interface.
          if (typeof Element === 'undefined' || !(Element instanceof Object)) {
              return;
          }
          if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
          }
          var observations = this.observations_;
          // Do nothing if element is already being observed.
          if (observations.has(target)) {
              return;
          }
          observations.set(target, new ResizeObservation(target));
          this.controller_.addObserver(this);
          // Force the update of observations.
          this.controller_.refresh();
      };
      /**
       * Stops observing provided element.
       *
       * @param {Element} target - Element to stop observing.
       * @returns {void}
       */
      ResizeObserverSPI.prototype.unobserve = function (target) {
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          // Do nothing if current environment doesn't have the Element interface.
          if (typeof Element === 'undefined' || !(Element instanceof Object)) {
              return;
          }
          if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
          }
          var observations = this.observations_;
          // Do nothing if element is not being observed.
          if (!observations.has(target)) {
              return;
          }
          observations.delete(target);
          if (!observations.size) {
              this.controller_.removeObserver(this);
          }
      };
      /**
       * Stops observing all elements.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.disconnect = function () {
          this.clearActive();
          this.observations_.clear();
          this.controller_.removeObserver(this);
      };
      /**
       * Collects observation instances the associated element of which has changed
       * it's content rectangle.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.gatherActive = function () {
          var _this = this;
          this.clearActive();
          this.observations_.forEach(function (observation) {
              if (observation.isActive()) {
                  _this.activeObservations_.push(observation);
              }
          });
      };
      /**
       * Invokes initial callback function with a list of ResizeObserverEntry
       * instances collected from active resize observations.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.broadcastActive = function () {
          // Do nothing if observer doesn't have active observations.
          if (!this.hasActive()) {
              return;
          }
          var ctx = this.callbackCtx_;
          // Create ResizeObserverEntry instance for every active observation.
          var entries = this.activeObservations_.map(function (observation) {
              return new ResizeObserverEntry(observation.target, observation.broadcastRect());
          });
          this.callback_.call(ctx, entries, ctx);
          this.clearActive();
      };
      /**
       * Clears the collection of active observations.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.clearActive = function () {
          this.activeObservations_.splice(0);
      };
      /**
       * Tells whether observer has active observations.
       *
       * @returns {boolean}
       */
      ResizeObserverSPI.prototype.hasActive = function () {
          return this.activeObservations_.length > 0;
      };
      return ResizeObserverSPI;
  }());

  // Registry of internal observers. If WeakMap is not available use current shim
  // for the Map collection as it has all required methods and because WeakMap
  // can't be fully polyfilled anyway.
  var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
  /**
   * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
   * exposing only those methods and properties that are defined in the spec.
   */
  var ResizeObserver = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserver.
       *
       * @param {ResizeObserverCallback} callback - Callback that is invoked when
       *      dimensions of the observed elements change.
       */
      function ResizeObserver(callback) {
          if (!(this instanceof ResizeObserver)) {
              throw new TypeError('Cannot call a class as a function.');
          }
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          var controller = ResizeObserverController.getInstance();
          var observer = new ResizeObserverSPI(callback, controller, this);
          observers.set(this, observer);
      }
      return ResizeObserver;
  }());
  // Expose public methods of ResizeObserver.
  [
      'observe',
      'unobserve',
      'disconnect'
  ].forEach(function (method) {
      ResizeObserver.prototype[method] = function () {
          var _a;
          return (_a = observers.get(this))[method].apply(_a, arguments);
      };
  });

  var index$1 = (function () {
      // Export existing implementation if available.
      if (typeof global$1.ResizeObserver !== 'undefined') {
          return global$1.ResizeObserver;
      }
      return ResizeObserver;
  })();

  var styles$r = { "dropdown": "lc-dropdown", "dropdown--visible": "lc-dropdown--visible", "dropdown__list": "lc-dropdown__list", "dropdown__arrow": "lc-dropdown__arrow", "dropdown__list-item": "lc-dropdown__list-item", "dropdown__list-item__icon": "lc-dropdown__list-item__icon", "dropdown__list-item__content": "lc-dropdown__list-item__content", "dropdown__list-item__title": "lc-dropdown__list-item__title", "dropdown__list-item--focused": "lc-dropdown__list-item--focused", "dropdown__list-item__checkmark": "lc-dropdown__list-item__checkmark", "dropdown__list-item--selected": "lc-dropdown__list-item--selected", "dropdown__list-item--disabled": "lc-dropdown__list-item--disabled", "dropdown__list-item--with-divider": "lc-dropdown__list-item--with-divider" };

  var cx$w = bind.bind(styles$r);

  var Dropdown = function (_React$PureComponent) {
    inherits(Dropdown, _React$PureComponent);

    function Dropdown() {
      var _temp, _this, _ret;

      classCallCheck(this, Dropdown);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.getModifiers = index(Dropdown.buildPopperModifiers), _this.setPopupRef = function (ref) {
        _this.popupRef = ref;
      }, _this.setTriggerRef = function (ref) {
        _this.triggerRef = ref;
      }, _this.setTriggerRef = function (ref) {
        _this.triggerRef = ref;
      }, _this.handleDocumentClick = function (event) {
        if (_this.props.isVisible && _this.props.onClose && _this.popupRef && _this.triggerRef && !_this.popupRef.contains(event.target) && !_this.triggerRef.contains(event.target)) {
          _this.props.onClose();
        }
      }, _this.handleKeyDown = function (event) {
        var keyCode = event.keyCode;
        var _this$props = _this.props,
            closeKeyCodes = _this$props.closeKeyCodes,
            closeOnEnterPress = _this$props.closeOnEnterPress,
            closeOnEscPress = _this$props.closeOnEscPress,
            onClose = _this$props.onClose;


        if (onClose) {
          var isEscKeyPressed = keyCode === KeyCodes.esc;
          var isEnterKeyPressed = keyCode === KeyCodes.enter;
          var isCustomCloseKeyPressed = closeKeyCodes && closeKeyCodes.includes(keyCode);

          if (closeOnEscPress && isEscKeyPressed || closeOnEnterPress && isEnterKeyPressed || isCustomCloseKeyPressed) {
            onClose();
            if (_this.triggerRef) {
              _this.triggerRef.focus();
            }
          }
        }
      }, _this.attachResizeObserver = function () {
        // to boost component performance resize observer should be optional
        if (_this.props.shouldUpdateOnResize && _this.popupRef) {
          _this.observer = new index$1(function () {
            if (_this.popperScheduleUpdate) {
              _this.popperScheduleUpdate();
            }
          });
          _this.observer.observe(_this.popupRef);
        }
      }, _this.detachResizeObserver = function () {
        if (_this.observer) {
          _this.observer.disconnect();
        }
      }, _this.addEventHandlers = function () {
        document.addEventListener('keydown', _this.handleKeyDown, true);
        document.addEventListener('click', _this.handleDocumentClick);
      }, _this.removeEventHandlers = function () {
        document.removeEventListener('keydown', _this.handleKeyDown, true);
        document.removeEventListener('click', _this.handleDocumentClick);
      }, _this.renderDropdownContent = function (_ref) {
        var ref = _ref.ref,
            style = _ref.style,
            placement = _ref.placement,
            arrowProps = _ref.arrowProps,
            scheduleUpdate = _ref.scheduleUpdate;
        var _this$props2 = _this.props,
            className = _this$props2.className,
            isVisible = _this$props2.isVisible,
            zIndex = _this$props2.zIndex,
            children = _this$props2.children,
            modifiers = _this$props2.modifiers;

        var mergedClassNames = getMergedClassNames(cx$w({
          dropdown: true,
          'dropdown--visible': isVisible
        }), className);

        var computedModifiers = _this.getModifiers(modifiers);

        // updating `popperScheduleUpdate` reference used in resize observer
        _this.popperScheduleUpdate = scheduleUpdate;

        return React.createElement(
          'div',
          {
            ref: ref,
            tabIndex: 0,
            style: _extends({}, style, { zIndex: zIndex }),
            'data-placement': placement,
            className: mergedClassNames
          },
          children,
          computedModifiers.arrow.enabled && React.createElement('div', {
            ref: arrowProps.ref,
            className: styles$r.dropdown__arrow,
            'data-placement': placement,
            style: arrowProps.style
          })
        );
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    Dropdown.buildPopperModifiers = function buildPopperModifiers(modifiers) {
      var offset = modifiers.offset,
          flip = modifiers.flip,
          hide = modifiers.hide,
          preventOverflow = modifiers.preventOverflow,
          arrow = modifiers.arrow,
          rest = objectWithoutProperties(modifiers, ['offset', 'flip', 'hide', 'preventOverflow', 'arrow']);

      return _extends({
        offset: _extends({
          offset: (arrow || {}).enabled ? '0, 12' : '0, 4'
        }, offset || {}),
        flip: _extends({ enabled: true, behavior: 'flip' }, flip || {}),
        arrow: _extends({ enabled: false }, arrow || {}),
        hide: _extends({ enabled: true }, hide || {}),
        preventOverflow: _extends({
          enabled: true,
          escapeWithReference: true,
          boundariesElement: 'viewport'
        }, preventOverflow || {})
      }, rest);
    };

    Dropdown.prototype.componentDidMount = function componentDidMount() {
      if (this.props.isVisible) {
        this.addEventHandlers();
        this.attachResizeObserver();
      }
    };

    Dropdown.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
      var isShown = !prevProps.isVisible && this.props.isVisible;
      var isHidden = prevProps.isVisible && !this.props.isVisible;

      if (isShown) {
        this.addEventHandlers();
        this.attachResizeObserver();
        if (this.popupRef) {
          this.popupRef.focus({ preventScroll: true });
        }
      }

      if (isHidden) {
        this.removeEventHandlers();
        this.detachResizeObserver();
      }
    };

    Dropdown.prototype.componentWillUnmount = function componentWillUnmount() {
      this.removeEventHandlers();
      this.detachResizeObserver();
    };

    Dropdown.prototype.render = function render() {
      var _props = this.props,
          placement = _props.placement,
          triggerRenderer = _props.triggerRenderer,
          eventsEnabled = _props.eventsEnabled,
          positionFixed = _props.positionFixed,
          referenceElement = _props.referenceElement,
          isVisible = _props.isVisible;


      var computedModifiers = this.getModifiers(this.props.modifiers);

      return React.createElement(
        Manager,
        null,
        triggerRenderer && React.createElement(
          Reference,
          { innerRef: this.setTriggerRef },
          triggerRenderer
        ),
        isVisible && React.createElement(
          Popper$1,
          {
            innerRef: this.setPopupRef,
            placement: placement,
            modifiers: computedModifiers,
            eventsEnabled: eventsEnabled,
            positionFixed: positionFixed,
            referenceElement: referenceElement
          },
          this.renderDropdownContent
        )
      );
    };

    return Dropdown;
  }(React.PureComponent);

  Dropdown.propTypes = {
    children: propTypes_13,
    className: propTypes_6,
    closeOnEscPress: propTypes_2,
    closeOnEnterPress: propTypes_2,
    /**
     * you can specify which key press should trigger Dropdown close
     */
    closeKeyCodes: propTypes_9(propTypes_4),
    eventsEnabled: propTypes_2,
    isVisible: propTypes_2.isRequired,
    modifiers: propTypes_5,
    placement: propTypes_15(['auto', 'auto-end', 'auto-start', 'bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', 'right', 'right-end', 'right-start', 'top', 'top-end', 'top-start']),
    positionFixed: propTypes_2,
    referenceElement: propTypes_17({
      clientWidth: propTypes_4.isRequired,
      clientHeight: propTypes_4.isRequired
    }),
    /**
     * Pass `true` when it's possible that content of your dropdown will resize
     * (e.g removing list items on select)
     */
    shouldUpdateOnResize: propTypes_2,
    triggerRenderer: propTypes_3,
    zIndex: propTypes_4,
    onClose: propTypes_3
  };

  Dropdown.defaultProps = {
    modifiers: {},
    zIndex: 20,
    closeOnEscPress: true,
    closeOnEnterPress: false,
    placement: 'bottom-start',
    shouldUpdateOnResize: false
  };

  var cx$x = bind.bind(styles$r);

  var baseClass$J = 'dropdown__list-item';

  var DropdownListItem = function (_React$PureComponent) {
    inherits(DropdownListItem, _React$PureComponent);

    function DropdownListItem() {
      var _temp, _this, _ret;

      classCallCheck(this, DropdownListItem);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.handleClick = function (event) {
        if (!_this.props.isDisabled && _this.props.onItemSelect) {
          event.nativeEvent.stopImmediatePropagation();
          _this.props.onItemSelect(_this.props.itemId, event);
        }
        if (_this.props.onClick) {
          _this.props.onClick(event);
        }
      }, _this.handleMouseOver = function (event) {
        if (!_this.props.isDisabled && _this.props.onMouseOverItem) {
          _this.props.onMouseOverItem(_this.props.itemId);
        }
        if (_this.props.onMouseOver) {
          _this.props.onMouseOver(event);
        }
      }, _this.handleMouseDown = function (event) {
        event.preventDefault();
        if (_this.props.onMouseDown) {
          _this.props.onMouseDown(event);
        }
        return false;
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    DropdownListItem.prototype.render = function render() {
      var _cx;

      var _props = this.props,
          className = _props.className,
          icon = _props.icon,
          itemId = _props.itemId,
          children = _props.children,
          isFocused = _props.isFocused,
          isSelected = _props.isSelected,
          onItemSelect = _props.onItemSelect,
          isDisabled = _props.isDisabled,
          onMouseOverItem = _props.onMouseOverItem,
          divider = _props.divider,
          restProps = objectWithoutProperties(_props, ['className', 'icon', 'itemId', 'children', 'isFocused', 'isSelected', 'onItemSelect', 'isDisabled', 'onMouseOverItem', 'divider']);


      var mergedClassNames = getMergedClassNames(cx$x((_cx = {}, _cx['' + baseClass$J] = true, _cx[baseClass$J + '--selected'] = isSelected, _cx[baseClass$J + '--focused'] = isFocused && !isDisabled, _cx[baseClass$J + '--disabled'] = isDisabled, _cx[baseClass$J + '--with-divider'] = divider, _cx)), className);

      return React.createElement(
        'li',
        _extends({}, restProps, {
          className: mergedClassNames,
          onClick: this.handleClick,
          onMouseOver: this.handleMouseOver,
          onMouseDown: this.handleMouseDown
        }),
        React.createElement(
          'div',
          { className: styles$r[baseClass$J + '__content'] },
          icon && React.createElement(
            'div',
            { className: styles$r[baseClass$J + '__icon'] },
            icon
          ),
          React.createElement(
            'div',
            { className: styles$r[baseClass$J + '__title'] },
            children
          )
        ),
        isSelected && React.createElement(CheckIcon, {
          width: '15px',
          height: '15px',
          className: styles$r[baseClass$J + '__checkmark']
        })
      );
    };

    return DropdownListItem;
  }(React.PureComponent);

  DropdownListItem.propTypes = {
    children: propTypes_13.isRequired,
    className: propTypes_6,
    icon: propTypes_13,
    itemId: propTypes_16([propTypes_6, propTypes_4]).isRequired,
    isFocused: propTypes_2,
    isSelected: propTypes_2,
    divider: propTypes_2,
    isDisabled: propTypes_2,
    onItemSelect: propTypes_3,
    onClick: propTypes_3,
    onMouseOver: propTypes_3,
    onMouseOverItem: propTypes_3,
    onMouseDown: propTypes_3
  };

  var findNextFocusableItem = function findNextFocusableItem(items, focusedItemId, keyCode) {
    if (keyCode !== KeyCodes.arrowUp && keyCode !== KeyCodes.arrowDown) {
      return undefined;
    }

    var currentItemIndex = items.map(function (item) {
      return item.itemId;
    }).indexOf(focusedItemId);

    var reorderedItems = currentItemIndex === -1 ? items : [].concat(items.slice(currentItemIndex, items.lenght), items.slice(0, currentItemIndex));

    var activeItems = reorderedItems.filter(function (item) {
      return !item.isDisabled && item.itemId !== focusedItemId;
    });

    if (keyCode === KeyCodes.arrowUp) {
      activeItems = activeItems.reverse();
    }

    return activeItems[0];
  };

  function getFirstFocusableItemId(items) {
    var focusableItem = items.find(function (item) {
      return !item.isDisabled;
    });

    if (!focusableItem) {
      return null;
    }
    return focusableItem.itemId;
  }

  var baseClass$K = 'dropdown';

  var DropdownList = function (_React$PureComponent) {
    inherits(DropdownList, _React$PureComponent);

    function DropdownList(props) {
      classCallCheck(this, DropdownList);

      var _this = possibleConstructorReturn(this, _React$PureComponent.call(this, props));

      _this.onKeydown = function (event) {
        var keyCode = event.keyCode;


        if (keyCode === KeyCodes.arrowDown || keyCode === KeyCodes.arrowUp) {
          _this.handleArrowKeyUse(event);
        }

        if (_this.isItemSelectKeyCode(keyCode)) {
          event.preventDefault();
          _this.handleSelectKeyUse(event);
        }
      };

      _this.getFocusedItemCallback = function (itemKey) {
        if (!_this.hoverCallbacks[itemKey]) {
          _this.hoverCallbacks[itemKey] = function () {
            if (!_this.isHoverDisabled) {
              _this.changeFocusedElement(itemKey);
            }
          };
        }

        return _this.hoverCallbacks[itemKey];
      };

      _this.handleSelectKeyUse = function (event) {
        var focusedElement = _this.state.focusedElement;


        if (focusedElement !== null) {
          var selectedItem = _this.props.items.find(function (item) {
            return item.itemId === focusedElement;
          });

          if (selectedItem && selectedItem.onItemSelect) {
            selectedItem.onItemSelect(selectedItem.itemId, event);
          }
        }
      };

      _this.handleArrowKeyUse = function (event) {
        event.preventDefault();
        var keyCode = event.keyCode;
        var items = _this.props.items;


        var nextItem = findNextFocusableItem(items, _this.state.focusedElement, keyCode);

        if (nextItem) {
          _this.changeFocusedElement(nextItem.itemId);
          _this.scrollItems();
        }
      };

      _this.handleListScroll = function (event) {
        event.preventDefault();
        if (_this.props.onScroll) {
          _this.props.onScroll(event);
        }
        _this.enableHoverOnItems(150);
      };

      _this.changeFocusedElement = function (id) {
        _this.setState({
          focusedElement: id
        }, function () {
          var focusedItem = _this.props.items.find(function (item) {
            return item.itemId === id;
          });

          if (focusedItem && focusedItem.onItemFocus) {
            focusedItem.onItemFocus(focusedItem.itemdId);
          }
        });
      };

      _this.isItemSelectKeyCode = function (keyCode) {
        var itemSelectKeyCodes = _this.props.itemSelectKeyCodes;


        if (itemSelectKeyCodes && itemSelectKeyCodes.includes(keyCode)) {
          return true;
        }

        return false;
      };

      _this.scrollItems = function () {
        if (!_this.listRef.current) {
          return;
        }
        var focusedElement = _this.listRef.current.querySelector('.lc-' + baseClass$K + '__list-item--focused');

        if (focusedElement) {
          _this.isHoverDisabled = true;

          var _this$listRef$current = _this.listRef.current.getBoundingClientRect(),
              ulHeight = _this$listRef$current.height,
              ulTop = _this$listRef$current.top;

          var _focusedElement$getBo = focusedElement.getBoundingClientRect(),
              itemHeigth = _focusedElement$getBo.height,
              itemTop = _focusedElement$getBo.top;

          var relativeTop = itemTop + itemHeigth - ulTop;
          var itemOfsetTop = focusedElement.offsetTop;

          if (relativeTop > ulHeight) {
            _this.listRef.current.scrollTop = itemOfsetTop - ulHeight + itemHeigth;
          } else if (itemTop < ulTop) {
            _this.listRef.current.scrollTop = itemOfsetTop - itemOfsetTop % itemHeigth;
          }
        }

        _this.enableHoverOnItems(150);
      };

      _this.isHoverDisabled = false;
      _this.hoverEnablerTimeout = null;
      _this.hoverCallbacks = [];
      _this.listRef = React.createRef();


      _this.state = {
        focusedElement: _this.props.autoFocusedItemId || getFirstFocusableItemId(props.items),
        itemsCount: props.items.length
      };
      return _this;
    }

    DropdownList.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      if (props.autoFocusOnItemsCountChange && props.items.length !== state.itemsCount) {
        return {
          focusedElement: getFirstFocusableItemId(props.items),
          itemsCount: props.items.length
        };
      }
      return null;
    };

    DropdownList.prototype.componentDidMount = function componentDidMount() {
      if (this.props.keyboardEventsEnabled) {
        document.addEventListener('keydown', this.onKeydown);
      }

      if (this.props.autoFocusedItemId) {
        this.scrollItems();
      }
    };

    DropdownList.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
      var eventsEnabled = !prevProps.keyboardEventsEnabled && this.props.keyboardEventsEnabled;
      var eventsDisabled = prevProps.keyboardEventsEnabled && !this.props.keyboardEventsEnabled;

      if (eventsEnabled) {
        document.addEventListener('keydown', this.onKeydown);
      } else if (eventsDisabled) {
        document.removeEventListener('keydown', this.onKeydown);
      }
    };

    DropdownList.prototype.componentWillUnmount = function componentWillUnmount() {
      if (this.hoverEnablerTimeout) {
        clearTimeout(this.hoverEnablerTimeout);
      }
      document.removeEventListener('keydown', this.onKeydown);
    };

    DropdownList.prototype.enableHoverOnItems = function enableHoverOnItems(delayInMs) {
      var _this2 = this;

      if (this.hoverEnablerTimeout) {
        clearTimeout(this.hoverEnablerTimeout);
      }

      if (delayInMs) {
        this.hoverEnablerTimeout = setTimeout(function () {
          _this2.isHoverDisabled = false;
        }, delayInMs);
      } else {
        this.isHoverDisabled = false;
      }
    };

    DropdownList.prototype.render = function render() {
      var _this3 = this;

      var _props = this.props,
          className = _props.className,
          items = _props.items,
          getItemBody = _props.getItemBody,
          itemSelectKeyCodes = _props.itemSelectKeyCodes,
          autoFocusOnItemsCountChange = _props.autoFocusOnItemsCountChange,
          keyboardEventsEnabled = _props.keyboardEventsEnabled,
          restProps = objectWithoutProperties(_props, ['className', 'items', 'getItemBody', 'itemSelectKeyCodes', 'autoFocusOnItemsCountChange', 'keyboardEventsEnabled']);


      var mergedClassNames = getMergedClassNames(styles$r[baseClass$K + '__list'], className);

      return React.createElement(
        'ul',
        _extends({
          className: mergedClassNames,
          tabIndex: 0,
          onScroll: this.handleListScroll,
          ref: this.listRef
        }, restProps),
        items.map(function (_ref) {
          var content = _ref.content,
              itemId = _ref.itemId,
              props = _ref.props,
              onItemFocus = _ref.onItemFocus,
              itemRestProps = objectWithoutProperties(_ref, ['content', 'itemId', 'props', 'onItemFocus']);

          var itemProps = _extends({}, itemRestProps, {
            itemId: itemId,
            isFocused: _this3.state.focusedElement === itemId,
            onMouseOverItem: _this3.getFocusedItemCallback(itemId)
          });

          if (_this3.props.getItemBody) {
            return _this3.props.getItemBody(_extends({}, itemProps, {
              props: props || {},
              onItemFocus: onItemFocus,
              content: content
            }));
          }

          return React.createElement(
            DropdownListItem,
            _extends({ key: itemId }, itemProps),
            content
          );
        })
      );
    };

    return DropdownList;
  }(React.PureComponent);

  DropdownList.propTypes = {
    /**
     * Specify which item should be focused after dropdown open
     */
    autoFocusedItemId: propTypes_16([propTypes_6, propTypes_4]),
    autoFocusOnItemsCountChange: propTypes_2,
    className: propTypes_6,
    /**
     * use this property to enable/disable keyboard events of DropdownList
     */
    keyboardEventsEnabled: propTypes_2,
    items: propTypes_9(propTypes_17({
      className: propTypes_6,
      itemId: propTypes_16([propTypes_6, propTypes_4]).isRequired,
      content: propTypes_13,
      divider: propTypes_2,
      icon: propTypes_13,
      onItemSelect: propTypes_3,
      onItemFocus: propTypes_3,
      isDisabled: propTypes_2,
      isSelected: propTypes_2,
      props: propTypes_5
    })).isRequired,
    getItemBody: propTypes_3,
    onScroll: propTypes_3,
    /**
     * you can specify which key press should trigger list item select
     */
    itemSelectKeyCodes: propTypes_9(propTypes_4)
  };

  DropdownList.defaultProps = {
    keyboardEventsEnabled: true,
    itemSelectKeyCodes: [KeyCodes.enter]
  };

  var styles$s = { "popper-tooltip": "lc-popper-tooltip", "popper-tooltip--invert": "lc-popper-tooltip--invert", "popper-tooltip--important": "lc-popper-tooltip--important", "popper-tooltip-enter": "lc-popper-tooltip-enter", "popper-tooltip-enter-active": "lc-popper-tooltip-enter-active", "popper-tooltip-exit": "lc-popper-tooltip-exit", "popper-tooltip-exit-active": "lc-popper-tooltip-exit-active", "popper-tooltip__arrow": "lc-popper-tooltip__arrow", "css-tooltip": "lc-css-tooltip", "css-tooltip--visible": "lc-css-tooltip--visible", "css-tooltip--invert": "lc-css-tooltip--invert", "css-tooltip--important": "lc-css-tooltip--important", "css-tooltip__arrow": "lc-css-tooltip__arrow", "css-tooltip__close": "lc-css-tooltip__close", "popper-tooltip__close": "lc-popper-tooltip__close", "guide-tooltip--slide": "lc-guide-tooltip--slide", "guide-tooltip__overlay": "lc-guide-tooltip__overlay", "guide-tooltip__overlay--slide": "lc-guide-tooltip__overlay--slide", "guide-tooltip__overlay--visible": "lc-guide-tooltip__overlay--visible" };

  function buildPopperModifiers(modifiers) {
    var offset = modifiers.offset,
        flip = modifiers.flip,
        hide = modifiers.hide,
        preventOverflow = modifiers.preventOverflow,
        arrow = modifiers.arrow,
        rest = objectWithoutProperties(modifiers, ['offset', 'flip', 'hide', 'preventOverflow', 'arrow']);

    var arrowProps = _extends({ enabled: true }, arrow || {});

    return _extends({
      offset: _extends({
        offset: arrowProps.enabled ? '0, 8' : '0, 4'
      }, offset || {}),
      flip: _extends({ enabled: true, behavior: 'flip' }, flip || {}),
      arrow: arrowProps,
      preventOverflow: _extends({
        enabled: true,
        escapeWithReference: true,
        boundariesElement: 'viewport'
      }, preventOverflow || {}),
      hide: _extends({ enabled: true }, hide || {})
    }, rest);
  }

  function buildPopperTooltipStyle(popperCalculatedStyle, propsStyle, zIndex, transitionDuration, transitionDelay) {
    return _extends({}, popperCalculatedStyle, propsStyle, {
      zIndex: zIndex,
      transitionDuration: transitionDuration + 'ms',
      transitionDelay: transitionDelay + 'ms'
    });
  }

  var baseClass$L = 'popper-tooltip';

  var noop$4 = function noop() {};

  var PopperTooltip = function (_React$PureComponent) {
    inherits(PopperTooltip, _React$PureComponent);

    function PopperTooltip() {
      var _temp, _this, _ret;

      classCallCheck(this, PopperTooltip);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.state = {
        isVisible: false
      }, _this.getModifiers = index(buildPopperModifiers), _this.getTooltipStyle = index(buildPopperTooltipStyle), _this.getIsVisible = function () {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;
        var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.state;
        return _this.isIsVisibleControlled() ? props.isVisible : state.isVisible;
      }, _this.setTooltipRef = function (ref) {
        _this.tooltipRef = ref;
      }, _this.setTriggerRef = function (ref) {
        _this.triggerRef = ref;
      }, _this.getTriggerRef = function () {
        return _this.props.triggerRef || _this.triggerRef;
      }, _this.getTooltipRef = function () {
        return _this.props.tooltipRef || _this.tooltipRef;
      }, _this.isIsVisibleControlled = function () {
        return _this.props.triggerActionType === 'managed';
      }, _this.handleTriggerMouseEnter = function () {
        _this.isTriggerHovered = true;
        _this.clearTooltipHideTimeout();
        _this.setState(function (prevState) {
          var shouldTriggerOpenCallback = !_this.isIsVisibleControlled() && !prevState.isVisible && _this.props.onOpen;

          if (shouldTriggerOpenCallback) {
            _this.props.onOpen();
          }

          return {
            isVisible: true
          };
        });
      }, _this.handleTriggerMouseLeave = function () {
        _this.isTriggerHovered = false;
        _this.handleDelayedTooltipHide();
      }, _this.handleTooltipMouseEnter = function () {
        _this.clearTooltipHideTimeout();
        var tooltipRef = _this.getTooltipRef();
        if (tooltipRef) {
          tooltipRef.addEventListener('mouseleave', _this.handleTooltipMouseLeave);
        }

        _this.setState({
          isVisible: true
        });
      }, _this.handleTooltipMouseLeave = function () {
        /**
         * We need to check `isTriggerHovered` condition to cover the following scenario.
         * Using custom offset can cause tooltip and trigger overlaping,
         * Then mouse events can be triggered in specific order:
         * - trigger mouse enter (mouse moves to trigger, tooltip shows),
         * - tooltip mouse leave (mouse still moves over trigger, but leaves tooltip),
         * - no second trigger mouse enter event (mouse still over trigger, so it was not entering trigger boudaries)
         * This will close tooltip component despite the fact that mouse cursor is over trigger.
         */
        if (!_this.isTriggerHovered) {
          _this.clearTooltipHideTimeout();
          _this.handleDelayedTooltipHide();
        }
      }, _this.handleTriggerClick = function () {
        _this.setState(function (prevState) {
          var isVisible = !prevState.isVisible;

          var shouldTriggerOpenCallback = !_this.isIsVisibleControlled() && isVisible && _this.props.onOpen;

          if (shouldTriggerOpenCallback) {
            _this.props.onOpen();
          }

          return {
            isVisible: isVisible
          };
        });
      }, _this.handleDelayedTooltipHide = function () {
        _this.hideTimerId = setTimeout(function () {
          _this.setState({
            isVisible: false
          });
        }, _this.props.hoverOutDelayTimeout);
      }, _this.clearTooltipHideTimeout = function () {
        if (_this.hideTimerId) {
          clearTimeout(_this.hideTimerId);
        }
      }, _this.manageTooltipListeners = function (didShow, didHide) {
        var tooltipRef = _this.getTooltipRef();
        if (!tooltipRef) {
          return;
        }

        if (didShow) {
          tooltipRef.addEventListener('mouseenter', _this.handleTooltipMouseEnter);
        }

        if (didHide) {
          tooltipRef.removeEventListener('mouseenter', _this.handleTooltipMouseEnter);
          tooltipRef.removeEventListener('mouseleave', _this.handleTooltipMouseLeave);
        }
      }, _this.handleDocumentClick = function (event) {
        var triggerRef = _this.getTriggerRef();
        var tooltipRef = _this.getTooltipRef();

        if (triggerRef && !triggerRef.contains(event.target) && tooltipRef && !tooltipRef.contains(event.target)) {
          _this.handleClose();
        }
      }, _this.handleDocumentKeyDown = function (event) {
        if (event.key === 'Escape') {
          _this.handleClose();
        }
      }, _this.handleClose = function () {
        if (_this.isIsVisibleControlled()) {
          _this.props.onClose();
        } else {
          _this.setState({
            isVisible: false
          });
        }
      }, _this.renderTriggerElement = function (_ref) {
        var ref = _ref.ref;
        var _this$props = _this.props,
            trigger = _this$props.trigger,
            triggerActionType = _this$props.triggerActionType;


        var triggerProps = { ref: ref };

        if (triggerActionType === 'click') {
          triggerProps.onClick = _this.handleTriggerClick;
        }

        if (triggerActionType === 'hover') {
          triggerProps.onMouseEnter = _this.handleTriggerMouseEnter;
          triggerProps.onMouseLeave = _this.handleTriggerMouseLeave;
        }

        if (typeof trigger === 'function') {
          return trigger(triggerProps);
        }

        return React.cloneElement(trigger, triggerProps);
      }, _this.renderPopperContent = function (_ref2) {
        var _cx, _cx2;

        var ref = _ref2.ref,
            popperCalculatedStyle = _ref2.style,
            placement = _ref2.placement,
            arrowProps = _ref2.arrowProps;
        var _this$props2 = _this.props,
            children = _this$props2.children,
            className = _this$props2.className,
            closeOnOutsideClick = _this$props2.closeOnOutsideClick,
            closeWithX = _this$props2.closeWithX,
            closeWithEsc = _this$props2.closeWithEsc,
            hoverOutDelayTimeout = _this$props2.hoverOutDelayTimeout,
            zIndex = _this$props2.zIndex,
            eventsEnabled = _this$props2.eventsEnabled,
            modifiers = _this$props2.modifiers,
            propsStyle = _this$props2.style,
            theme = _this$props2.theme,
            positionFixed = _this$props2.positionFixed,
            isVisible = _this$props2.isVisible,
            referenceElement = _this$props2.referenceElement,
            trigger = _this$props2.trigger,
            triggerActionType = _this$props2.triggerActionType,
            withFadeAnimation = _this$props2.withFadeAnimation,
            transitionDuration = _this$props2.transitionDuration,
            transitionDelay = _this$props2.transitionDelay,
            onOpen = _this$props2.onOpen,
            restProps = objectWithoutProperties(_this$props2, ['children', 'className', 'closeOnOutsideClick', 'closeWithX', 'closeWithEsc', 'hoverOutDelayTimeout', 'zIndex', 'eventsEnabled', 'modifiers', 'style', 'theme', 'positionFixed', 'isVisible', 'referenceElement', 'trigger', 'triggerActionType', 'withFadeAnimation', 'transitionDuration', 'transitionDelay', 'onOpen']);


        var computedModifiers = _this.getModifiers(_this.props.modifiers);
        var style = _this.getTooltipStyle(popperCalculatedStyle, propsStyle, zIndex, transitionDuration, transitionDelay);

        return React.createElement(
          'div',
          _extends({
            tabIndex: 0
          }, restProps, {
            ref: ref,
            style: style,
            'data-placement': placement,
            className: classnames((_cx = {}, _cx[styles$s[baseClass$L]] = true, _cx[styles$s[baseClass$L + '--' + theme]] = theme, _cx[className] = className, _cx))
          }),
          closeWithX && React.createElement(
            'button',
            {
              type: 'button',
              onClick: _this.handleClose,
              className: styles$s[baseClass$L + '__close']
            },
            React.createElement(CloseIcon, { width: '16px', height: '16px' })
          ),
          children,
          computedModifiers.arrow.enabled && React.createElement('div', _extends({}, arrowProps, {
            className: classnames((_cx2 = {}, _cx2[styles$s[baseClass$L + '__arrow']] = true, _cx2[arrowProps.className] = arrowProps.className, _cx2)),
            'data-placement': placement
          }))
        );
      }, _this.renderPopper = function () {
        var modifiers = _this.getModifiers(_this.props.modifiers);
        var isVisible = _this.getIsVisible();

        var popperComponent = React.createElement(
          Popper$1,
          {
            placement: _this.props.placement,
            modifiers: modifiers,
            innerRef: _this.props.tooltipRef || _this.setTooltipRef,
            eventsEnabled: _this.props.eventsEnabled,
            positionFixed: _this.props.positionFixed,
            referenceElement: _this.props.referenceElement
          },
          _this.renderPopperContent
        );

        if (_this.props.withFadeAnimation) {
          return React.createElement(
            CSSTransition,
            {
              timeout: _this.props.transitionDuration,
              mountOnEnter: true,
              unmountOnExit: true,
              'in': isVisible,
              classNames: styles$s[baseClass$L]
            },
            popperComponent
          );
        }

        return isVisible && popperComponent;
      }, _this.renderPopperManager = function () {
        return React.createElement(
          Manager,
          null,
          _this.props.trigger && React.createElement(
            Reference,
            { innerRef: _this.props.triggerRef || _this.setTriggerRef },
            _this.renderTriggerElement
          ),
          _this.renderPopper()
        );
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    PopperTooltip.prototype.componentDidMount = function componentDidMount() {
      if (this.props.closeOnOutsideClick && this.getIsVisible()) {
        document.addEventListener('click', this.handleDocumentClick);
      }
      if (this.props.closeWithEsc && this.getIsVisible()) {
        document.addEventListener('keydown', this.handleDocumentKeyDown);
      }
    };

    PopperTooltip.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
      var prevIsVisible = this.getIsVisible(prevProps, prevState);
      var isVisible = this.getIsVisible();

      var didShow = !prevIsVisible && isVisible;
      var didHide = prevIsVisible && !isVisible;

      if (this.props.closeOnOutsideClick && didShow) {
        document.addEventListener('click', this.handleDocumentClick);
      }

      if (this.props.closeWithEsc && this.getIsVisible()) {
        document.addEventListener('keydown', this.handleDocumentKeyDown);
      }

      if (didHide) {
        document.removeEventListener('click', this.handleDocumentClick);
        document.removeEventListener('keydown', this.handleDocumentKeyDown);
      }

      if (this.props.triggerActionType === 'hover') {
        this.manageTooltipListeners(didShow, didHide);
      }
    };

    PopperTooltip.prototype.componentWillUnmount = function componentWillUnmount() {
      var tooltipRef = this.getTooltipRef();
      if (tooltipRef) {
        tooltipRef.removeEventListener('mouseenter', this.handleTooltipMouseEnter);
        tooltipRef.removeEventListener('mouseleave', this.handleTooltipMouseLeave);
      }
      document.removeEventListener('click', this.handleDocumentClick);
      document.removeEventListener('keydown', this.handleDocumentKeyDown);
    };

    PopperTooltip.prototype.render = function render() {
      return this.renderPopperManager();
    };

    return PopperTooltip;
  }(React.PureComponent);

  PopperTooltip.propTypes = {
    children: propTypes_13.isRequired,
    className: propTypes_6,
    /**
     * Use `closeOnOutsideClick=true` when you want tooltip to be closed on click outside it.
     * If you are using `triggerActionType='managed'` event handler will call provided onClose prop.
     */
    closeOnOutsideClick: propTypes_2,
    /**
     * Set to `true` to add an X button that will close the tooltip.
     */
    closeWithX: propTypes_2,
    /**
     * Set to `true` to close tooltip when ESC key is pressed.
     */
    closeWithEsc: propTypes_2,
    eventsEnabled: propTypes_2,
    /**
     * Number of miliseconds until tooltip close.
     * `hoverOutDelayTimeout` prop is important when you are using `triggerActionType='hover'`.
     * Thanks to this tooltip won't close when user moves mouse cursor from `trigger` to `tooltip`.
     */
    hoverOutDelayTimeout: propTypes_4,
    isVisible: propTypes_2,
    /**
     * Set to `false` to turn off fade-in/fade-out animations.
     */
    withFadeAnimation: propTypes_2,
    style: propTypes_5,
    /**
     * The theme changes the look of the tooltip.
     */
    theme: propTypes_15(['invert', 'important']),
    modifiers: propTypes_5,
    onClose: propTypes_3,
    placement: propTypes_15(['auto', 'auto-end', 'auto-start', 'bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', 'right', 'right-end', 'right-start', 'top', 'top-end', 'top-start']),
    positionFixed: propTypes_2,
    tooltipRef: propTypes_3,
    triggerRef: propTypes_3,
    referenceElement: propTypes_17({
      clientWidth: propTypes_4.isRequired,
      clientHeight: propTypes_4.isRequired
    }),
    /**
     * Use this props to change default value of opacity transition duration (number of miliseconds).
     */
    transitionDuration: propTypes_4,
    /**
     * Use this props to delay tooltip visibilty change (number of miliseconds).
     */
    transitionDelay: propTypes_4,
    /**
     * You can pass as tooltip trigger element a renderer or a component. A couple of props will passed to your
     * component, depending on the chosen `triggerActionType`:
     * - `managed` - `ref`
     * - `click` - `onClick`
     * - `hover` - `onMouseEnter`, `onMouseLeave`
     */
    trigger: propTypes_16([propTypes_3, propTypes_13]),
    /**
     * - Using `managed` will switch component visiblity to controlled state - you will need to provide isVisible props to show/hide tooltip.
     *   It's pretty usefull to handle custom use cases, for instance new feature info tooltips which will be shown to user only once.
     * - Using `click` and `hover` will make component visiblity uncontrolled (`isVisible` state handled by component itself). `isVisible` props won't affect
     *   component visibility.
     */
    triggerActionType: propTypes_15(['managed', 'click', 'hover']),
    zIndex: propTypes_4.isRequired,
    /**
     * Use this props to trigger the function if the tooltip content is going to be visible. It works for `click` and `hover` trigger action types.
     */
    onOpen: propTypes_3
  };

  PopperTooltip.defaultProps = {
    hoverOutDelayTimeout: 100,
    modifiers: {},
    onClose: noop$4,
    style: {},
    withFadeAnimation: true,
    transitionDuration: 200,
    transitionDelay: 0,
    triggerActionType: 'hover',
    placement: 'bottom'
  };

  var baseClass$M = 'css-tooltip';

  function handleTooltipOnClick(event) {
    event.stopPropagation();
  }

  function handleTooltipFocus(event) {
    event.stopPropagation();
  }

  var CssTooltip = function CssTooltip(props) {
    var _cx, _cx2;

    var children = props.children,
        className = props.className,
        isVisible = props.isVisible,
        placement = props.placement,
        width = props.width,
        style = props.style,
        theme = props.theme,
        zIndex = props.zIndex,
        arrowOffsetTop = props.arrowOffsetTop,
        arrowOffsetBottom = props.arrowOffsetBottom,
        arrowOffsetLeft = props.arrowOffsetLeft,
        arrowOffsetRight = props.arrowOffsetRight,
        arrowClassName = props.arrowClassName,
        offsetTop = props.offsetTop,
        offsetBottom = props.offsetBottom,
        offsetLeft = props.offsetLeft,
        offsetRight = props.offsetRight,
        onClose = props.onClose,
        restProps = objectWithoutProperties(props, ['children', 'className', 'isVisible', 'placement', 'width', 'style', 'theme', 'zIndex', 'arrowOffsetTop', 'arrowOffsetBottom', 'arrowOffsetLeft', 'arrowOffsetRight', 'arrowClassName', 'offsetTop', 'offsetBottom', 'offsetLeft', 'offsetRight', 'onClose']);


    return React.createElement(
      'div',
      _extends({}, restProps, {
        'data-placement': placement,
        className: classnames((_cx = {}, _cx[styles$s[baseClass$M]] = true, _cx[styles$s[baseClass$M + '--visible']] = isVisible, _cx[styles$s[baseClass$M + '--' + theme]] = theme, _cx[className] = className, _cx)),
        style: _extends({
          top: offsetTop,
          bottom: offsetBottom,
          left: offsetLeft,
          right: offsetRight,
          zIndex: zIndex,
          width: width
        }, style || {})
      }),
      onClose && React.createElement(
        'button',
        {
          type: 'button',
          onClick: onClose,
          className: styles$s[baseClass$M + '__close']
        },
        React.createElement(CloseIcon, { width: '16px', height: '16px' })
      ),
      children,
      React.createElement('div', {
        className: classnames((_cx2 = {}, _cx2[styles$s[baseClass$M + '__arrow']] = true, _cx2[arrowClassName] = arrowClassName, _cx2)),
        style: {
          top: arrowOffsetTop,
          bottom: arrowOffsetBottom,
          left: arrowOffsetLeft,
          right: arrowOffsetRight
        },
        'data-placement': placement
      })
    );
  };

  CssTooltip.defaultProps = {
    onClick: handleTooltipOnClick,
    onFocus: handleTooltipFocus,
    placement: 'bottom'
  };

  CssTooltip.propTypes = {
    /**
     * Css class name of tooltip arrow.
     * Use this property to extend styles of tooltip arrow, it's a different way to, for instance control position of arrow
     */
    arrowClassName: propTypes_6,
    children: propTypes_13.isRequired,
    /**
     * Css class name of tooltip.
     */
    className: propTypes_6,
    style: propTypes_5,
    /**
     * The theme changes the look of the tooltip.
     */
    theme: propTypes_15(['invert', 'important']),
    isVisible: propTypes_2,
    onClick: propTypes_3,
    onFocus: propTypes_3,
    /**
     * If provided, there will be an X button added to the tooltip that will invoke this callback when clicked.
     */
    onClose: propTypes_3,
    width: propTypes_6,
    placement: propTypes_15(['bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', 'right', 'right-end', 'right-start', 'top', 'top-end', 'top-start']),
    /**
     * Use `arrowOffsetTop`, `arrowOffsetBottom`, `arrowOffsetLeft` or `arrowOffsetRight`
     * to control offset of arrow from one of the edges of tooltip
     */
    arrowOffsetTop: propTypes_6,
    arrowOffsetBottom: propTypes_6,
    arrowOffsetLeft: propTypes_6,
    arrowOffsetRight: propTypes_6,
    /**
     * Use `offsetTop`, `offsetBottom`, `offsetLeft` or `offsetRight`
     * to control offset of tooltip from one of the edges of reference element
     */
    offsetTop: propTypes_6,
    offsetBottom: propTypes_6,
    offsetLeft: propTypes_6,
    offsetRight: propTypes_6,
    zIndex: propTypes_4
  };

  var baseClass$N = 'guide-tooltip';

  var cx$y = bind.bind(styles$s);

  var SpotlightOverlay = function SpotlightOverlay(_ref) {
    var _cx, _cx2, _cx3, _cx4, _cx5;

    var gap = _ref.gap,
        isVisible = _ref.isVisible,
        slide = _ref.slide,
        disablePointerEvents = _ref.disablePointerEvents;

    var overlayLeft = {
      top: gap.top + 'px',
      left: '0',
      width: gap.left + 'px',
      height: gap.height + 'px'
    };
    var overlayRight = {
      top: gap.top + 'px',
      left: gap.right + 'px',
      width: 'calc(100% - ' + gap.right + 'px)',
      height: gap.height + 'px'
    };
    var overlayTop = {
      top: '0',
      left: '0',
      width: '100%',
      height: gap.top + 'px'
    };
    var overlayBottom = {
      top: gap.bottom + 'px',
      left: '0',
      width: '100%',
      height: 'calc(100% - ' + gap.bottom + 'px)'
    };

    var spotlight = {
      top: gap.top + 'px',
      left: gap.left + 'px',
      width: gap.width + 'px',
      height: gap.height + 'px',
      backgroundColor: 'transparent'
    };

    return React.createElement(
      React.Fragment,
      null,
      React.createElement('div', {
        className: cx$y((_cx = {}, _cx[styles$s[baseClass$N + '__overlay']] = true, _cx[styles$s[baseClass$N + '__overlay--visible']] = isVisible, _cx[styles$s[baseClass$N + '__overlay--slide']] = slide, _cx)),
        style: overlayLeft
      }),
      React.createElement('div', {
        className: cx$y((_cx2 = {}, _cx2[styles$s[baseClass$N + '__overlay']] = true, _cx2[styles$s[baseClass$N + '__overlay--visible']] = isVisible, _cx2[styles$s[baseClass$N + '__overlay--slide']] = slide, _cx2)),
        style: overlayTop
      }),
      React.createElement('div', {
        className: cx$y((_cx3 = {}, _cx3[styles$s[baseClass$N + '__overlay']] = true, _cx3[styles$s[baseClass$N + '__overlay--visible']] = isVisible, _cx3[styles$s[baseClass$N + '__overlay--slide']] = slide, _cx3)),
        style: overlayRight
      }),
      React.createElement('div', {
        className: cx$y((_cx4 = {}, _cx4[styles$s[baseClass$N + '__overlay']] = true, _cx4[styles$s[baseClass$N + '__overlay--visible']] = isVisible, _cx4[styles$s[baseClass$N + '__overlay--slide']] = slide, _cx4)),
        style: overlayBottom
      }),
      disablePointerEvents && React.createElement('div', {
        className: cx$y((_cx5 = {}, _cx5[styles$s[baseClass$N + '__overlay']] = true, _cx5[styles$s[baseClass$N + '__overlay--visible']] = isVisible, _cx5[styles$s[baseClass$N + '__overlay--slide']] = slide, _cx5)),
        style: spotlight
      })
    );
  };

  SpotlightOverlay.propTypes = {
    gap: propTypes_17({
      top: propTypes_4.isRequired,
      left: propTypes_4.isRequired,
      bottom: propTypes_4.isRequired,
      right: propTypes_4.isRequired,
      width: propTypes_4.isRequired,
      height: propTypes_4.isRequired
    }).isRequired,
    isVisible: propTypes_2.isRequired,
    slide: propTypes_2.isRequired,
    disablePointerEvents: propTypes_2
  };

  var VirtualReference = function () {
    function VirtualReference(element, padding) {
      classCallCheck(this, VirtualReference);

      this.element = element;
      this.padding = padding;
    }

    VirtualReference.prototype.addPadding = function addPadding(rect) {
      var x = Math.round(rect.left) - this.padding;
      var y = Math.round(rect.top) - this.padding;
      var width = Math.round(rect.width) + 2 * this.padding;
      var height = Math.round(rect.height) + 2 * this.padding;
      var top = y;
      var left = x;
      var bottom = top + height;
      var right = left + width;

      return {
        x: x,
        y: y,
        width: width,
        height: height,
        top: top,
        left: left,
        bottom: bottom,
        right: right
      };
    };

    VirtualReference.prototype.getBoundingClientRect = function getBoundingClientRect() {
      return this.addPadding(this.element.getBoundingClientRect());
    };

    createClass(VirtualReference, [{
      key: "clientWidth",
      get: function get$$1() {
        return this.getBoundingClientRect().width;
      }
    }, {
      key: "clientHeight",
      get: function get$$1() {
        return this.getBoundingClientRect().height;
      }
    }]);
    return VirtualReference;
  }();

  var baseClass$O = 'guide-tooltip';

  var cx$z = bind.bind(styles$s);

  var virtualReference = function virtualReference(element, padding) {
    return new VirtualReference(element, padding);
  };

  var offsetModifiers = {
    offset: {
      offset: '0, 20'
    }
  };

  var spotlightPadding = 8;

  var UserGuideTooltip = function (_React$PureComponent) {
    inherits(UserGuideTooltip, _React$PureComponent);

    UserGuideTooltip.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      if (props.isVisible) {
        if (!state.lastElement) {
          // this is the first time the tooltip is shown - don't slide from the (0, 0) origin
          return {
            shouldSlide: false,
            lastElement: props.element,
            rect: virtualReference(props.element, spotlightPadding).getBoundingClientRect()
          };
        }

        if (props.element !== state.lastElement) {
          // the element has changed - slide to the next one
          return {
            shouldSlide: true,
            lastElement: props.element,
            rect: virtualReference(props.element, spotlightPadding).getBoundingClientRect()
          };
        }

        // window was scrolled or any other change has happened - don't slide
        return {
          shouldSlide: false
        };
      }

      // reset the element when the tooltip hides
      return {
        lastElement: null
      };
    };

    function UserGuideTooltip(props) {
      classCallCheck(this, UserGuideTooltip);

      var _this = possibleConstructorReturn(this, _React$PureComponent.call(this, props));

      _this.state = {
        shouldSlide: false,
        rect: virtualReference(props.element, spotlightPadding).getBoundingClientRect()
      };

      _this.handleViewPortChange = throttle(16, _this.handleDocumentChange.bind(_this));
      return _this;
    }

    UserGuideTooltip.prototype.componentDidMount = function componentDidMount() {
      window.addEventListener('resize', this.handleViewPortChange);
      (this.props.scrollableWrapper || document).addEventListener('scroll', this.handleViewPortChange);
    };

    UserGuideTooltip.prototype.componentWillUnmount = function componentWillUnmount() {
      window.removeEventListener('resize', this.handleViewPortChange);
      (this.props.scrollableWrapper || document).removeEventListener('scroll', this.handleViewPortChange);
    };

    UserGuideTooltip.prototype.handleDocumentChange = function handleDocumentChange() {
      this.setState({
        rect: virtualReference(this.props.element, spotlightPadding).getBoundingClientRect()
      });
    };

    UserGuideTooltip.prototype.render = function render() {
      var _cx;

      var _props = this.props,
          children = _props.children,
          className = _props.className,
          placement = _props.placement,
          zIndex = _props.zIndex,
          element = _props.element,
          isVisible = _props.isVisible,
          slide = _props.slide,
          theme = _props.theme,
          containerName = _props.containerName,
          disableSpotlightPointerEvents = _props.disableSpotlightPointerEvents;
      var rect = this.state.rect;


      var referenceElement = virtualReference(element, spotlightPadding);
      var shouldSlide = !!(slide && this.state.shouldSlide);

      return React.createElement(
        ModalPortal,
        { parentElementName: containerName, zIndex: zIndex },
        React.createElement(SpotlightOverlay, {
          gap: rect,
          isVisible: isVisible,
          slide: shouldSlide,
          disablePointerEvents: disableSpotlightPointerEvents
        }),
        React.createElement(
          PopperTooltip,
          {
            theme: theme || 'invert',
            className: cx$z((_cx = {}, _cx[styles$s[baseClass$O]] = true, _cx[styles$s[baseClass$O + '--slide']] = shouldSlide, _cx[className] = className, _cx)),
            placement: placement,
            triggerActionType: 'managed',
            isVisible: isVisible,
            referenceElement: referenceElement,
            zIndex: zIndex,
            modifiers: offsetModifiers
          },
          children
        )
      );
    };

    return UserGuideTooltip;
  }(React.PureComponent);

  UserGuideTooltip.propTypes = {
    children: propTypes_13.isRequired,
    className: propTypes_6,
    zIndex: propTypes_4.isRequired,
    element: propTypes_16([propTypes_13, propTypes_12(typeof Element === 'undefined' ? function () {} : Element)]).isRequired,
    scrollableWrapper: propTypes_12(typeof Element === 'undefined' ? function () {} : Element),
    isVisible: propTypes_2.isRequired,
    slide: propTypes_2,
    theme: propTypes_15(['invert', 'important']),
    placement: propTypes_15(['auto', 'auto-end', 'auto-start', 'bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', 'right', 'right-end', 'right-start', 'top', 'top-end', 'top-start']),
    containerName: propTypes_6,
    disableSpotlightPointerEvents: propTypes_2
  };

  var styles$t = { "divider": "lc-divider" };

  var baseClass$P = 'divider';

  var Divider = function Divider(props) {
    var className = props.className,
        restProps = objectWithoutProperties(props, ['className']);

    var mergedClassNames = getMergedClassNames(styles$t[baseClass$P], className);

    return React.createElement('div', _extends({ className: mergedClassNames }, restProps));
  };

  Divider.propTypes = {
    className: propTypes_6
  };

  var styles$u = { "progress-bar": "lc-progress-bar", "progress-bar--small": "lc-progress-bar--small", "progress-bar--medium": "lc-progress-bar--medium", "progress-bar--large": "lc-progress-bar--large", "progress-bar--error": "lc-progress-bar--error", "progress-bar__indicator": "lc-progress-bar__indicator", "progress-circle": "lc-progress-circle", "progress-circle--small": "lc-progress-circle--small", "progress-circle--medium": "lc-progress-circle--medium", "progress-circle--large": "lc-progress-circle--large", "progress-circle__bg-line": "lc-progress-circle__bg-line", "progress-circle__indicator": "lc-progress-circle__indicator", "progress-circle--error": "lc-progress-circle--error" };

  var _THICKNESS_FROM_SIZE$1, _SIZE_VALUE_FROM_SIZE;

  var PROGRESS_STATUS = {
    normal: 'normal',
    error: 'error',
    success: 'success'
  };

  var PROGRESS_SIZE = {
    small: 'small',
    medium: 'medium',
    large: 'large'
  };

  var PROGRESS_STATUSES = [PROGRESS_STATUS.normal, PROGRESS_STATUS.error, PROGRESS_STATUS.success];

  var PROGRESS_SIZES = [PROGRESS_SIZE.small, PROGRESS_SIZE.medium, PROGRESS_SIZE.large];

  var THICKNESS_FROM_SIZE$1 = (_THICKNESS_FROM_SIZE$1 = {}, _THICKNESS_FROM_SIZE$1[PROGRESS_SIZE.small] = 2, _THICKNESS_FROM_SIZE$1[PROGRESS_SIZE.medium] = 3, _THICKNESS_FROM_SIZE$1[PROGRESS_SIZE.large] = 4, _THICKNESS_FROM_SIZE$1);

  var SIZE_VALUE_FROM_SIZE = (_SIZE_VALUE_FROM_SIZE = {}, _SIZE_VALUE_FROM_SIZE[PROGRESS_SIZE.small] = 15, _SIZE_VALUE_FROM_SIZE[PROGRESS_SIZE.medium] = 36, _SIZE_VALUE_FROM_SIZE[PROGRESS_SIZE.large] = 56, _SIZE_VALUE_FROM_SIZE);

  function getPercentNumber(status) {
    var percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (status === PROGRESS_STATUS.error) {
      return 0;
    }

    return parseInt(percent.toString(), 10);
  }

  function getProgressStatus(status, percent) {
    if (!PROGRESS_STATUSES.includes(status) && percent >= 100) {
      return PROGRESS_STATUS.normal;
    }

    return status || PROGRESS_STATUS.normal;
  }

  var cx$A = bind.bind(styles$u);

  var baseClass$Q = 'progress-bar';

  var ProgressBar = React.forwardRef(function (_ref, ref) {
    var _cx;

    var status = _ref.status,
        percent = _ref.percent,
        size = _ref.size,
        className = _ref.className,
        restProps = objectWithoutProperties(_ref, ['status', 'percent', 'size', 'className']);

    var progressStatus = getProgressStatus(status, percent);
    var percentNumber = getPercentNumber(progressStatus, percent);

    var mergedClassNames = getMergedClassNames(cx$A((_cx = {}, _cx[baseClass$Q] = true, _cx[baseClass$Q + '--' + size] = size, _cx[baseClass$Q + '--error'] = progressStatus === PROGRESS_STATUS.error, _cx[baseClass$Q + '--success'] = progressStatus === PROGRESS_STATUS.success, _cx)), className);

    return React.createElement(
      'div',
      _extends({}, restProps, { className: mergedClassNames, ref: ref }),
      React.createElement('div', {
        className: styles$u[baseClass$Q + '__indicator'],
        style: { width: percentNumber + '%' }
      })
    );
  });

  ProgressBar.propTypes = {
    className: propTypes_6,
    /**
     * Progress of upload presented on the `ProgressBar`
     */
    percent: propTypes_4.isRequired,
    /**
     * Upload status of the file
     */
    status: propTypes_15(PROGRESS_STATUSES),
    /**
     * The size of the `ProgressBar`
     */
    size: propTypes_15(PROGRESS_SIZES)
  };

  var cx$B = bind.bind(styles$u);

  var baseClass$R = 'progress-circle';

  var ProgressCircle = React.forwardRef(function (_ref, ref) {
    var _cx;

    var status = _ref.status,
        percent = _ref.percent,
        className = _ref.className,
        size = _ref.size,
        restProps = objectWithoutProperties(_ref, ['status', 'percent', 'className', 'size']);

    var progressStatus = getProgressStatus(status, percent);
    var percentNumber = getPercentNumber(progressStatus, percent);
    var thickness = THICKNESS_FROM_SIZE$1[size];
    var sizeValue = SIZE_VALUE_FROM_SIZE[size];

    var mergedClassNames = getMergedClassNames(cx$B((_cx = {}, _cx[baseClass$R] = true, _cx[baseClass$R + '--' + size] = size, _cx[baseClass$R + '--error'] = progressStatus === PROGRESS_STATUS.error, _cx[baseClass$R + '--success'] = progressStatus === PROGRESS_STATUS.success, _cx)), className);

    var circumference = 2 * Math.PI * ((sizeValue - thickness) / 2);

    var indicatorStyle = {
      strokeDasharray: circumference.toFixed(3),
      strokeDashoffset: ((100 - percentNumber) / 100 * circumference).toFixed(3) + 'px'
    };

    var svgViewBox = sizeValue / 2 + ' ' + sizeValue / 2 + ' ' + sizeValue + ' ' + sizeValue;

    return React.createElement(
      'div',
      _extends({
        className: mergedClassNames,
        ref: ref,
        role: 'progressbar'
      }, restProps),
      React.createElement(
        'svg',
        { viewBox: svgViewBox },
        React.createElement('circle', {
          className: styles$u[baseClass$R + '__bg-line'],
          cx: sizeValue,
          cy: sizeValue,
          r: (sizeValue - thickness) / 2,
          fill: 'none',
          strokeWidth: thickness
        }),
        React.createElement('circle', {
          className: styles$u[baseClass$R + '__indicator'],
          style: indicatorStyle,
          cx: sizeValue,
          cy: sizeValue,
          r: (sizeValue - thickness) / 2,
          fill: 'none',
          strokeWidth: thickness
        })
      )
    );
  });

  ProgressCircle.propTypes = {
    className: propTypes_6,
    /**
     * Progress of upload presented on the `ProgressBar`
     */
    percent: propTypes_4.isRequired,
    /**
     * Upload status of the file
     */
    status: propTypes_15(PROGRESS_STATUSES),
    /**
     * The size of the `ProgressBar`
     */
    size: propTypes_15(PROGRESS_SIZES)
  };

  ProgressCircle.defaultProps = {
    size: PROGRESS_SIZE.medium
  };

  var styles$v = { "promo": "lc-promo", "promo__content": "lc-promo__content", "promo__wrapper": "lc-promo__wrapper", "promo__header": "lc-promo__header", "promo__img": "lc-promo__img", "promo__button-text": "lc-promo__button-text", "promo--light": "lc-promo--light", "promo--small": "lc-promo--small", "promo__footer": "lc-promo__footer", "promo--medium": "lc-promo--medium", "promo--large": "lc-promo--large", "promo__close-icon": "lc-promo__close-icon" };

  var cx$C = bind.bind(styles$v);

  var baseClass$S = 'promo';

  var Promo = function Promo(props) {
    var _cx;

    var buttonText = props.buttonText,
        children = props.children,
        className = props.className,
        header = props.header,
        image = props.image,
        light = props.light,
        linkText = props.linkText,
        onButtonClick = props.onButtonClick,
        onClose = props.onClose,
        onLinkClick = props.onLinkClick,
        size = props.size,
        img = props.img,
        restProps = objectWithoutProperties(props, ['buttonText', 'children', 'className', 'header', 'image', 'light', 'linkText', 'onButtonClick', 'onClose', 'onLinkClick', 'size', 'img']);


    var mergedWrapperClassNames = getMergedClassNames(cx$C((_cx = {}, _cx[baseClass$S + '--light'] = light, _cx[baseClass$S + '--' + size] = size, _cx['' + baseClass$S] = true, _cx)), className);
    var shouldRenderLargeFooter = (buttonText || linkText) && size === 'large';
    var shouldRenderSmallOrMediumFooter = (buttonText || linkText) && size !== 'large';

    var footer = React.createElement(
      'div',
      { className: styles$v[baseClass$S + '__footer'] },
      buttonText && React.createElement(
        Button,
        {
          kind: 'primary',
          size: 'compact',
          onClick: onButtonClick,
          className: styles$v[baseClass$S + '__button-text']
        },
        buttonText
      ),
      linkText && React.createElement(
        Button,
        { size: 'compact', kind: 'text', onClick: onLinkClick },
        linkText
      )
    );

    return React.createElement(
      'div',
      _extends({ className: mergedWrapperClassNames }, restProps),
      React.createElement(
        'div',
        { className: styles$v[baseClass$S + '__content'] },
        img && React.createElement('img', { src: img, className: styles$v[baseClass$S + '__img'] }),
        React.createElement(
          'div',
          { className: styles$v[baseClass$S + '__wrapper'] },
          React.createElement(
            'div',
            { className: styles$v[baseClass$S + '__header'] },
            header
          ),
          React.createElement(
            'div',
            null,
            children
          ),
          shouldRenderSmallOrMediumFooter && footer
        ),
        shouldRenderLargeFooter && footer
      ),
      React.createElement(
        'button',
        {
          type: 'button',
          className: styles$v[baseClass$S + '__close-icon'],
          onClick: onClose
        },
        React.createElement(CloseIcon, { fill: '#424d57' })
      )
    );
  };
  Promo.propTypes = {
    className: propTypes_6,
    buttonText: propTypes_6,
    children: propTypes_13.isRequired,
    header: propTypes_6.isRequired,
    image: propTypes_13,
    img: propTypes_6,
    light: propTypes_2,
    linkText: propTypes_6,
    onButtonClick: propTypes_3,
    onClose: propTypes_3,
    onLinkClick: propTypes_3,
    size: propTypes_15(['small', 'medium', 'large'])
  };

  Promo.defaultProps = {
    size: 'small'
  };

  var RefreshIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var RefreshIcon = function RefreshIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-refresh-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M17.65 6.35A7.958 7.958 0 0 0 12 4c-4.42 0-8 3.58-8 8s3.58 8 8 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" })
    );
  };

  exports.default = RefreshIcon;
  });

  var RefreshIcon = unwrapExports(RefreshIcon_1);

  var styles$w = { "upload-bar": "lc-upload-bar", "upload-bar__main": "lc-upload-bar__main", "upload-bar--single": "lc-upload-bar--single", "upload-bar--success": "lc-upload-bar--success", "upload-bar--error": "lc-upload-bar--error", "upload-bar__error-icon": "lc-upload-bar__error-icon", "upload-bar__success-icon": "lc-upload-bar__success-icon", "upload-bar__header": "lc-upload-bar__header", "progress-circle": "lc-progress-circle", "upload-bar__files": "lc-upload-bar__files", "upload-bar__files--enter": "lc-upload-bar__files--enter", "upload-bar__files--enter-active": "lc-upload-bar__files--enter-active", "upload-bar__files--exit": "lc-upload-bar__files--exit", "upload-bar__files--exit-active": "lc-upload-bar__files--exit-active", "upload-bar__files--exit-done": "lc-upload-bar__files--exit-done", "upload-bar__files-wrapper": "lc-upload-bar__files-wrapper", "upload-bar__list": "lc-upload-bar__list", "file-upload-progress": "lc-file-upload-progress", "upload-bar__collapse-btn": "lc-upload-bar__collapse-btn", "upload-bar__title": "lc-upload-bar__title", "file-upload-progress__actions": "lc-file-upload-progress__actions", "file-upload-progress--with-actions-on-hover": "lc-file-upload-progress--with-actions-on-hover", "file-upload-progress__header": "lc-file-upload-progress__header", "file-upload-progress__icon": "lc-file-upload-progress__icon", "file-upload-progress__wrapper": "lc-file-upload-progress__wrapper", "file-upload-progress__title": "lc-file-upload-progress__title", "file-upload-progress--with-icon": "lc-file-upload-progress--with-icon", "file-upload-progress--error": "lc-file-upload-progress--error", "file-upload-progress--success": "lc-file-upload-progress--success", "file-upload-progress__success-icon": "lc-file-upload-progress__success-icon", "upload-bar__actions": "lc-upload-bar__actions", "file-upload-progress__close": "lc-file-upload-progress__close", "file-upload-progress__retry": "lc-file-upload-progress__retry", "upload-bar__close": "lc-upload-bar__close", "upload-bar__retry": "lc-upload-bar__retry" };

  var styles$x = { "collapse-icon": "lc-collapse-icon", "collapse-icon__bottom-arrow": "lc-collapse-icon__bottom-arrow", "collapse-icon__top-arrow": "lc-collapse-icon__top-arrow", "collapse-icon--expanded": "lc-collapse-icon--expanded" };

  var cx$D = bind.bind(styles$x);

  var baseClass$T = 'collapse-icon';

  var CollapseIcon = function CollapseIcon(_ref) {
    var _cx;

    var isExpanded = _ref.isExpanded,
        className = _ref.className,
        restProps = objectWithoutProperties(_ref, ['isExpanded', 'className']);

    var mergedClassNames = getMergedClassNames(cx$D((_cx = {}, _cx[baseClass$T] = true, _cx[baseClass$T + '--expanded'] = isExpanded, _cx)), className);

    return React.createElement(
      'svg',
      _extends({
        width: '18',
        height: '18',
        viewBox: '0 0 18 18'
      }, restProps, {
        className: mergedClassNames
      }),
      React.createElement('path', {
        className: styles$x[baseClass$T + '__top-arrow'],
        d: 'M7 18V16H3.41L7.91 11.5L6.5 10.09L2 14.59V11H0V18H7Z'
      }),
      React.createElement('path', {
        className: styles$x[baseClass$T + '__bottom-arrow'],
        d: 'M11.5001 7.91L16.0001 3.41V7H18.0001V0H11.0001V2H14.5901L10.0901 6.5L11.5001 7.91Z'
      })
    );
  };

  CollapseIcon.propTypes = {
    className: propTypes_6,
    isExpanded: propTypes_2
  };

  var UPLOAD_BAR_MODE = {
    single: 'single',
    multiple: 'multiple'
  };

  var UPLOAD_BAR_MODES = [UPLOAD_BAR_MODE.single, UPLOAD_BAR_MODE.multiple];

  var UPLOAD_PROGRESS_ACTIONS_STATE = {
    visible: 'visible',
    hover: 'hover',
    hidden: 'hidden'
  };

  var UPLOAD_PROGRESS_ACTIONS_STATES = [UPLOAD_PROGRESS_ACTIONS_STATE.visible, UPLOAD_PROGRESS_ACTIONS_STATE.hover, UPLOAD_PROGRESS_ACTIONS_STATE.hidden];

  var cx$E = bind.bind(styles$w);

  var baseClass$U = 'file-upload-progress';

  var FileUploadProgressActions = function FileUploadProgressActions(props) {
    if (!props.onRetryButtonClick && !props.onCloseButtonClick || !props.isVisible) {
      return null;
    }

    return React.createElement(
      'div',
      { className: styles$w[baseClass$U + '__actions'] },
      props.onRetryButtonClick && props.progressStatus === 'error' && React.createElement(
        'button',
        {
          type: 'button',
          className: styles$w[baseClass$U + '__retry'],
          'aria-label': 'Retry',
          onClick: props.onRetryButtonClick
        },
        React.createElement(RefreshIcon, null)
      ),
      props.onCloseButtonClick && props.progressStatus !== PROGRESS_STATUS.success && React.createElement(
        'button',
        {
          type: 'button',
          className: styles$w[baseClass$U + '__close'],
          'aria-label': 'Close',
          onClick: props.onCloseButtonClick
        },
        React.createElement(CloseIcon, null)
      )
    );
  };

  FileUploadProgressActions.propTypes = {
    /**
     * Useful to cancel the file upload or to remove the file when it's upload resulted in an error
     */
    onCloseButtonClick: propTypes_3,
    /**
     * Useful to retry the file upload
     */
    onRetryButtonClick: propTypes_3,
    progressStatus: propTypes_15(PROGRESS_STATUSES),
    isVisible: propTypes_2,
    className: propTypes_6
  };

  var FileUploadProgress = React.forwardRef(function (props, ref) {
    var _cx;

    var className = props.className,
        icon = props.icon,
        percent = props.percent,
        status = props.status,
        title = props.title,
        size = props.size,
        actionsVisibilityState = props.actionsVisibilityState,
        onCloseButtonClick = props.onCloseButtonClick,
        onRetryButtonClick = props.onRetryButtonClick,
        restProps = objectWithoutProperties(props, ['className', 'icon', 'percent', 'status', 'title', 'size', 'actionsVisibilityState', 'onCloseButtonClick', 'onRetryButtonClick']);


    var progressStatus = getProgressStatus(status, percent);
    var percentNumber = getPercentNumber(progressStatus, percent);

    var mergedClassNames = getMergedClassNames(cx$E((_cx = {}, _cx[baseClass$U] = true, _cx[baseClass$U + '--with-icon'] = icon, _cx[baseClass$U + '--error'] = progressStatus === PROGRESS_STATUS.error, _cx[baseClass$U + '--success'] = progressStatus === PROGRESS_STATUS.success, _cx[baseClass$U + '--with-actions-on-hover'] = actionsVisibilityState === UPLOAD_PROGRESS_ACTIONS_STATE.hover, _cx)), className);

    return React.createElement(
      'div',
      _extends({}, restProps, { className: mergedClassNames, ref: ref }),
      icon && progressStatus !== PROGRESS_STATUS.success && React.createElement(
        'div',
        { className: styles$w[baseClass$U + '__icon'] },
        icon
      ),
      progressStatus === PROGRESS_STATUS.success && React.createElement(
        'div',
        { className: styles$w[baseClass$U + '__success-icon'] },
        React.createElement(CheckIcon, null)
      ),
      React.createElement(
        'div',
        { className: styles$w[baseClass$U + '__wrapper'] },
        React.createElement(
          'div',
          { className: styles$w[baseClass$U + '__header'] },
          title && React.createElement(
            'div',
            { className: styles$w[baseClass$U + '__title'] },
            title
          ),
          React.createElement(FileUploadProgressActions, {
            onRetryButtonClick: onRetryButtonClick,
            onCloseButtonClick: onCloseButtonClick,
            isVisible: props.actionsVisibilityState !== 'hidden',
            progressStatus: progressStatus
          })
        ),
        progressStatus !== PROGRESS_STATUS.success && React.createElement(ProgressBar, {
          size: size,
          percent: percentNumber,
          status: progressStatus
        })
      )
    );
  });

  FileUploadProgress.propTypes = {
    /**
     * Use `actionsVisibilityState` to control visibility of file upload actions (refresh and remove)
     */
    actionsVisibilityState: propTypes_15(UPLOAD_PROGRESS_ACTIONS_STATES),
    className: propTypes_6,
    /**
     * Usually an icon of the uploaded file
     */
    icon: propTypes_13,
    /**
     * Usually a name of the uploaded file
     */
    title: propTypes_6,
    /**
     * Progress of upload presented on the `ProgressBar`
     */
    percent: propTypes_4,
    /**
     * The size of the `ProgressBar`
     */
    size: propTypes_15(PROGRESS_SIZES),
    /**
     * Upload status of the file
     */
    status: propTypes_15(PROGRESS_STATUSES),
    /**
     * Useful to cancel the file upload or to remove the file when it's upload resulted in an error
     */
    onCloseButtonClick: propTypes_3,
    /**
     * Useful to retry the file upload
     */
    onRetryButtonClick: propTypes_3
  };

  var cx$F = bind.bind(styles$w);

  var baseClass$V = 'upload-bar';

  var UploadBarComponent = function (_React$PureComponent) {
    inherits(UploadBarComponent, _React$PureComponent);

    function UploadBarComponent() {
      var _temp, _this, _ret;

      classCallCheck(this, UploadBarComponent);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.state = {
        isExpanded: false
      }, _this.getIsExpanded = function () {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;
        var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.state;
        return _this.isIsExpandedControlled() ? props.isExpanded : state.isExpanded;
      }, _this.getHeaderIcon = function () {
        var _this$props = _this.props,
            status = _this$props.status,
            percent = _this$props.percent;


        if (status === PROGRESS_STATUS.success) {
          return React.createElement(
            'div',
            { className: styles$w[baseClass$V + '__success-icon'] },
            React.createElement(CheckIcon, null)
          );
        }

        if (status === PROGRESS_STATUS.error) {
          return React.createElement(
            'div',
            { className: styles$w[baseClass$V + '__error-icon'] },
            React.createElement(AlertCircleIcon, { fill: '#f4574c' })
          );
        }

        return React.createElement(ProgressCircle, {
          status: status,
          percent: percent,
          size: PROGRESS_SIZE.small
        });
      }, _this.getHtmlProps = function () {
        var _this$props2 = _this.props,
            className = _this$props2.className,
            children = _this$props2.children,
            icon = _this$props2.icon,
            size = _this$props2.size,
            status = _this$props2.status,
            title = _this$props2.title,
            innerRef = _this$props2.innerRef,
            percent = _this$props2.percent,
            errorMessage = _this$props2.errorMessage,
            isExpanded = _this$props2.isExpanded,
            onCloseButtonClick = _this$props2.onCloseButtonClick,
            shouldExpandOnEndWithErrors = _this$props2.shouldExpandOnEndWithErrors,
            shouldCollapseOnEndWithSuccess = _this$props2.shouldCollapseOnEndWithSuccess,
            onCollapseButtonClick = _this$props2.onCollapseButtonClick,
            onRetryButtonClick = _this$props2.onRetryButtonClick,
            mode = _this$props2.mode,
            restProps = objectWithoutProperties(_this$props2, ['className', 'children', 'icon', 'size', 'status', 'title', 'innerRef', 'percent', 'errorMessage', 'isExpanded', 'onCloseButtonClick', 'shouldExpandOnEndWithErrors', 'shouldCollapseOnEndWithSuccess', 'onCollapseButtonClick', 'onRetryButtonClick', 'mode']);


        return restProps;
      }, _this.handleCollapseButtonClick = function (e) {
        e.stopPropagation();

        if (_this.isIsExpandedControlled()) {
          _this.props.onCollapseButtonClick(e);
        } else {
          _this.setState(function (prevState) {
            return {
              isExpanded: !prevState.isExpanded
            };
          });
        }
      }, _this.handleRetryButtonClick = function (e) {
        e.stopPropagation();
        _this.props.onRetryButtonClick(e);
      }, _this.handleCloseButtonClick = function (e) {
        e.stopPropagation();
        _this.props.onCloseButtonClick(e);
      }, _this.isIsExpandedControlled = function () {
        return _this.props.isExpanded !== undefined;
      }, _this.showDetailedView = function () {
        _this.setState({ isExpanded: true });
      }, _this.hideDetailedView = function () {
        _this.setState({ isExpanded: false });
      }, _this.renderActionIcons = function () {
        var _this$props3 = _this.props,
            mode = _this$props3.mode,
            status = _this$props3.status,
            onCloseButtonClick = _this$props3.onCloseButtonClick,
            onRetryButtonClick = _this$props3.onRetryButtonClick;


        var withError = status === PROGRESS_STATUS.error;

        if (!(withError && (onRetryButtonClick || onCloseButtonClick))) {
          if (mode !== UPLOAD_BAR_MODE.single) {
            return React.createElement(
              'button',
              {
                className: styles$w[baseClass$V + '__collapse-btn'],
                type: 'button',
                onClick: _this.handleCollapseButtonClick
              },
              React.createElement(CollapseIcon, { isExpanded: _this.getIsExpanded() })
            );
          }

          return null;
        }

        return React.createElement(
          'div',
          { className: styles$w[baseClass$V + '__actions'] },
          onRetryButtonClick && React.createElement(
            'button',
            {
              type: 'button',
              className: styles$w[baseClass$V + '__retry'],
              'aria-label': 'Retry',
              onClick: _this.handleRetryButtonClick
            },
            React.createElement(RefreshIcon, null)
          ),
          onCloseButtonClick && React.createElement(
            'button',
            {
              type: 'button',
              className: styles$w[baseClass$V + '__close'],
              'aria-label': 'Close',
              onClick: _this.handleCloseButtonClick
            },
            React.createElement(CloseIcon, null)
          )
        );
      }, _this.renderUploadBarSingleMode = function () {
        var _cx;

        var _this$props4 = _this.props,
            className = _this$props4.className,
            icon = _this$props4.icon,
            status = _this$props4.status,
            title = _this$props4.title,
            innerRef = _this$props4.innerRef,
            percent = _this$props4.percent,
            size = _this$props4.size,
            errorMessage = _this$props4.errorMessage;


        var htmlProps = _this.getHtmlProps();

        var withError = status === PROGRESS_STATUS.error;
        var withSuccess = status === PROGRESS_STATUS.success;

        var mergedClassNames = getMergedClassNames(cx$F(baseClass$V, baseClass$V + '--single', (_cx = {}, _cx[baseClass$V + '--error'] = withError, _cx[baseClass$V + '--success'] = withSuccess, _cx)), className);

        return React.createElement(
          'div',
          _extends({ ref: innerRef, className: mergedClassNames }, htmlProps),
          React.createElement(
            'div',
            {
              className: styles$w[baseClass$V + '__main'],
              onClick: _this.handleCollapseButtonClick
            },
            React.createElement(
              'div',
              { className: styles$w[baseClass$V + '__header'] },
              React.createElement(FileUploadProgress, {
                title: withError ? errorMessage || title : title,
                percent: percent,
                status: status,
                icon: icon,
                size: size
              })
            ),
            _this.renderActionIcons()
          )
        );
      }, _this.renderUploadBarMultipleMode = function () {
        var _cx2;

        var _this$props5 = _this.props,
            className = _this$props5.className,
            children = _this$props5.children,
            status = _this$props5.status,
            title = _this$props5.title,
            innerRef = _this$props5.innerRef,
            errorMessage = _this$props5.errorMessage;


        var htmlProps = _this.getHtmlProps();

        var withError = status === PROGRESS_STATUS.error;

        var mergedClassNames = getMergedClassNames(cx$F(baseClass$V, (_cx2 = {}, _cx2[baseClass$V + '--error'] = withError, _cx2)), className);

        return React.createElement(
          'div',
          _extends({ ref: innerRef, className: mergedClassNames }, htmlProps),
          React.createElement(
            'div',
            {
              className: styles$w[baseClass$V + '__main'],
              onClick: _this.handleCollapseButtonClick
            },
            React.createElement(
              'div',
              { className: styles$w[baseClass$V + '__header'] },
              _this.getHeaderIcon(),
              React.createElement(
                'div',
                { className: styles$w[baseClass$V + '__title'] },
                withError ? errorMessage || title : title
              )
            ),
            _this.renderActionIcons()
          ),
          React.createElement(
            TransitionGroup,
            { component: null },
            _this.getIsExpanded() && React.createElement(
              CSSTransition,
              {
                timeout: 300,
                classNames: {
                  enter: styles$w[baseClass$V + '__files--enter'],
                  enterActive: styles$w[baseClass$V + '__files--enter-active'],
                  exit: styles$w[baseClass$V + '__files--exit'],
                  exitActive: styles$w[baseClass$V + '__files--exit-active'],
                  exitDone: styles$w[baseClass$V + '__files--exit-done']
                }
              },
              React.createElement(
                'div',
                { className: styles$w[baseClass$V + '__files'] },
                React.createElement(
                  'div',
                  { className: styles$w[baseClass$V + '__files-wrapper'] },
                  React.createElement(
                    'div',
                    { className: styles$w[baseClass$V + '__list'] },
                    children
                  )
                )
              )
            )
          )
        );
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    UploadBarComponent.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (!this.isIsExpandedControlled()) {
        if (this.props.shouldExpandOnEndWithErrors && prevProps.status !== PROGRESS_STATUS.error && this.props.status === PROGRESS_STATUS.error) {
          this.showDetailedView();
        }

        if (this.props.shouldCollapseOnEndWithSuccess && prevProps.status !== PROGRESS_STATUS.success && this.props.status === PROGRESS_STATUS.success) {
          this.hideDetailedView();
        }
      }
    };

    UploadBarComponent.prototype.render = function render() {
      if (this.props.mode === UPLOAD_BAR_MODE.single) {
        return this.renderUploadBarSingleMode();
      }

      return this.renderUploadBarMultipleMode();
    };

    return UploadBarComponent;
  }(React.PureComponent);

  var basePropTypes$1 = {
    className: propTypes_6,
    /**
     * Error message visible when the status of the upload is equal 'error'
     */
    errorMessage: propTypes_6,
    /**
     * Available in single mode, ie. svg file icon
     */
    icon: propTypes_13,
    /**
     * `UploadBar`'s details visibility can be a controlled by `isExpanded` property. Any inside change (ie. click on the bar head) will trigger `onCollapseButtonClick` method
     * You can also use `UploadBar` without providing `isExpanded` property and it's state will be resolved with component's state
     */
    isExpanded: propTypes_2,
    /**
     * Multiple mode: use when user can upload a few files at the same time
     * Single mode: Useful on mobile devices or when upload of multiple files at the same time is not supported
     */
    mode: propTypes_15(UPLOAD_BAR_MODES),
    /**
     * Progress of upload presented on `ProgressCircle` (multiple mode) or `ProgressBar` (single mode)
     */
    percent: propTypes_4.isRequired,
    /**
     * Available in single mode, the size of the `ProgressBar`
     */
    size: propTypes_15(PROGRESS_SIZES),
    /**
     * Available in multiple mode, when component isExpanded state is not controlled (`isExpanded` property is not defined)
     * When it's equal `true` `UploadBar` will expand and show details on upload end with error
     */
    shouldExpandOnEndWithErrors: propTypes_2,
    /**
     * Available in multiple mode, when component isExpanded state is not controlled (`isExpanded` property is not defined)
     * When it's equal `true` `UploadBar` will collapse and hide details on upload end with success
     */
    shouldCollapseOnEndWithSuccess: propTypes_2,
    /**
     * Multiple mode: Combined status of the upload
     * Single mode: Upload status of the file
     */
    status: propTypes_15(PROGRESS_STATUSES),
    /**
     * Multiple mode: Used to inform user about progress of the upload when UploadBar is collapsed
     * Single mode: Usually a file name
     */
    title: propTypes_6.isRequired,
    /**
     * It's available when used together with `isExpanded` property.
     */
    onCollapseButtonClick: propTypes_3,
    /**
     * Useful to cancel the file upload or to remove the file when it's upload resulted in an error
     * In the multiple mode it should be used to cancel all files
     * The button is visible when `status` property is equal 'error'
     */
    onCloseButtonClick: propTypes_3,
    /**
     * Useful to retry the file upload
     * In the multiple mode it should be used to retry the upload of all files
     * The button is visible when `status` property is equal 'error'
     */
    onRetryButtonClick: propTypes_3
  };

  var baseDefaultProps$1 = {
    mode: UPLOAD_BAR_MODE.multiple // eslint-disable-line react/default-props-match-prop-types,
  };

  UploadBarComponent.propTypes = _extends({}, basePropTypes$1, {
    innerRef: propTypes_12(typeof Element === 'undefined' ? function () {} : Element)
  });

  UploadBarComponent.defaultProps = baseDefaultProps$1;

  var UploadBar = React.forwardRef(function (props, ref) {
    return React.createElement(UploadBarComponent, _extends({ innerRef: ref }, props));
  });

  UploadBar.propTypes = basePropTypes$1;
  UploadBar.defaultProps = baseDefaultProps$1;

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max,
      nativeMin = Math.min;

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now = function() {
    return root.Date.now();
  };

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce$2(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject$1(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;

      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          result = wait - timeSinceLastCall;

      return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }

    function timerExpired() {
      var time = now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now());
    }

    function debounced() {
      var time = now(),
          isInvoking = shouldInvoke(time);

      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$1(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && objectToString.call(value) == symbolTag);
  }

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject$1(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject$1(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  var lodash_debounce = debounce$2;

  var MagnifyIcon_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



  var _react2 = _interopRequireDefault(React__default);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /* eslint-disable max-len, react/prop-types */

  var MagnifyIcon = function MagnifyIcon(props) {
    return _react2.default.createElement(
      "svg",
      _extends({
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24"
      }, props, {
        className: "material material-magnify-icon " + props.className
      }),
      _react2.default.createElement("path", { d: "M9.5 3A6.5 6.5 0 0 1 16 9.5c0 1.61-.59 3.09-1.56 4.23l.27.27h.79l5 5-1.5 1.5-5-5v-.79l-.27-.27A6.516 6.516 0 0 1 9.5 16a6.5 6.5 0 1 1 0-13m0 2C7 5 5 7 5 9.5S7 14 9.5 14 14 12 14 9.5 12 5 9.5 5z" })
    );
  };

  exports.default = MagnifyIcon;
  });

  var SearchIcon = unwrapExports(MagnifyIcon_1);

  var styles$y = { "search-bar__container": "lc-search-bar__container", "search-bar__icon": "lc-search-bar__icon", "search-bar__search-icon": "lc-search-bar__search-icon", "search-bar__search-icon--interactive": "lc-search-bar__search-icon--interactive", "search-bar__clear-icon": "lc-search-bar__clear-icon", "search-bar__clear-icon--hidden": "lc-search-bar__clear-icon--hidden", "search-bar__loader": "lc-search-bar__loader", "search-bar__input": "lc-search-bar__input", "search-bar__input--collapsed": "lc-search-bar__input--collapsed" };

  var baseClass$W = 'search-bar';

  var SearchBar = function (_React$PureComponent) {
    inherits(SearchBar, _React$PureComponent);

    function SearchBar(props) {
      classCallCheck(this, SearchBar);

      var _this = possibleConstructorReturn(this, _React$PureComponent.call(this, props));

      _this.handleChange = function (event) {
        var value = event.target.value;
        var _this$props = _this.props,
            debounceTime = _this$props.debounceTime,
            onChange = _this$props.onChange;


        _this.setState({
          searchTerm: value
        });

        if (debounceTime) {
          _this.debouncedOnChange(value);
          return;
        }

        if (onChange) {
          onChange(value);
        }
      };

      _this.handleKeyPress = function (event) {
        var _this$props2 = _this.props,
            onSubmit = _this$props2.onSubmit,
            onKeyDown = _this$props2.onKeyDown;


        if (onKeyDown) {
          onKeyDown(event);
        }

        if (onSubmit) {
          if (event.keyCode === KeyCodes.enter) {
            onSubmit(_this.state.searchTerm);
          }
        }
      };

      _this.handleClear = function () {
        var _this$props3 = _this.props,
            onChange = _this$props3.onChange,
            onSubmit = _this$props3.onSubmit,
            onClear = _this$props3.onClear;

        var searchFunction = onClear || onSubmit || onChange;

        _this.setState({
          searchTerm: ''
        });

        searchFunction('');

        if (_this.inputRef.current) {
          _this.inputRef.current.focus();
        }
      };

      _this.handleClearButtonKeyDown = function (event) {
        if (event.keyCode === KeyCodes.enter) {
          _this.handleClear();
        }
      };

      _this.handleBlur = function (event) {
        if (_this.props.onBlur) {
          _this.props.onBlur(event);
        }

        if (_this.props.collapseOnBlur) {
          _this.setState({
            isCollapsed: true
          }, function () {
            if (_this.props.onCollapse) {
              _this.props.onCollapse();
            }
          });
        }
      };

      _this.handleFocus = function (event) {
        if (_this.props.onFocus) {
          _this.props.onFocus(event);
        }

        if (_this.props.expandOnFocus) {
          _this.setState({
            isCollapsed: false
          }, function () {
            if (_this.inputRef.current) {
              _this.inputRef.current.focus();
            }

            if (_this.props.onExpand) {
              _this.props.onExpand();
            }
          });
        }
      };

      _this.toggleSearchBarMode = function () {
        _this.setState(function (prevState) {
          return {
            isCollapsed: !!_this.props.collapsable && !prevState.isCollapsed
          };
        }, function () {
          if (_this.state.isCollapsed && _this.props.onCollapse) {
            _this.props.onCollapse();
          }

          if (!_this.state.isCollapsed) {
            if (_this.inputRef.current) {
              _this.inputRef.current.focus();
            }

            if (_this.props.onExpand) {
              _this.props.onExpand();
            }
          }
        });
      };

      _this.inputRef = React.createRef();
      if (_this.props.debounceTime) {
        _this.debouncedOnChange = lodash_debounce(function (value) {
          _this.props.onChange(value);
        }, _this.props.debounceTime);
      }

      _this.state = {
        searchTerm: props.value || '',
        isCollapsed: props.collapsable
      };
      return _this;
    }

    SearchBar.prototype.componentWillUnmount = function componentWillUnmount() {
      if (this.debouncedOnChange) {
        this.debouncedOnChange.cancel();
      }
    };

    SearchBar.prototype.render = function render() {
      var _cx, _cx2, _cx3;

      var _props = this.props,
          className = _props.className,
          placeholder = _props.placeholder,
          value = _props.value,
          loading = _props.loading,
          collapsable = _props.collapsable,
          error = _props.error,
          debounceTime = _props.debounceTime,
          collapseOnBlur = _props.collapseOnBlur,
          expandOnFocus = _props.expandOnFocus,
          onClear = _props.onClear,
          onSubmit = _props.onSubmit,
          onChange = _props.onChange,
          onKeyDown = _props.onKeyDown,
          onCollapse = _props.onCollapse,
          onExpand = _props.onExpand,
          onBlur = _props.onBlur,
          onFocus = _props.onFocus,
          forwardedRef = _props.forwardedRef,
          restProps = objectWithoutProperties(_props, ['className', 'placeholder', 'value', 'loading', 'collapsable', 'error', 'debounceTime', 'collapseOnBlur', 'expandOnFocus', 'onClear', 'onSubmit', 'onChange', 'onKeyDown', 'onCollapse', 'onExpand', 'onBlur', 'onFocus', 'forwardedRef']);
      var _state = this.state,
          searchTerm = _state.searchTerm,
          isCollapsed = _state.isCollapsed;


      var shouldDisplayClearButton = searchTerm && !loading && !isCollapsed;

      var searchIconClassName = classnames(['lc-' + baseClass$W + '__icon', 'lc-' + baseClass$W + '__search-icon'], (_cx = {}, _cx['lc-' + baseClass$W + '__search-icon--interactive'] = collapsable, _cx));

      var inputClassName = classnames('lc-' + baseClass$W + '__input', (_cx2 = {}, _cx2['lc-' + baseClass$W + '__input--collapsed'] = isCollapsed, _cx2));

      var closeIconClassName = classnames(['lc-' + baseClass$W + '__icon', 'lc-' + baseClass$W + '__clear-icon'], (_cx3 = {}, _cx3['lc-' + baseClass$W + '__clear-icon--hidden'] = !shouldDisplayClearButton, _cx3));

      return React.createElement(
        'div',
        _extends({ className: className, ref: forwardedRef }, restProps),
        React.createElement(
          'div',
          { className: styles$y[baseClass$W + '__container'] },
          React.createElement(SearchIcon, {
            width: '18px',
            height: '18px',
            className: searchIconClassName,
            onClick: this.toggleSearchBarMode
          }),
          loading && React.createElement(Loader, {
            size: 'small',
            className: classnames(['lc-' + baseClass$W + '__icon', 'lc-' + baseClass$W + '__loader'])
          }),
          React.createElement(Input, {
            placeholder: placeholder,
            ref: this.inputRef,
            value: value != null ? value : this.state.searchTerm,
            onChange: this.handleChange,
            onFocus: this.handleFocus,
            onBlur: this.handleBlur,
            onKeyDown: this.handleKeyPress,
            className: inputClassName,
            'data-testid': 'search-input'
          }),
          React.createElement(CloseIcon, {
            width: '18px',
            height: '18px',
            onClick: shouldDisplayClearButton ? this.handleClear : null,
            onKeyDown: shouldDisplayClearButton ? this.handleClearButtonKeyDown : null,
            className: closeIconClassName,
            tabIndex: '0',
            'data-testid': 'close-button'
          })
        ),
        error && React.createElement(
          FieldError,
          null,
          error
        )
      );
    };

    return SearchBar;
  }(React.PureComponent);

  SearchBar.propTypes = {
    className: propTypes_6,
    placeholder: propTypes_6,
    /**
     * Pass this prop if you want to control searchbar term from parent component
     */
    value: propTypes_6,
    loading: propTypes_2,
    /**
     * Pass collapsable if you want to display extendable searchbar (usually for smaller screens)
     */
    collapsable: propTypes_2,
    /**
     * Use if you want to collapse the component on blur
     */
    collapseOnBlur: propTypes_2,
    /**
     * Use if you want to expand the component on focus
     */
    expandOnFocus: propTypes_2,
    /**
     * Pass value in `ms` along with `onChange` handler if you want to query by specific number of ms
     */
    debounceTime: propTypes_4,
    error: propTypes_6,
    onChange: propTypes_3,
    onSubmit: propTypes_3,
    onClear: propTypes_3,
    /**
     * Pass onKeyDown function if you want to use event props for example event.preventDefault()
     */
    onKeyDown: propTypes_3,
    onCollapse: propTypes_3,
    onExpand: propTypes_3,
    onFocus: propTypes_3,
    onBlur: propTypes_3,
    forwardedRef: propTypes_16([propTypes_3, propTypes_17({ current: propTypes_8 })])
  };

  SearchBar.defaultProps = {
    placeholder: 'Search...',
    debounceTime: 0
  };

  /* eslint prefer-arrow-callback: ["error", { "allowNamedFunctions": true }] */
  var SearchBar$1 = React.forwardRef(function SearchBarWithRef(props, ref) {
    return React.createElement(SearchBar, _extends({}, props, { forwardedRef: ref }));
  });

  var _IconSize, _IconColorMapper, _IconColorDisabledMap;

  var IconSizeName = {
    XSmall: 'xsmall',
    Small: 'small',
    Medium: 'medium',
    Large: 'large',
    XLarge: 'xlarge'
  };

  var IconSize = (_IconSize = {}, _IconSize[IconSizeName.XSmall] = {
    width: 12,
    height: 12
  }, _IconSize[IconSizeName.Small] = {
    width: 16,
    height: 16
  }, _IconSize[IconSizeName.Medium] = {
    width: 20,
    height: 20
  }, _IconSize[IconSizeName.Large] = {
    width: 24,
    height: 24
  }, _IconSize[IconSizeName.XLarge] = {
    width: 32,
    height: 32
  }, _IconSize);

  var IconTypeName = {
    Primary: 'primary',
    Inverted: 'inverted',
    Link: 'link',
    Success: 'success',
    Warning: 'warning',
    Error: 'error'
  };

  var IconColorMapper = (_IconColorMapper = {}, _IconColorMapper[IconTypeName.Primary] = '#424d57', _IconColorMapper[IconTypeName.Inverted] = '#fff', _IconColorMapper[IconTypeName.Link] = '#4384f5', _IconColorMapper[IconTypeName.Success] = '#4bb678', _IconColorMapper[IconTypeName.Warning] = '#efa842', _IconColorMapper[IconTypeName.Error] = '#d64646', _IconColorMapper);

  var IconColorDisabledMapper = (_IconColorDisabledMap = {}, _IconColorDisabledMap[IconTypeName.Primary] = '#686d72', _IconColorDisabledMap[IconTypeName.Inverted] = '#dbdbdb', _IconColorDisabledMap[IconTypeName.Link] = '#c3d7fa', _IconColorDisabledMap[IconTypeName.Success] = '#4bb678', _IconColorDisabledMap[IconTypeName.Warning] = '#efa842', _IconColorDisabledMap[IconTypeName.Error] = '#d64646', _IconColorDisabledMap);

  var Icon = function Icon(props) {
    var source = props.source,
        _props$size = props.size,
        size = _props$size === undefined ? IconSizeName.Medium : _props$size,
        _props$iconType = props.iconType,
        iconType = _props$iconType === undefined ? IconTypeName.Primary : _props$iconType,
        disabled = props.disabled,
        className = props.className,
        restProps = objectWithoutProperties(props, ['source', 'size', 'iconType', 'disabled', 'className']);

    var filledColor = IconColorMapper[iconType];

    if (disabled) {
      filledColor = IconColorDisabledMapper[iconType];
    }

    var GeneratedIcon = React.createElement(source, _extends({}, IconSize[size], {
      fill: filledColor
    }));

    return React.createElement(
      'span',
      _extends({}, restProps, { className: className }),
      GeneratedIcon
    );
  };
  Icon.propTypes = {
    /**
     * Icon passed in svg format ie. `source={require('svg_icon')}
     */
    source: propTypes_3.isRequired,
    /**
     * Defines width and height of the icon
     */
    size: propTypes_15(['xsmall', 'small', 'medium', 'large', 'xlarge']),
    /**
     * Adjusts color of the icon (if passed)
     */
    disabled: propTypes_2,
    iconType: propTypes_15(['primary', 'inverted', 'link', 'success', 'warning', 'error']),
    className: propTypes_6
  };

  var helpers = {
    generateNotificationUniqueId: generateNotificationUniqueId,
    callAll: callAll,
    getMergedClassNames: getMergedClassNames
  };

  exports.helpers = helpers;
  exports.Button = Button;
  exports.ButtonGroup = ButtonGroup;
  exports.Banner = Banner;
  exports.Card = Card;
  exports.Tab = Tab;
  exports.TabsWrapper = TabsWrapper;
  exports.TabsList = TabsList;
  exports.Tooltip = Tooltip;
  exports.TooltipContent = TooltipContent;
  exports.Toast = Toast;
  exports.ToastWrapper = ToastWrapper;
  exports.NotificationProvider = NotificationProvider;
  exports.ToastConsumer = ToastConsumer;
  exports.NotificationContext = NotificationContext;
  exports.notificationConnect = notificationConnect;
  exports.ModalBase = ModalBase;
  exports.ModalPortal = ModalPortal;
  exports.ActionModal = ActionModal;
  exports.ActionModalActions = ActionModalActions;
  exports.ActionModalContent = ActionModalContent;
  exports.ActionModalHeading = ActionModalHeading;
  exports.ActionModalIcon = ActionModalIcon;
  exports.Modal = Modal;
  exports.ModalFooter = ModalFooter;
  exports.ModalHeader = ModalHeader;
  exports.ModalBody = ModalBody;
  exports.TextField = TextField;
  exports.Input = Input;
  exports.InputField = InputField;
  exports.TextArea = TextArea;
  exports.TextAreaField = TextAreaField;
  exports.RadioButton = RadioButton;
  exports.CheckboxField = CheckboxField;
  exports.Form = Form;
  exports.FormGroup = FormGroup;
  exports.FieldGroup = FieldGroup;
  exports.FieldError = FieldError;
  exports.FieldLabel = FieldLabel;
  exports.FieldDescription = FieldDescription;
  exports.Select = Select;
  exports.SelectField = SelectField;
  exports.MultiSelect = MultiSelect;
  exports.MultiSelectField = MultiSelectField;
  exports.NumericInput = NumericInput;
  exports.NumericInputField = NumericInputField;
  exports.DatePicker = DatePicker$1;
  exports.RangeDatePicker = RangeDatePicker;
  exports.DatePickerRangeSelectInputs = DatePickerRangeSelectInputs;
  exports.DatePickerRangeCalendarsWrapper = DatePickerRangeCalendarsWrapper;
  exports.Switch = Switch;
  exports.InAppMessageBase = InAppMessageBase;
  exports.InAppMessagePortal = InAppMessagePortal;
  exports.InAppMessage = InAppMessage;
  exports.InAppMessageFooter = InAppMessageFooter;
  exports.InAppMessageHeader = InAppMessageHeader;
  exports.InAppMessageBody = InAppMessageBody;
  exports.Badge = Badge;
  exports.Dropdown = Dropdown;
  exports.DropdownList = DropdownList;
  exports.DropdownListItem = DropdownListItem;
  exports.PopperTooltip = PopperTooltip;
  exports.CssTooltip = CssTooltip;
  exports.UserGuideTooltip = UserGuideTooltip;
  exports.Loader = Loader;
  exports.Divider = Divider;
  exports.ProgressBar = ProgressBar;
  exports.ProgressCircle = ProgressCircle;
  exports.Promo = Promo;
  exports.UploadBar = UploadBar;
  exports.FileUploadProgress = FileUploadProgress;
  exports.SearchBar = SearchBar$1;
  exports.Icon = Icon;
  exports.IconSize = IconSizeName;
  exports.IconType = IconTypeName;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
